/*
 * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'org.jetbrains.intellij'
    id 'java'
    id 'checkstyle'
    id 'com.github.spotbugs'
    id 'net.researchgate.release'
}

 repositories {
    gradlePluginPortal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

version = project.version

dependencies {
    implementation group: "com.github.ballerina-platform", name: "lsp4intellij", version: "${lsp4IntellijVersion}"
    testImplementation group: "org.opentest4j", name: "opentest4j", version: "${opentest4jVersion}"
}

intellij {
    version = project.ideaVersion
    pluginName = project.name
    type = 'IC'
    plugins = []
}

tasks.withType(JavaCompile) {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
}

patchPluginXml {
    sinceBuild = project.sinceBuild
    sinceBuild = provider { null }
}

signPlugin {
    certificateChain = System.getenv('CERTIFICATE_CHAIN')
    privateKey = System.getenv('PRIVATE_KEY')
    password = System.getenv('PRIVATE_KEY_PASSWORD')
}

publishPlugin {
    token = System.getenv('PUBLISH_TOKEN')
}

sourceSets {
    main {
        java {
            srcDir 'src/main/gen'
        }
    }
}

spotbugsMain {
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
    reportsDir = file("$project.buildDir/reports/spotbugs")
    def excludeFile = file("${rootDir}/build-config/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        it.excludeFilter = excludeFile
    }
    reports {
        text.enabled = true
    }
}

spotbugsTest {
    enabled = false
}

tasks.withType(Checkstyle) {
    exclude '**/module-info.java'
}

checkstyle {
    toolVersion = project.checkStyleVersion
    configFile file("${rootDir}/build-config/checkstyle/build/checkstyle.xml")
    configProperties = ["suppressionFile": file("${rootDir}/build-config/checkstyle/build/suppressions.xml")]
}

checkstyleMain {
    source = fileTree("src/main/java")
    classpath = sourceSets.main.compileClasspath
    include '**/*.java'
}

checkstyleTest {
    source = fileTree("src/test/java")
    classpath = sourceSets.test.compileClasspath
}

release {
    buildTasks = ['build']
    failOnSnapshotDependencies = true
    versionPropertyFile = 'gradle.properties'
    versionProperties = ['version']
    tagTemplate = '${version}'
    git {
        requireBranch = 'release-${moduleVersion}'
        pushToRemote = 'origin'
    }
}

build.dependsOn check
runIde.dependsOn check
buildPlugin.dependsOn check
