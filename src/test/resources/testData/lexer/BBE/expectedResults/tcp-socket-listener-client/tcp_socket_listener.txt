LINE_COMMENT ('// This is the server implementation for the TCP socket.')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('socket')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Bind the service to the port.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The socket listener should have these four predefined resources.')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('echoServer')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('socket')
: (':')
identifier ('Listener')
( ('(')
DECIMAL_INTEGER_LITERAL ('61598')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This resource is invoked when the new client joins.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onConnect')
( ('(')
identifier ('socket')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Client connected: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('id')
. ('.')
identifier ('toString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This resource is invoked once the content is received from the client.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onReadReady')
( ('(')
identifier ('socket')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('read')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
[ ('[')
byte ('byte')
[ ('[')
] (']')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
[ ('[')
identifier ('content')
, (',')
WHITE_SPACE (' ')
identifier ('length')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('length')
WHITE_SPACE (' ')
> ('>')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// Create a new `ReadableByteChannel` using the newly received content.')
WHITE_SPACE ('\n                ')
var ('var')
WHITE_SPACE (' ')
identifier ('byteChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('createReadableChannel')
( ('(')
identifier ('content')
) (')')
; (';')
WHITE_SPACE ('\n                ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('byteChannel')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('ReadableByteChannel')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('io')
: (':')
identifier ('ReadableCharacterChannel')
WHITE_SPACE (' ')
identifier ('characterChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                    ')
new ('new')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('ReadableCharacterChannel')
( ('(')
identifier ('byteChannel')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"UTF-8"')
) (')')
; (';')
WHITE_SPACE ('\n                    ')
var ('var')
WHITE_SPACE (' ')
identifier ('str')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('characterChannel')
. ('.')
identifier ('read')
( ('(')
DECIMAL_INTEGER_LITERAL ('20')
) (')')
; (';')
WHITE_SPACE ('\n                    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('str')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                        ')
string ('string')
WHITE_SPACE (' ')
identifier ('reply')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
@ ('@')
identifier ('untainted')
> ('>')
identifier ('str')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" back"')
; (';')
WHITE_SPACE ('\n                        ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('payloadByte')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('reply')
. ('.')
identifier ('toBytes')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n                        ')
LINE_COMMENT ('// Send the reply to the `caller`.')
WHITE_SPACE ('\n                        ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n                        ')
int ('int')
WHITE_SPACE (' ')
identifier ('arrayLength')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('payloadByte')
. ('.')
identifier ('length')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n                        ')
while ('while')
WHITE_SPACE (' ')
( ('(')
identifier ('i')
WHITE_SPACE (' ')
< ('<')
WHITE_SPACE (' ')
identifier ('arrayLength')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                            ')
var ('var')
WHITE_SPACE (' ')
identifier ('writeResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('write')
( ('(')
identifier ('payloadByte')
) (')')
; (';')
WHITE_SPACE ('\n                            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('writeResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                                ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Number of bytes written: "')
WHITE_SPACE ('\n                                    ')
+ ('+')
WHITE_SPACE (' ')
identifier ('writeResult')
. ('.')
identifier ('toString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n                                ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('writeResult')
; (';')
WHITE_SPACE ('\n                                ')
identifier ('payloadByte')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('payloadByte')
. ('.')
identifier ('slice')
( ('(')
identifier ('writeResult')
, (',')
WHITE_SPACE (' ')
identifier ('arrayLength')
) (')')
; (';')
WHITE_SPACE ('\n                            ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Unable to write the content"')
, (',')
WHITE_SPACE ('\n                                    ')
identifier ('writeResult')
) (')')
; (';')
WHITE_SPACE ('\n                            ')
} ('}')
WHITE_SPACE ('\n                        ')
} ('}')
WHITE_SPACE ('\n                    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error while writing content to the caller"')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('str')
) (')')
; (';')
WHITE_SPACE ('\n                    ')
} ('}')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Client left: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('id')
. ('.')
identifier ('toString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This resource is invoked for the error situation')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// if it happens during the `onConnect` and `onReadReady`.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onError')
( ('(')
identifier ('socket')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
error ('error')
WHITE_SPACE (' ')
identifier ('er')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"An error occurred"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('er')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
