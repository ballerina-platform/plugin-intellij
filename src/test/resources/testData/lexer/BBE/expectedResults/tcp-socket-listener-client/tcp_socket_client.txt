LINE_COMMENT ('// This is the client implementation for the TCP socket with the attached callback service. Callback service is optional.')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('socket')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create a new socket client by providing the host, port, and callback service.')
WHITE_SPACE ('\n    ')
identifier ('socket')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('socketClient')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
( ('(')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('host')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"localhost"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('port')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('61598')
, (',')
WHITE_SPACE ('\n        ')
identifier ('callbackService')
: (':')
WHITE_SPACE (' ')
identifier ('ClientService')
WHITE_SPACE ('\n    ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('content')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Hello Ballerina"')
; (';')
WHITE_SPACE ('\n    ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('payloadByte')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('content')
. ('.')
identifier ('toBytes')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Send desired content to the server using the write function.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('arrayLength')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('payloadByte')
. ('.')
identifier ('length')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
while ('while')
WHITE_SPACE (' ')
( ('(')
identifier ('i')
WHITE_SPACE (' ')
< ('<')
WHITE_SPACE (' ')
identifier ('arrayLength')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('writeResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('socketClient')
-> ('->')
identifier ('write')
( ('(')
identifier ('payloadByte')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('writeResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Unable to written the content "')
, (',')
WHITE_SPACE (' ')
identifier ('writeResult')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('writeResult')
; (';')
WHITE_SPACE ('\n            ')
identifier ('payloadByte')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('payloadByte')
. ('.')
identifier ('slice')
( ('(')
identifier ('writeResult')
, (',')
WHITE_SPACE (' ')
identifier ('arrayLength')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Callback service for the TCP client. The service needs to have four predefined resources.')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('ClientService')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
service ('service')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This is invoked once the client connects to the TCP server.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onConnect')
( ('(')
identifier ('socket')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Connect to: "')
, (',')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('remotePort')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This is invoked when the server sends any content.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onReadReady')
( ('(')
identifier ('socket')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('read')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
[ ('[')
byte ('byte')
[ ('[')
] (']')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
[ ('[')
identifier ('content')
, (',')
WHITE_SPACE (' ')
identifier ('length')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('length')
WHITE_SPACE (' ')
> ('>')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
var ('var')
WHITE_SPACE (' ')
identifier ('byteChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('createReadableChannel')
( ('(')
identifier ('content')
) (')')
; (';')
WHITE_SPACE ('\n                ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('byteChannel')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('ReadableByteChannel')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('io')
: (':')
identifier ('ReadableCharacterChannel')
WHITE_SPACE (' ')
identifier ('characterChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                    ')
new ('new')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('ReadableCharacterChannel')
( ('(')
identifier ('byteChannel')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"UTF-8"')
) (')')
; (';')
WHITE_SPACE ('\n                    ')
var ('var')
WHITE_SPACE (' ')
identifier ('str')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('characterChannel')
. ('.')
identifier ('read')
( ('(')
DECIMAL_INTEGER_LITERAL ('25')
) (')')
; (';')
WHITE_SPACE ('\n                    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('str')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
< ('<')
@ ('@')
identifier ('untainted')
> ('>')
identifier ('str')
) (')')
; (';')
WHITE_SPACE ('\n                    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error while reading characters "')
, (',')
WHITE_SPACE (' ')
identifier ('str')
) (')')
; (';')
WHITE_SPACE ('\n                    ')
} ('}')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Client close: "')
, (',')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('remotePort')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Close the connection between the server and the client.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('closeResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('close')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('closeResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('closeResult')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Client connection closed successfully."')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This resource is invoked for the error situation')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// if it happens during the `onConnect` and `onReadReady` functions.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onError')
( ('(')
identifier ('socket')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
error ('error')
WHITE_SPACE (' ')
identifier ('err')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
