import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This is a simple binding pattern, which involves only a single variable.')
WHITE_SPACE ('\n    ')
[ ('[')
boolean ('boolean')
, (',')
WHITE_SPACE (' ')
float ('float')
] (']')
WHITE_SPACE (' ')
identifier ('t')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
BOOLEAN_LITERAL ('true')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('0.4')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Simple variable : "')
, (',')
WHITE_SPACE (' ')
identifier ('t')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The same variable definition can be written using a tuple-binding pattern')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// with separate variables.')
WHITE_SPACE ('\n    ')
[ ('[')
boolean ('boolean')
, (',')
WHITE_SPACE (' ')
float ('float')
] (']')
WHITE_SPACE (' ')
[ ('[')
identifier ('a1')
, (',')
WHITE_SPACE (' ')
identifier ('a2')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
BOOLEAN_LITERAL ('true')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('0.4')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Tuple variable : "')
, (',')
WHITE_SPACE (' ')
identifier ('a1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('a2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The binding patterns are recursive in nature. These examples show')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// how to write complex recursive variable definitions.')
WHITE_SPACE ('\n    ')
[ ('[')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
, (',')
WHITE_SPACE (' ')
float ('float')
] (']')
WHITE_SPACE (' ')
[ ('[')
[ ('[')
identifier ('b1')
, (',')
WHITE_SPACE (' ')
identifier ('b2')
] (']')
, (',')
WHITE_SPACE (' ')
identifier ('b3')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
[ ('[')
QUOTED_STRING_LITERAL ('"Ballerina"')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
] (']')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('6.7')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Tuple variable : "')
, (',')
WHITE_SPACE (' ')
identifier ('b1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('b2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('b3')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
[ ('[')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
boolean ('boolean')
, (',')
WHITE_SPACE (' ')
float ('float')
] (']')
] (']')
WHITE_SPACE (' ')
[ ('[')
[ ('[')
identifier ('c1')
, (',')
WHITE_SPACE (' ')
identifier ('c2')
] (']')
, (',')
[ ('[')
identifier ('c3')
, (',')
WHITE_SPACE (' ')
identifier ('c4')
] (']')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                                              ')
[ ('[')
[ ('[')
QUOTED_STRING_LITERAL ('"Ballerina"')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('34')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
BOOLEAN_LITERAL ('true')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('6.7')
] (']')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Tuple variable : "')
, (',')
WHITE_SPACE (' ')
identifier ('c1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('c2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('c3')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('c4')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Tuple variables can also be defined using tuple-type expressions.')
WHITE_SPACE ('\n    ')
[ ('[')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
[ ('[')
boolean ('boolean')
, (',')
WHITE_SPACE (' ')
byte ('byte')
] (']')
] (']')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
float ('float')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
] (']')
WHITE_SPACE (' ')
identifier ('v1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                                   ')
[ ('[')
[ ('[')
QUOTED_STRING_LITERAL ('"Ballerina"')
, (',')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
[ ('[')
BOOLEAN_LITERAL ('true')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('34')
] (']')
] (']')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_FLOATING_POINT_NUMBER ('5.6')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('45')
] (']')
] (']')
; (';')
WHITE_SPACE ('\n    ')
[ ('[')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
[ ('[')
boolean ('boolean')
, (',')
WHITE_SPACE (' ')
byte ('byte')
] (']')
] (']')
] (']')
, (',')
WHITE_SPACE ('\n                           ')
[ ('[')
float ('float')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
] (']')
WHITE_SPACE (' ')
[ ('[')
[ ('[')
identifier ('d1')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('d2')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('d3')
, (',')
WHITE_SPACE (' ')
identifier ('d4')
] (']')
] (']')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('d5')
, (',')
WHITE_SPACE (' ')
identifier ('d6')
] (']')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('v1')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Tuple variable : "')
, (',')
WHITE_SPACE ('\n                    ')
identifier ('d1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('d2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('d3')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('d4')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('d5')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('d6')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Tuple variable definitions can also take union types.')
WHITE_SPACE ('\n    ')
[ ('[')
string ('string')
| ('|')
int ('int')
| ('|')
float ('float')
, (',')
WHITE_SPACE (' ')
[ ('[')
string ('string')
| ('|')
float ('float')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
] (']')
WHITE_SPACE (' ')
[ ('[')
identifier ('g1')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('g2')
, (',')
WHITE_SPACE (' ')
identifier ('g3')
] (']')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                                                    ')
[ ('[')
QUOTED_STRING_LITERAL ('"Ballerina"')
, (',')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_FLOATING_POINT_NUMBER ('3.4')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('456')
] (']')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Tuple variable : "')
, (',')
WHITE_SPACE (' ')
identifier ('g1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('g2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('g3')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
