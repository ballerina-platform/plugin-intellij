import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n\n')
string ('string')
WHITE_SPACE (' ')
identifier ('ping')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ping"')
; (';')
WHITE_SPACE ('\n')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('pingData')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('ping')
. ('.')
identifier ('toBytes')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('WebSocketServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/basic/ws"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('subProtocols')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"xml"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"json"')
] (']')
, (',')
WHITE_SPACE ('\n    ')
identifier ('idleTimeoutInSeconds')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('120')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('basic')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
( ('(')
DECIMAL_INTEGER_LITERAL ('9090')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This `resource` is triggered after a successful client connection.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onOpen')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('caller')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nNew client connected"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Connection ID: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('getConnectionId')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Negotiated Sub protocol: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('getNegotiatedSubProtocol')
( ('(')
) (')')
. ('.')
identifier ('toString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Is connection open: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('isOpen')
( ('(')
) (')')
. ('.')
identifier ('toString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Is connection secured: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('isSecure')
( ('(')
) (')')
. ('.')
identifier ('toString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This `resource` is triggered when a new text frame is received from a client.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onText')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('text')
, (',')
WHITE_SPACE ('\n                                ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('finalFrame')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\ntext message: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('text')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" & final fragment: "')
WHITE_SPACE ('\n                                                        ')
+ ('+')
WHITE_SPACE (' ')
identifier ('finalFrame')
. ('.')
identifier ('toString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('text')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ping"')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Pinging..."')
) (')')
; (';')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('ping')
( ('(')
identifier ('pingData')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('err')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('WebSocketError')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending ping"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('text')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"closeMe"')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
error ('error')
? ('?')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('close')
( ('(')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1001')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('reason')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"You asked me to close the connection"')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('timeoutInSeconds')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('WebSocketError')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred when closing connection"')
, (',')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('pushText')
( ('(')
QUOTED_STRING_LITERAL ('"You said: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('text')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('err')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('WebSocketError')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred when sending text"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This `resource` is triggered when a new binary frame is received from a client.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onBinary')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('b')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nNew binary message received"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"UTF-8 decoded binary message: "')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('pushBinary')
( ('(')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('err')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('WebSocketError')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred when sending binary"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This `resource` is triggered when a ping message is received from the client. If this resource is not implemented,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// a pong message is automatically sent to the connected `http:WebSocketCaller` when a ping is received.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onPing')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('data')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('pong')
( ('(')
identifier ('data')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('err')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('WebSocketError')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred when closing the connection"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This resource is triggered when a pong message is received.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onPong')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('data')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Pong received"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This resource is triggered when a particular client reaches the idle timeout that is defined in the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `http:WebSocketServiceConfig` annotation.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onIdleTimeout')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('caller')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nReached idle timeout"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Closing connection "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('getConnectionId')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('close')
( ('(')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1001')
, (',')
WHITE_SPACE (' ')
identifier ('reason')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                                    ')
QUOTED_STRING_LITERAL ('"Connection timeout"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('err')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('WebSocketError')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred when closing the connection"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This resource is triggered when an error occurred in the connection or the transport.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This resource is always followed by a connection closure with an appropriate WebSocket close frame')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// and this is used only to indicate the error to the user and take post decisions if needed.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onError')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
error ('error')
WHITE_SPACE (' ')
identifier ('err')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred "')
, (',')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This resource is triggered when a client connection is closed from the client side.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onClose')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('statusCode')
, (',')
WHITE_SPACE ('\n                                ')
string ('string')
WHITE_SPACE (' ')
identifier ('reason')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
STRING_TEMPLATE_LITERAL_START ('string `')
STRING_TEMPLATE_EXPRESSION_START ('Client left with ${')
identifier ('statusCode')
STRING_TEMPLATE_EXPRESSION_END ('}')
STRING_TEMPLATE_EXPRESSION_START (' because ${')
identifier ('reason')
STRING_TEMPLATE_EXPRESSION_END ('}')
STRING_TEMPLATE_LITERAL_END ('`')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
