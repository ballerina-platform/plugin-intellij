import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function (optionally) returns a `string` value. In this example, `string?` is equivalent to `string|()`.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getValue')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('key')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
string ('string')
? ('?')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('key')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"string"')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"hello world"')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// In Ballerina, the `nil` type that is provided as `()` contains a single value named "nil". This is used')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// to represent the absence of any other value.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The `nil` value is written as `()`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `null` is syntactic sugar for "nil" that is to be used with JSON values because JSON uses `null`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `return ();` here is the same as `return;`. Not having a return statement at the end is also the same as')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// explicitly returning `()`.')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// It is optional for `getValue()` to return a value of type `string`. Thus, the value could be either')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// of type `string` or of type `()` and needs to be handled explicitly.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The statement `string s = getValue("string");` produces a compilation error.')
WHITE_SPACE ('\n    ')
string ('string')
? ('?')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getValue')
( ('(')
QUOTED_STRING_LITERAL ('"string"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The type test can then be used to check if the value is in fact a `string` and then operate on it.')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('s')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Length of the string: "')
, (',')
WHITE_SPACE (' ')
identifier ('s')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"s is ()"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// A value of type `string` or `()` can be assigned to `s`.')
WHITE_SPACE ('\n    ')
identifier ('s')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('s')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Length of the string: "')
, (',')
WHITE_SPACE (' ')
identifier ('s')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"s is ()"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
