import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Address')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('line01')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('line02')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('city')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('state')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('zipcode')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// According to the `Person` record type descriptor, the `addr` field could either hold an `Address` record or the value')
WHITE_SPACE ('\n')
LINE_COMMENT ('// nil (`()`). Moreover, the `age` field is an optional field that may or may not be specified.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
? ('?')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Address')
? ('?')
WHITE_SPACE (' ')
identifier ('addr')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function optionally returns a `Person` value.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getPerson')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
, (',')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
identifier ('Person')
? ('?')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('name')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('""')
WHITE_SPACE (' ')
|| ('||')
WHITE_SPACE (' ')
identifier ('age')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Defines a `Person` record.')
WHITE_SPACE ('\n        ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('p')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
identifier ('name')
, (',')
WHITE_SPACE ('\n            ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
identifier ('age')
, (',')
WHITE_SPACE ('\n            ')
identifier ('addr')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('line01')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"No. 61"')
, (',')
WHITE_SPACE ('\n                ')
identifier ('line02')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Brandon street"')
, (',')
WHITE_SPACE ('\n                ')
identifier ('city')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Santa Clara"')
, (',')
WHITE_SPACE ('\n                ')
identifier ('state')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"CA"')
, (',')
WHITE_SPACE ('\n                ')
identifier ('zipcode')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"95134"')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('p')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create a `Person` value without specifying the `age` field.')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('p1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Anne"')
, (',')
WHITE_SPACE (' ')
identifier ('addr')
: (':')
WHITE_SPACE (' ')
( ('(')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The optional field `age` can be accessed using the optional field access operator.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The return type will be the union of the type of the field and `()`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If the value is present, the value will be returned.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If not, `()` will be returned.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `()` is returned here since `age` is not set.')
WHITE_SPACE ('\n    ')
int ('int')
? ('?')
WHITE_SPACE (' ')
identifier ('age')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('p1')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Age: "')
, (',')
WHITE_SPACE (' ')
identifier ('age')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create a `Person` value with the `age` field.')
WHITE_SPACE ('\n    ')
identifier ('p1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Anne"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('24')
, (',')
WHITE_SPACE (' ')
identifier ('addr')
: (':')
WHITE_SPACE (' ')
( ('(')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Now, `age` will be the `int` value that is set.')
WHITE_SPACE ('\n    ')
identifier ('age')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('p1')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Age: "')
, (',')
WHITE_SPACE (' ')
identifier ('age')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('Person')
? ('?')
WHITE_SPACE (' ')
identifier ('p2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getPerson')
( ('(')
QUOTED_STRING_LITERAL ('"John"')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('30')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('p2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The optional field access operator is a lifted operator in Ballerina.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Both `p2` and `p2.addr` are optional record types.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If the type of either `p2` or `p2.addr` is `()` at runtime, `()` would')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// be assigned to the `city1` variable. Else, the `string` value of the `city` field')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// of the `address` field of the `Person` record `p2` would be assigned.')
WHITE_SPACE ('\n    ')
string ('string')
? ('?')
WHITE_SPACE (' ')
identifier ('city1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('p2')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('addr')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('city')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The value "Santa Clara" is displayed in the console.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('city1')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Invoking `getPerson()` as follows will result in `()` being assigned to `p3`.')
WHITE_SPACE ('\n    ')
identifier ('Person')
? ('?')
WHITE_SPACE (' ')
identifier ('p3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getPerson')
( ('(')
QUOTED_STRING_LITERAL ('""')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Thus, the `city2` variable will contain `()` as the value.')
WHITE_SPACE ('\n    ')
string ('string')
? ('?')
WHITE_SPACE (' ')
identifier ('city2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('p3')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('addr')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('city')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('city2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Now, assign a `Person` record to `p3` setting the `address` field to `()`.')
WHITE_SPACE ('\n    ')
identifier ('p3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"George"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('20')
, (',')
WHITE_SPACE (' ')
identifier ('addr')
: (':')
WHITE_SPACE (' ')
( ('(')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Again, the `city2` variable will contain `()`, since the value of the `address` field is `()`.')
WHITE_SPACE ('\n    ')
identifier ('city2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('p3')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('addr')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('city')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('city2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// In this example, the Elvis operator is used to eliminate `nil`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If the value of the first expression is not `nil`, the Elvis operator returns that value.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If the value of the first expression is `nil`, the operator returns the value of the second expression.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('defaultCity')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"San Jose"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('city')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('city2')
WHITE_SPACE (' ')
ELVIS ('?:')
WHITE_SPACE (' ')
identifier ('defaultCity')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('city')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
