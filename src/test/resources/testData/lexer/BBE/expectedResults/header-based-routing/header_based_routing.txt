import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
identifier ('http')
: (':')
identifier ('ClientConfiguration')
WHITE_SPACE (' ')
identifier ('weatherEPConfig')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('followRedirects')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('enabled')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
, (',')
WHITE_SPACE (' ')
identifier ('maxCount')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
WHITE_SPACE (' ')
} ('}')
, (',')
WHITE_SPACE ('\n    ')
identifier ('secureSocket')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('trustStore')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"${ballerina.home}/bre/security/ballerinaTruststore.p12"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Service is invoked using `basePath` value "/hbr".')
WHITE_SPACE ('\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/hbr"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
service ('service')
WHITE_SPACE (' ')
identifier ('headerBasedRouting')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
( ('(')
DECIMAL_INTEGER_LITERAL ('9090')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `http:resourceConfig{}` annotation with 'GET' method declares the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// HTTP method.')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/route"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('hbrResource')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('weatherEP')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"http://samples.openweathermap.org"')
, (',')
WHITE_SPACE ('\n                                    ')
identifier ('weatherEPConfig')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('locationEP')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"http://www.mocky.io"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Create a new outbound request to handle client call.')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('newRequest')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Check whether `x-type` header exists in the request.')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
! ('!')
identifier ('req')
. ('.')
identifier ('hasHeader')
( ('(')
QUOTED_STRING_LITERAL ('"x-type"')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('errorResponse')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n            ')
identifier ('errorResponse')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n            ')
json ('json')
WHITE_SPACE (' ')
identifier ('errMsg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"error"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"'x-type' header is not found"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n            ')
identifier ('errorResponse')
. ('.')
identifier ('setPayload')
( ('(')
identifier ('errMsg')
) (')')
; (';')
WHITE_SPACE ('\n\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('errorResponse')
) (')')
; (';')
WHITE_SPACE ('\n\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
return ('return')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//`getHeader()` returns header value of the specified header name.')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('nameString')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('req')
. ('.')
identifier ('getHeader')
( ('(')
QUOTED_STRING_LITERAL ('"x-type"')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
identifier ('http')
: (':')
identifier ('Response')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('response')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('nameString')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"location"')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('//`post()` remote function represents the 'POST' operation')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// of the HTTP client.')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Route payload to the relevant service.')
WHITE_SPACE ('\n            ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('locationEP')
-> ('->')
identifier ('post')
( ('(')
QUOTED_STRING_LITERAL ('"/v2/5adddd66300000bd2a4b2912"')
, (',')
WHITE_SPACE ('\n                                        ')
identifier ('newRequest')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('//`get()` remote function can be used to make an http GET call.')
WHITE_SPACE ('\n            ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                ')
identifier ('weatherEP')
-> ('->')
identifier ('get')
( ('(')
QUOTED_STRING_LITERAL ('"/data/2.5/weather?lat=35&lon=139&appid=b1b1"')
, (',')
WHITE_SPACE ('\n                                 ')
identifier ('newRequest')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('response')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Response')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// `respond()` sends back the inbound clientResponse to the caller')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// if no error occurs.')
WHITE_SPACE ('\n\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('errorResponse')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n            ')
identifier ('errorResponse')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n            ')
identifier ('errorResponse')
. ('.')
identifier ('setPayload')
( ('(')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('response')
. ('.')
identifier ('detail')
( ('(')
) (')')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('errorResponse')
) (')')
; (';')
WHITE_SPACE ('\n\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
