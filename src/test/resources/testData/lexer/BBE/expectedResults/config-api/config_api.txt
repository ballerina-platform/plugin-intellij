import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('config')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The Ballerina Config API allows you to look up values from configuration')
WHITE_SPACE ('\n')
LINE_COMMENT ('// files, CLI parameters and environment variables. The precedence order for')
WHITE_SPACE ('\n')
LINE_COMMENT ('// configuration resolution is as follows:')
WHITE_SPACE ('\n')
LINE_COMMENT ('//')
WHITE_SPACE ('\n')
LINE_COMMENT ('// * CLI parameters')
WHITE_SPACE ('\n')
LINE_COMMENT ('//')
WHITE_SPACE ('\n')
LINE_COMMENT ('// * Environment variables')
WHITE_SPACE ('\n')
LINE_COMMENT ('//')
WHITE_SPACE ('\n')
LINE_COMMENT ('// * Configuration files')
WHITE_SPACE ('\n')
LINE_COMMENT ('//')
WHITE_SPACE ('\n')
LINE_COMMENT ('//')
WHITE_SPACE ('\n')
LINE_COMMENT ('// If a specific configuration defined in the file is also defined as an')
WHITE_SPACE ('\n')
LINE_COMMENT ('// environment variable, the environment variable takes precedence. Similarly,')
WHITE_SPACE ('\n')
LINE_COMMENT ('// if the same is set as a CLI parameter, it replaces the environment')
WHITE_SPACE ('\n')
LINE_COMMENT ('// variable value.')
WHITE_SPACE ('\n')
LINE_COMMENT ('//')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The configuration file is in TOML(v0.4) format.')
WHITE_SPACE ('\n')
LINE_COMMENT ('//')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The configuration API is particularly useful for configuring services.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// In this example, the port and keystore password are read through the')
WHITE_SPACE ('\n')
LINE_COMMENT ('// configuration API instead of hard coding it in the source file. The')
WHITE_SPACE ('\n')
LINE_COMMENT ('// configuration APIs accept a key and an optional default value. If a')
WHITE_SPACE ('\n')
LINE_COMMENT ('// mapping does not exist for the specified key, the default value')
WHITE_SPACE ('\n')
LINE_COMMENT ('// is returned as the configuration value. The default values of these')
WHITE_SPACE ('\n')
LINE_COMMENT ('// optional configurations are the default values of the return types of')
WHITE_SPACE ('\n')
LINE_COMMENT ('// the functions.')
WHITE_SPACE ('\n')
listener ('listener')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
WHITE_SPACE (' ')
identifier ('helloWorldEP')
WHITE_SPACE ('\n    ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
identifier ('config')
: (':')
identifier ('getAsInt')
( ('(')
QUOTED_STRING_LITERAL ('"hello.http.port"')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('9095')
) (')')
, (',')
WHITE_SPACE (' ')
identifier ('config')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('secureSocket')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('keyStore')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"${ballerina.home}/bre/security/ballerinaKeystore.p12"')
, (',')
WHITE_SPACE ('\n                ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
identifier ('config')
: (':')
identifier ('getAsString')
( ('(')
QUOTED_STRING_LITERAL ('"hello.keystore.password"')
) (')')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/hello"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('helloWorld')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
identifier ('helloWorldEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('sayHello')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
QUOTED_STRING_LITERAL ('"Hello World!"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n           ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Failed to respond to the caller"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
