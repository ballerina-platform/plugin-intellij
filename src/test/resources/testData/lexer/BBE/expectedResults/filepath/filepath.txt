import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('filepath')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Get the absolute representation of the path.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('absValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
checkpanic ('checkpanic')
WHITE_SPACE (' ')
identifier ('filepath')
: (':')
identifier ('absolute')
( ('(')
QUOTED_STRING_LITERAL ('"test.txt"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Check whether the path is absolute.')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('isAbs')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
checkpanic ('checkpanic')
WHITE_SPACE (' ')
identifier ('filepath')
: (':')
identifier ('isAbsolute')
( ('(')
QUOTED_STRING_LITERAL ('"/A/B/C"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"/A/B/C is absolute: "')
, (',')
WHITE_SPACE (' ')
identifier ('isAbs')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Get the base name of the path.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
checkpanic ('checkpanic')
WHITE_SPACE (' ')
identifier ('filepath')
: (':')
identifier ('filename')
( ('(')
QUOTED_STRING_LITERAL ('"/A/B/C"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Filename of /A/B/C: "')
, (',')
WHITE_SPACE (' ')
identifier ('name')
) (')')
; (';')
WHITE_SPACE (' ')
LINE_COMMENT ('// returns C')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Get the enclosing parent directory.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('parentPath')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
checkpanic ('checkpanic')
WHITE_SPACE (' ')
identifier ('filepath')
: (':')
identifier ('parent')
( ('(')
QUOTED_STRING_LITERAL ('"/A/B/C"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Parent of /A/B/C: "')
, (',')
WHITE_SPACE (' ')
identifier ('parentPath')
) (')')
; (';')
WHITE_SPACE (' ')
LINE_COMMENT ('// returns B')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Get the shortest path name equivalent to path by purely lexical processing.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('normalizedPath')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
checkpanic ('checkpanic')
WHITE_SPACE (' ')
identifier ('filepath')
: (':')
identifier ('normalize')
( ('(')
QUOTED_STRING_LITERAL ('"foo/../bar"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Normalized path of foo/../bar: "')
, (',')
WHITE_SPACE (' ')
identifier ('normalizedPath')
) (')')
; (';')
WHITE_SPACE (' ')
LINE_COMMENT ('// returns bar')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Get the list of path elements joined by the OS-specific Path Separator.')
WHITE_SPACE ('\n    ')
string ('string')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('parts')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
checkpanic ('checkpanic')
WHITE_SPACE (' ')
identifier ('filepath')
: (':')
identifier ('split')
( ('(')
QUOTED_STRING_LITERAL ('"/A/B/C"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"Path elements of /A/B/C: %s"')
, (',')
WHITE_SPACE (' ')
identifier ('parts')
) (')')
) (')')
; (';')
WHITE_SPACE (' ')
LINE_COMMENT ('// returns {"A", "B", "C"}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Join any number of path elements into a single path.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('path')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
checkpanic ('checkpanic')
WHITE_SPACE (' ')
identifier ('filepath')
: (':')
identifier ('build')
( ('(')
QUOTED_STRING_LITERAL ('"/"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"foo"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"bar"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Built path of '/', 'foo', 'bar': "')
, (',')
WHITE_SPACE (' ')
identifier ('path')
) (')')
; (';')
WHITE_SPACE (' ')
LINE_COMMENT ('// On Unix : returns /foo/bar')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Get the extension of the file path.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('ext')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
checkpanic ('checkpanic')
WHITE_SPACE (' ')
identifier ('filepath')
: (':')
identifier ('extension')
( ('(')
QUOTED_STRING_LITERAL ('"path.bal"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Extension of path.bal: "')
, (',')
WHITE_SPACE (' ')
identifier ('ext')
) (')')
; (';')
WHITE_SPACE (' ')
LINE_COMMENT ('// returns bal')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Returns a relative path that is logically equivalent to the target path when joined to the base path.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('relPath')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
checkpanic ('checkpanic')
WHITE_SPACE (' ')
identifier ('filepath')
: (':')
identifier ('relative')
( ('(')
QUOTED_STRING_LITERAL ('"a/b/c"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"a/c/d"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Relative path between 'a/b/c' and 'a/c/d': "')
, (',')
WHITE_SPACE (' ')
identifier ('relPath')
) (')')
; (';')
WHITE_SPACE (' ')
LINE_COMMENT ('// On Unix : returns ../../c/d')
WHITE_SPACE ('\n\n')
} ('}')
