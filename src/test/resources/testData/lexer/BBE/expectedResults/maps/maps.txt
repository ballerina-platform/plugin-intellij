import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Declares a `map` constrained by the type `string`.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('m')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// You can also declare and initialize a `map` with a map literal.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('addrMap')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('line1')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"No. 20"')
, (',')
WHITE_SPACE (' ')
identifier ('line2')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Palm Grove"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('city')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Colombo 03"')
, (',')
WHITE_SPACE (' ')
identifier ('country')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Sri Lanka"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('addrMap')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Retrieves a value using member access.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('country')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
identifier ('addrMap')
[ ('[')
QUOTED_STRING_LITERAL ('"country"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('country')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Retrieves a value using the `.get()` method.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Panics if the map does not have a member with the specified key.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('line2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('addrMap')
. ('.')
identifier ('get')
( ('(')
QUOTED_STRING_LITERAL ('"line2"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('line2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `.hasKey()` function checks if a map contains a specified key.')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('hasPostalCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('addrMap')
. ('.')
identifier ('hasKey')
( ('(')
QUOTED_STRING_LITERAL ('"postalCode"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('hasPostalCode')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Adds or updates the value of a key.')
WHITE_SPACE ('\n    ')
identifier ('addrMap')
[ ('[')
QUOTED_STRING_LITERAL ('"postalCode"')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"00300"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('addrMap')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `keys()` method returns the keys of the map as an array.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('addrMap')
. ('.')
identifier ('keys')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Prints the number of mappings in the `map`.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('addrMap')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Mappings can be removed using the `.remove()` method.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('removedElement')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('addrMap')
. ('.')
identifier ('remove')
( ('(')
QUOTED_STRING_LITERAL ('"postalCode"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('addrMap')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Maps support functional iteration.')
WHITE_SPACE ('\n    ')
identifier ('addrMap')
. ('.')
identifier ('forEach')
( ('(')
function ('function')
WHITE_SPACE (' ')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('value')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
map ('map')
< ('<')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('marks')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('sam')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('50')
, (',')
WHITE_SPACE (' ')
identifier ('jon')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('60')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Calling the `.entries()` method on a map will return the key (`string`) and the value as a tuple variable.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('modifiedMarks')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('marks')
. ('.')
identifier ('entries')
( ('(')
) (')')
. ('.')
map ('map')
( ('(')
function ('function')
WHITE_SPACE (' ')
( ('(')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
WHITE_SPACE (' ')
identifier ('pair')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
[ ('[')
identifier ('name')
, (',')
WHITE_SPACE (' ')
identifier ('score')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('pair')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s scored: %d"')
, (',')
WHITE_SPACE (' ')
identifier ('name')
, (',')
WHITE_SPACE (' ')
identifier ('score')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('score')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('modifiedMarks')
) (')')
; (';')
WHITE_SPACE ('\n    \n    ')
LINE_COMMENT ('// Maps can only contain values of the type specified by the constraint type descriptor.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('stringMap')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('stringMap')
[ ('[')
QUOTED_STRING_LITERAL ('"index"')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"100892N"')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The return type of member access will be `T?` where `T` is the constraint type of the map.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If the key does not exist, nil (`()`) is returned.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The Elvis operator `?:` is a conditional operator that handles `()`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If the given expression evaluates to nil, the second expression is evaluated and its value is returned.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('index2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('stringMap')
[ ('[')
QUOTED_STRING_LITERAL ('"index"')
] (']')
WHITE_SPACE (' ')
ELVIS ('?:')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('""')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('index2')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
