import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// A record representing a `Person`.')
WHITE_SPACE ('\n')
public ('public')
WHITE_SPACE (' ')
type ('type')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('married')
; (';')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('salary')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Address')
WHITE_SPACE (' ')
identifier ('address')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// A record representing an `Address`.')
WHITE_SPACE ('\n')
public ('public')
WHITE_SPACE (' ')
type ('type')
WHITE_SPACE (' ')
identifier ('Address')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('country')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('state')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('city')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('street')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Define an `Address` value.')
WHITE_SPACE ('\n    ')
identifier ('Address')
WHITE_SPACE (' ')
identifier ('address')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('country')
WHITE_SPACE (' ')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"USA"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('state')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"NC"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('city')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Raleigh"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('street')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Daniels St"')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Define a `Person` value.')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('person')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Alex"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('24')
, (',')
WHITE_SPACE ('\n        ')
identifier ('married')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
, (',')
WHITE_SPACE ('\n        ')
identifier ('salary')
: (':')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('8000.0')
, (',')
WHITE_SPACE ('\n        ')
identifier ('address')
: (':')
WHITE_SPACE (' ')
identifier ('address')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Invoke the `.clone()` method. The return type is also `Person`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Provided that the type of the value being cloned belongs to `anydata`, the return type of `.clone()` would be')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the same as the type of the value being cloned.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// E.g., `anydata result = anydataValue.clone();` where `anydataValue` is a variable of type `anydata`.')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('person')
. ('.')
identifier ('clone')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Source value: "')
, (',')
WHITE_SPACE (' ')
identifier ('person')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Cloned value: "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Check reference inequality between the original value and the cloned value.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Source and Clone are at two different memory locations: "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
!== ('!==')
WHITE_SPACE (' ')
identifier ('person')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
