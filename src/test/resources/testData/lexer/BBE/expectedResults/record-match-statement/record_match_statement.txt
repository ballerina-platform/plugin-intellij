import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('RecordOne')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('var1')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('RecordTwo')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
LEFT_CLOSED_RECORD_DELIMITER ('{|')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('var1')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('var2')
; (';')
WHITE_SPACE ('\n')
RIGHT_CLOSED_RECORD_DELIMITER ('|}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('RecordThree')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('var1')
; (';')
WHITE_SPACE ('\n    ')
identifier ('RecordTwo')
WHITE_SPACE (' ')
identifier ('var2')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('RecordOne')
WHITE_SPACE (' ')
identifier ('rec1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
identifier ('var1')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Hello"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"var2"')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('150')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('RecordOne')
WHITE_SPACE (' ')
identifier ('rec2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
identifier ('var1')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Hello"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"var2"')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('RecordOne')
WHITE_SPACE (' ')
identifier ('rec3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
identifier ('var1')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Hello"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"var2"')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('150')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"var3"')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('RecordOne')
WHITE_SPACE (' ')
identifier ('rec4')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
identifier ('var1')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Hello"')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('basicMatch')
( ('(')
identifier ('rec1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('basicMatch')
( ('(')
identifier ('rec2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('basicMatch')
( ('(')
identifier ('rec3')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('basicMatch')
( ('(')
identifier ('rec4')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('RecordTwo')
WHITE_SPACE (' ')
identifier ('tRec1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
identifier ('var1')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Ballerina"')
, (',')
WHITE_SPACE (' ')
identifier ('var2')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('RecordThree')
WHITE_SPACE (' ')
identifier ('tRec2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
identifier ('var1')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Language"')
, (',')
WHITE_SPACE (' ')
identifier ('var2')
: (':')
WHITE_SPACE (' ')
identifier ('tRec1')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('matchWithTypeGuard')
( ('(')
identifier ('tRec1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('matchWithTypeGuard')
( ('(')
identifier ('tRec2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('matchWithTypeGuard')
( ('(')
BOOLEAN_LITERAL ('true')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This method uses structured record match patterns with different fields. The given `match` expression will')
WHITE_SPACE ('\n')
LINE_COMMENT ('// be checked for "isLike" relationship and will be matched at runtime.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('basicMatch')
( ('(')
any ('any')
WHITE_SPACE (' ')
identifier ('a')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern checks for a mapping value with three fields `var1`, `var2` and `var3` and types will')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// be `any` in the pattern block.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
{ ('{')
identifier ('var1')
, (',')
WHITE_SPACE (' ')
identifier ('var2')
, (',')
WHITE_SPACE (' ')
identifier ('var3')
} ('}')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched with three vars : "')
, (',')
WHITE_SPACE (' ')
identifier ('var1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('", "')
, (',')
WHITE_SPACE (' ')
identifier ('var2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('", "')
, (',')
WHITE_SPACE (' ')
identifier ('var3')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern checks for a mapping value with two fields `var1`, `var2` and types will be `any` in')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// the pattern block.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
{ ('{')
identifier ('var1')
, (',')
WHITE_SPACE (' ')
identifier ('var2')
} ('}')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched with two vars : "')
, (',')
WHITE_SPACE (' ')
identifier ('var1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('", "')
, (',')
WHITE_SPACE (' ')
identifier ('var2')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern checks for a mapping value with single field `var1` and type will be `any` in the pattern block.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
{ ('{')
identifier ('var1')
} ('}')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched with single var : "')
, (',')
WHITE_SPACE (' ')
identifier ('var1')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This method uses structured record match patterns with different fields')
WHITE_SPACE ('\n')
LINE_COMMENT ('// along with type guards. The expression used with match will be evaluated to')
WHITE_SPACE ('\n')
LINE_COMMENT ('// check if it "is like" any of the match patterns. For a successful match, an additional')
WHITE_SPACE ('\n')
LINE_COMMENT ('// check will also be performed against the specified type guard.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('matchWithTypeGuard')
( ('(')
any ('any')
WHITE_SPACE (' ')
identifier ('matchExpr')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// All the patterns except the last one will check for a mapping value with two fields `var1` and `var2`')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// with a given type guard.')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('matchExpr')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern will only match if `var2` is of the type `string`.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
{ ('{')
identifier ('var1')
, (',')
WHITE_SPACE (' ')
identifier ('var2')
} ('}')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
identifier ('var2')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n               ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched with string typeguard"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern will only match if `var1` is of the type `int` and `var2` is of the type `int`.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
{ ('{')
identifier ('var1')
, (',')
WHITE_SPACE (' ')
identifier ('var2')
} ('}')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('var1')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
&& ('&&')
WHITE_SPACE (' ')
identifier ('var2')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n               ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched with int and int typeguard : "')
, (',')
WHITE_SPACE (' ')
identifier ('var1')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern will only match if `var1` is of the type `string` and `var2` is of the type `int`.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
{ ('{')
identifier ('var1')
, (',')
WHITE_SPACE (' ')
identifier ('var2')
} ('}')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('var1')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
&& ('&&')
WHITE_SPACE (' ')
identifier ('var2')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n               ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched with string and int typeguard : "')
, (',')
WHITE_SPACE (' ')
identifier ('var1')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern will only match if `var1` is of the type `int` and `var2` is of the type `RecordTwo`.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
{ ('{')
identifier ('var1')
, (',')
WHITE_SPACE (' ')
identifier ('var2')
} ('}')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('var1')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
&& ('&&')
WHITE_SPACE (' ')
identifier ('var2')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('RecordTwo')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n               ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched with int and RecordTwo typeguard : "')
, (',')
WHITE_SPACE (' ')
identifier ('var1')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern will only match if `var1` is of the type `string` and `var2` is of the type `RecordTwo`.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
{ ('{')
identifier ('var1')
, (',')
WHITE_SPACE (' ')
identifier ('var2')
} ('}')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('var1')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
&& ('&&')
WHITE_SPACE (' ')
identifier ('var2')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('RecordTwo')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n               ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched with string and RecordTwo typeguard : "')
, (',')
WHITE_SPACE (' ')
identifier ('var2')
. ('.')
identifier ('var1')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// A pattern with a single identifier can be used as the last match pattern and all values will')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// be matched to this.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched with Default"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
