import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The `value` variable can hold a value of the type `string`, `int` or `boolean`.')
WHITE_SPACE ('\n    ')
string ('string')
| ('|')
int ('int')
| ('|')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('value')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The type guard can be used with `value` to test to which of the types it belongs to and perform conditional')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// logic based on the type which it belongs to.')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('value')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// The type of `value` within this block is narrowed to `string`, and thus, `value` can be assigned to a')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// variable of the type `string`.')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('str')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('value')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value is a string: "')
, (',')
WHITE_SPACE (' ')
identifier ('str')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('value')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// The type of `value` within this block is narrowed to `int`, and thus, `value` can be used in a')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// context where an `int` is expected.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value is an int: "')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value + 1: "')
, (',')
WHITE_SPACE (' ')
identifier ('addOneToInt')
( ('(')
identifier ('value')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// If the value is updated within a type guard, the type is reset to the original type.')
WHITE_SPACE ('\n        ')
identifier ('value')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Hello World"')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// The type test needs to be used again since the type of `value` is reset to `string|int|boolean`.')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('value')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// `value` is an `int` here.')
WHITE_SPACE ('\n            ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('value')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"- value is an int: "')
, (',')
WHITE_SPACE (' ')
identifier ('i')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// `value` is `string` or `boolean` here.')
WHITE_SPACE ('\n            ')
string ('string')
| ('|')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('sb')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('value')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"- value is string|boolean: "')
, (',')
WHITE_SPACE (' ')
identifier ('sb')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Within this block, the type of `value` is `boolean` since the previous `if` and `else if` blocks handle the')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// other possible scenarios.')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('value')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"s is 'true'"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// A function that expects an `int` as an argument.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('addOneToInt')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n')
} ('}')
