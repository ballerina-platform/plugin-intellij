import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
error ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
error ('error')
( ('(')
QUOTED_STRING_LITERAL ('"error occurred"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The Ballerina log API provides functions to log at five levels, which are')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `DEBUG`, `ERROR`, `INFO`, `TRACE`, and `WARN`. By default, all log')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// messages are logged to the console at the `INFO` level. In addition to')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// these log levels, there are 2 additional levels named `OFF` and `ALL`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `OFF` turns off logging and `ALL` enables all the log levels. The log')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// level can be configured via a Ballerina configuration file or CLI')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// parameters.')
WHITE_SPACE ('\n    ')
identifier ('log')
: (':')
identifier ('printDebug')
( ('(')
QUOTED_STRING_LITERAL ('"debug log"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"error log"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"error log with cause"')
, (',')
WHITE_SPACE (' ')
identifier ('e')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"info log"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('log')
: (':')
identifier ('printTrace')
( ('(')
QUOTED_STRING_LITERAL ('"trace log"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('log')
: (':')
identifier ('printWarn')
( ('(')
QUOTED_STRING_LITERAL ('"warn log"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// To set the log level of the API, use the following CLI parameter: <br>')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `--b7a.log.level=[LOG_LEVEL]`')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// To configure using a configuration file, place the entry given below in')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the file:')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// ```')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// [b7a.log]')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// level="[LOG_LEVEL]"')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// ```')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Each module can also be assigned its own log level. To assign a')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// log level to a module, provide the following configuration')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `<MODULE_NAME>.loglevel`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// E.g., `--foo.loglevel=DEBUG`')
WHITE_SPACE ('\n    ')
identifier ('Fruit')
WHITE_SPACE (' ')
identifier ('apple')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"Apple"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Fruit')
WHITE_SPACE (' ')
identifier ('orange')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"Orange"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('log')
: (':')
identifier ('printDebug')
( ('(')
QUOTED_STRING_LITERAL ('"Name of the fruit is Strawberry."')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('log')
: (':')
identifier ('printDebug')
( ('(')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"Names of the fruits are %s, %s."')
, (',')
WHITE_SPACE (' ')
identifier ('apple')
. ('.')
identifier ('getName')
( ('(')
) (')')
, (',')
WHITE_SPACE (' ')
identifier ('orange')
. ('.')
identifier ('getName')
( ('(')
) (')')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('log')
: (':')
identifier ('printDebug')
( ('(')
function ('function')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"Name of the fruit is is %s"')
, (',')
WHITE_SPACE (' ')
identifier ('apple')
. ('.')
identifier ('getName')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Retrieving log messages through complex operations is allowed through an optional function pointer')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// parameter that will be executed if and only if that particular log level is activated.')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
type ('type')
WHITE_SPACE (' ')
identifier ('Fruit')
WHITE_SPACE (' ')
object ('object')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n     ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n     ')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
OBJECT_INIT ('__init')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n	    ')
identifier ('self')
. ('.')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n     ')
} ('}')
WHITE_SPACE ('\n     ')
function ('function')
WHITE_SPACE (' ')
identifier ('getName')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('self')
. ('.')
identifier ('name')
; (';')
WHITE_SPACE ('\n     ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
