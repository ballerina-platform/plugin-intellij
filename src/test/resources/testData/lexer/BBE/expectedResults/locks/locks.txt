import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The `counter` variable will be shared among multiple workers.')
WHITE_SPACE ('\n')
int ('int')
WHITE_SPACE (' ')
identifier ('counter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('process')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"final counter value - "')
, (',')
WHITE_SPACE (' ')
identifier ('counter')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"final count field value - "')
, (',')
WHITE_SPACE (' ')
identifier ('counterObj')
. ('.')
identifier ('count')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Counter')
WHITE_SPACE (' ')
object ('object')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('count')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n\n    ')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('update')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
... ('...')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1000')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
lock ('lock')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// Locks the `count` field variable and increments the `count`.')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// The `count` field of the same object instance will be locked.')
WHITE_SPACE ('\n                ')
identifier ('self')
. ('.')
identifier ('count')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('self')
. ('.')
identifier ('count')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The `counterObj` object instance will be shared among multiple workers.')
WHITE_SPACE ('\n')
identifier ('Counter')
WHITE_SPACE (' ')
identifier ('counterObj')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('process')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w1')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('counterObj')
. ('.')
identifier ('update')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Locks the shared `counter` variable and increments the `counter`.')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
... ('...')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1000')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
lock ('lock')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// Locks the shared `counter` variable and increments the `counter`.')
WHITE_SPACE ('\n                ')
identifier ('counter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('counter')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w2')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('counterObj')
. ('.')
identifier ('update')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
... ('...')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1000')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
lock ('lock')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// Locks the shared `counter` variable and increments the `counter`.')
WHITE_SPACE ('\n                ')
identifier ('counter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('counter')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w3')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('counterObj')
. ('.')
identifier ('update')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
... ('...')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1000')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
lock ('lock')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// Locks the shared `counter` variable and increments the `counter`.')
WHITE_SPACE ('\n                ')
identifier ('counter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('counter')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w4')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('counterObj')
. ('.')
identifier ('update')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
... ('...')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1000')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
lock ('lock')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// Locks the shared `counter` variable and increments the `counter`.')
WHITE_SPACE ('\n                ')
identifier ('counter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('counter')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Waits for all workers to complete.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
wait ('wait')
WHITE_SPACE (' ')
{ ('{')
identifier ('w1')
, (',')
identifier ('w2')
, (',')
identifier ('w3')
, (',')
identifier ('w4')
} ('}')
; (';')
WHITE_SPACE ('\n')
} ('}')
