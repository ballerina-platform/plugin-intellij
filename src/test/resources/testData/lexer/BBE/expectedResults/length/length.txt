import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create an integer array with several integer elements.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('intArray')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
] (']')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('length')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Print the length of the created integer array. The length is')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// retrieved using the `.length()` method.')
WHITE_SPACE ('\n    ')
identifier ('length')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('intArray')
. ('.')
identifier ('length')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Integer array size: "')
, (',')
WHITE_SPACE (' ')
identifier ('length')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create a JSON array with several JSON elements.')
WHITE_SPACE ('\n    ')
json ('json')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('jsonArray')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
WHITE_SPACE ('\n        ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"age"')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('31')
WHITE_SPACE (' ')
} ('}')
, (',')
WHITE_SPACE ('\n        ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Neal"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"age"')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('22')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n    ')
] (']')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Print the length of the created JSON array.')
WHITE_SPACE ('\n    ')
identifier ('length')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('jsonArray')
. ('.')
identifier ('length')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"JSON array size: "')
, (',')
WHITE_SPACE (' ')
identifier ('length')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create an `int`-constrained `map`.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('strMap')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('strMap')
[ ('[')
QUOTED_STRING_LITERAL ('"A"')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n    ')
identifier ('strMap')
[ ('[')
QUOTED_STRING_LITERAL ('"B"')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
; (';')
WHITE_SPACE ('\n    ')
identifier ('strMap')
[ ('[')
QUOTED_STRING_LITERAL ('"C"')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Print the length of the created `map`.')
WHITE_SPACE ('\n    ')
identifier ('length')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('strMap')
. ('.')
identifier ('length')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Map size: "')
, (',')
WHITE_SPACE (' ')
identifier ('length')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Define a `string`.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('myStr')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"My name is Peter Parker"')
; (';')
WHITE_SPACE ('\n    \n    ')
LINE_COMMENT ('// Print the length of the string.')
WHITE_SPACE ('\n    ')
identifier ('length')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('myStr')
. ('.')
identifier ('length')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"String size: "')
, (',')
WHITE_SPACE (' ')
identifier ('length')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create an XML element.')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('x1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('b')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('k')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('\n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('S')
XML_ALL_CHAR ('h')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('c')
XML_ALL_CHAR ('k')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('H')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('s')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('\n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('u')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('h')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('S')
XML_ALL_CHAR ('i')
XML_ALL_CHAR ('r')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('A')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('h')
XML_ALL_CHAR ('u')
XML_ALL_CHAR ('r')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('C')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('D')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('y')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('u')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('h')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('\n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('!')
XML_ALL_CHAR ('-')
XML_ALL_CHAR ('-')
XML_ALL_CHAR ('P')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('i')
XML_ALL_CHAR ('c')
XML_ALL_CHAR ('e')
XML_ALL_CHAR (':')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('$')
XML_ALL_CHAR ('1')
XML_ALL_CHAR ('0')
XML_ALL_CHAR ('-')
XML_ALL_CHAR ('-')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('\n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('b')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('k')
XML_ALL_CHAR ('>')
XML_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Print the number of content items in the XML element.')
WHITE_SPACE ('\n    ')
identifier ('length')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('x1')
. ('.')
identifier ('getChildren')
( ('(')
) (')')
. ('.')
identifier ('elements')
( ('(')
) (')')
. ('.')
identifier ('length')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"XML child elements size: "')
, (',')
WHITE_SPACE (' ')
identifier ('length')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Define a tuple with two members.')
WHITE_SPACE ('\n    ')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
string ('string')
] (']')
WHITE_SPACE (' ')
identifier ('tupleVar')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('10')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John"')
] (']')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Print the size of the tuple (i.e., the number of members in the tuple).')
WHITE_SPACE ('\n    ')
identifier ('length')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('tupleVar')
. ('.')
identifier ('length')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Tuple size: "')
, (',')
WHITE_SPACE (' ')
identifier ('length')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create a record of the `Student` type.')
WHITE_SPACE ('\n    ')
identifier ('Student')
WHITE_SPACE (' ')
identifier ('stu')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('id')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
identifier ('fname')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John"')
, (',')
WHITE_SPACE (' ')
identifier ('lname')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Doe"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('17')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Print the number of fields in the created `Student` record.')
WHITE_SPACE ('\n    ')
identifier ('length')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('stu')
. ('.')
identifier ('length')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Field size in `Student` record: "')
, (',')
WHITE_SPACE (' ')
identifier ('length')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Student')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
LEFT_CLOSED_RECORD_DELIMITER ('{|')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('id')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('fname')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('lname')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
... ('...')
; (';')
WHITE_SPACE ('\n')
RIGHT_CLOSED_RECORD_DELIMITER ('|}')
; (';')
