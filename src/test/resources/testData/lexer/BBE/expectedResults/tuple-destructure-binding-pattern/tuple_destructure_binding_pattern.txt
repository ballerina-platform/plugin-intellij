import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Tuple variables can be destructured with new values when used as a tuple variable')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// reference based binding pattern.')
WHITE_SPACE ('\n    ')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
] (']')
WHITE_SPACE (' ')
[ ('[')
identifier ('a1')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('a2')
, (',')
WHITE_SPACE (' ')
identifier ('a3')
] (']')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"Hello"')
, (',')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('123')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
] (']')
] (']')
; (';')
WHITE_SPACE ('\n    ')
[ ('[')
identifier ('a1')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('a2')
, (',')
WHITE_SPACE (' ')
identifier ('a3')
] (']')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"Ballerina"')
, (',')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('453')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
] (']')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Tuple variable : "')
, (',')
WHITE_SPACE (' ')
identifier ('a1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('a2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('a3')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The variable can also be updated individually because once they are defined they are treated as individual')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// variables at runtime.')
WHITE_SPACE ('\n    ')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
] (']')
WHITE_SPACE (' ')
[ ('[')
identifier ('b1')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('b2')
, (',')
WHITE_SPACE (' ')
identifier ('b3')
] (']')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"Hello"')
, (',')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('123')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
] (']')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('b1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Ballerina"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('b2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('453')
; (';')
WHITE_SPACE ('\n    ')
identifier ('b3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Tuple variable : "')
, (',')
WHITE_SPACE (' ')
identifier ('b1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('b2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('b3')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The binding patterns are recursive in nature. These examples show how to write complex recursive')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// variable references for destructuring.')
WHITE_SPACE ('\n    ')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
[ ('[')
boolean ('boolean')
, (',')
WHITE_SPACE (' ')
float ('float')
] (']')
] (']')
] (']')
WHITE_SPACE (' ')
[ ('[')
identifier ('c1')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('c2')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('c3')
, (',')
WHITE_SPACE (' ')
identifier ('c4')
] (']')
] (']')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                                        ')
[ ('[')
QUOTED_STRING_LITERAL ('"Test"')
, (',')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('123')
, (',')
WHITE_SPACE (' ')
[ ('[')
BOOLEAN_LITERAL ('true')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('5.6')
] (']')
] (']')
] (']')
; (';')
WHITE_SPACE ('\n    ')
[ ('[')
[ ('[')
identifier ('c1')
, (',')
WHITE_SPACE (' ')
identifier ('c2')
] (']')
, (',')
WHITE_SPACE (' ')
identifier ('c3')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
[ ('[')
QUOTED_STRING_LITERAL ('"Ballerina"')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('453')
] (']')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
] (']')
; (';')
WHITE_SPACE ('\n    ')
[ ('[')
identifier ('c2')
, (',')
WHITE_SPACE (' ')
identifier ('c3')
, (',')
WHITE_SPACE (' ')
identifier ('c4')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('657')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('76.8')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Tuple variable : "')
, (',')
WHITE_SPACE (' ')
identifier ('c1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('c2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('c3')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('c4')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Tuple variables can also be referenced using tuple-type expressions.')
WHITE_SPACE ('\n    ')
[ ('[')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
[ ('[')
boolean ('boolean')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
] (']')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
float ('float')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
] (']')
WHITE_SPACE (' ')
identifier ('v1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                            ')
[ ('[')
[ ('[')
QUOTED_STRING_LITERAL ('"Ballerina"')
, (',')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
[ ('[')
BOOLEAN_LITERAL ('true')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('34')
] (']')
] (']')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_FLOATING_POINT_NUMBER ('5.6')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('45')
] (']')
] (']')
; (';')
WHITE_SPACE ('\n    ')
[ ('[')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
[ ('[')
boolean ('boolean')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
] (']')
] (']')
, (',')
WHITE_SPACE ('\n                        ')
[ ('[')
float ('float')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
] (']')
WHITE_SPACE (' ')
[ ('[')
[ ('[')
identifier ('d1')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('d2')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('d3')
, (',')
WHITE_SPACE (' ')
identifier ('d4')
] (']')
] (']')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('d5')
, (',')
WHITE_SPACE (' ')
identifier ('d6')
] (']')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('v1')
; (';')
WHITE_SPACE ('\n    ')
[ ('[')
[ ('[')
identifier ('d1')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('d2')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('d3')
, (',')
WHITE_SPACE (' ')
identifier ('d4')
] (']')
] (']')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('d5')
, (',')
WHITE_SPACE (' ')
identifier ('d6')
] (']')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bar')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Tuple variable : "')
, (',')
WHITE_SPACE ('\n                    ')
identifier ('d1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('d2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('d3')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('d4')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('d5')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('d6')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Tuple type can also take "var" as the type label in which the type will be inferred from the right hand side.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
[ ('[')
identifier ('e1')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('e2')
, (',')
WHITE_SPACE (' ')
identifier ('e3')
] (']')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('foo')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Tuple variable : "')
, (',')
WHITE_SPACE (' ')
identifier ('e1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('e2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('e3')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
var ('var')
WHITE_SPACE (' ')
[ ('[')
[ ('[')
identifier ('f1')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('f2')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('f3')
, (',')
WHITE_SPACE (' ')
identifier ('f4')
] (']')
] (']')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
identifier ('f5')
, (',')
WHITE_SPACE (' ')
identifier ('f6')
] (']')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bar')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Tuple variable : "')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('f1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('f2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('f3')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('f4')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('f5')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('f6')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('foo')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
] (']')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"Ballerina"')
, (',')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('453')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
] (']')
] (']')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('bar')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
[ ('[')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
[ ('[')
boolean ('boolean')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
] (']')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
float ('float')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
] (']')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
[ ('[')
[ ('[')
QUOTED_STRING_LITERAL ('"Ballerina"')
, (',')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
[ ('[')
BOOLEAN_LITERAL ('true')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('34')
] (']')
] (']')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_FLOATING_POINT_NUMBER ('5.6')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('45')
] (']')
] (']')
; (';')
WHITE_SPACE ('\n')
} ('}')
