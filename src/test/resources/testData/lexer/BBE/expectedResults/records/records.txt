import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Define an open record type named `Student`. The `{` and `}` delimiters indicate that in addition to the defined fields,')
WHITE_SPACE ('\n')
LINE_COMMENT ('// this record type allows additional fields with `anydata` values.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The descriptor `record { }` is equivalent to `record {| anydata...; |}`.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Student')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Grades')
WHITE_SPACE (' ')
identifier ('grades')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Define a closed record type named `Address`. The `{|` and `|}` delimiters indicate that this record type')
WHITE_SPACE ('\n')
LINE_COMMENT ('// allows mapping values, which contain only the described fields.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Address')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
LEFT_CLOSED_RECORD_DELIMITER ('{|')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('city')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('country')
; (';')
WHITE_SPACE ('\n')
RIGHT_CLOSED_RECORD_DELIMITER ('|}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Define an open record type named `Grades`. Although it is defined using the `{|` and `|}` delimiters, it has')
WHITE_SPACE ('\n')
LINE_COMMENT ('// an `int` rest field as well. Therefore, this is an open record type.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Grades')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
LEFT_CLOSED_RECORD_DELIMITER ('{|')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('maths')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('physics')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('chemistry')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This is a rest field of the type`int`. All additional fields should be of the type or a subtype of the rest field.')
WHITE_SPACE ('\n    ')
int ('int')
... ('...')
; (';')
WHITE_SPACE ('\n')
RIGHT_CLOSED_RECORD_DELIMITER ('|}')
; (';')
WHITE_SPACE ('\n\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This creates a `Student` record. Since all the fields are required and none of the fields')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// have explicit default values assigned to them, values must be specified for all the fields')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// when creating the record.')
WHITE_SPACE ('\n    ')
identifier ('Student')
WHITE_SPACE (' ')
identifier ('john')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John Doe"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('17')
, (',')
WHITE_SPACE ('\n        ')
identifier ('grades')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('maths')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('80')
, (',')
WHITE_SPACE ('\n            ')
identifier ('physics')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('75')
, (',')
WHITE_SPACE ('\n            ')
identifier ('chemistry')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('65')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('john')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This is an example of field-based access of record fields. The return type of this expression is the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// type of the field. Field access is only allowed for required fields in a record.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('john')
. ('.')
identifier ('name')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This is an example of member access of record fields. Where the type of the field is `T`, the type of')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// this expression is `T` if the field is a required field or has a default value. If the field is an optional')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// field or a rest field, the type of this expression is `T?`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If it is a closed record, accessing an undefined key will result in a compilation error.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('john')
[ ('[')
QUOTED_STRING_LITERAL ('"name"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This fetches a field of a nested record.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('john')
. ('.')
identifier ('grades')
. ('.')
identifier ('maths')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('Student')
WHITE_SPACE (' ')
identifier ('peter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Peter"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('19')
, (',')
WHITE_SPACE ('\n        ')
identifier ('grades')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('maths')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('40')
, (',')
WHITE_SPACE ('\n            ')
identifier ('physics')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('35')
, (',')
WHITE_SPACE ('\n            ')
identifier ('chemistry')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('35')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This modifies the value of the `age` field.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Field access is allowed with assignment only for fields defined in the record type descriptor.')
WHITE_SPACE ('\n    ')
identifier ('peter')
. ('.')
identifier ('age')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('16')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('peter')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('john')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Member access can be used to assign to fields that are not defined in the record type descriptor.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// An attempt to add additional fields to a closed record results in compile errors.')
WHITE_SPACE ('\n    ')
identifier ('peter')
[ ('[')
QUOTED_STRING_LITERAL ('"address"')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
identifier ('Address')
> ('>')
{ ('{')
WHITE_SPACE (' ')
identifier ('city')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Colombo"')
, (',')
WHITE_SPACE (' ')
identifier ('country')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Sri Lanka"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('peter')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create a `Grades` record adding additional fields for the `int`-typed rest field.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The `english` field is not specified in the record, but is allowed since `Grades` is an')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// open record with an `int`-typed rest field.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Keys for such field should either be `string` literals or expressions (i.e., they')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// cannot be identifiers).')
WHITE_SPACE ('\n    ')
identifier ('Grades')
WHITE_SPACE (' ')
identifier ('grades')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('maths')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('80')
, (',')
WHITE_SPACE (' ')
identifier ('physics')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('75')
, (',')
WHITE_SPACE (' ')
identifier ('chemistry')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('65')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"english"')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('90')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('grades')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Similarly, only member access can be used to access the fields that are possibly')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// added for the rest field. An `int` value is returned if the field is present in the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// record, else `()` is returned.')
WHITE_SPACE ('\n    ')
int ('int')
? ('?')
WHITE_SPACE (' ')
identifier ('english')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('grades')
[ ('[')
QUOTED_STRING_LITERAL ('"english"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('english')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
