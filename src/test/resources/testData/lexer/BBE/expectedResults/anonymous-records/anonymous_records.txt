import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
type ('type')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This is an anonymous record type descriptor.')
WHITE_SPACE ('\n    ')
record ('record')
WHITE_SPACE (' ')
LEFT_CLOSED_RECORD_DELIMITER ('{|')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('city')
; (';')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('country')
; (';')
WHITE_SPACE ('\n    ')
RIGHT_CLOSED_RECORD_DELIMITER ('|}')
WHITE_SPACE (' ')
identifier ('address')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// There is no difference in how we create normal records vs.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// how we create anonymous records.')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('john')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John Doe"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('25')
, (',')
WHITE_SPACE ('\n        ')
identifier ('address')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('city')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Colombo"')
, (',')
WHITE_SPACE (' ')
identifier ('country')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Sri Lanka"')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('john')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Since anonymous records do not have a type name associated with them,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the record descriptor itself has to be specified when declaring')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// variables of an anonymous record type.')
WHITE_SPACE ('\n    ')
record ('record')
WHITE_SPACE (' ')
LEFT_CLOSED_RECORD_DELIMITER ('{|')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('city')
; (';')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('country')
; (';')
WHITE_SPACE ('\n    ')
RIGHT_CLOSED_RECORD_DELIMITER ('|}')
WHITE_SPACE (' ')
identifier ('adr')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('city')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"London"')
, (',')
WHITE_SPACE (' ')
identifier ('country')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"UK"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('jane')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Jane Doe"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('20')
, (',')
WHITE_SPACE (' ')
identifier ('address')
: (':')
WHITE_SPACE (' ')
identifier ('adr')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('jane')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
anydata ('anydata')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('fields')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('toFieldsArray')
( ('(')
identifier ('john')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('fields')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function accepts any record with `anydata`-typed fields.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// Anonymous record types are implicitly public.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('toFieldsArray')
( ('(')
record ('record')
WHITE_SPACE (' ')
{ ('{')
} ('}')
WHITE_SPACE (' ')
identifier ('anydataRecord')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
anydata ('anydata')
[ ('[')
] (']')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
anydata ('anydata')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('fields')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
] (']')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('field')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('anydataRecord')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('fields')
[ ('[')
identifier ('i')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('field')
; (';')
WHITE_SPACE ('\n        ')
identifier ('i')
WHITE_SPACE (' ')
+= ('+=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('fields')
; (';')
WHITE_SPACE ('\n')
} ('}')
