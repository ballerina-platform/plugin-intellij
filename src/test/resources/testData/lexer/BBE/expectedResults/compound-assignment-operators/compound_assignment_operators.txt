import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('value')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value: "')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Compound `add` operator.')
WHITE_SPACE ('\n    ')
identifier ('value')
WHITE_SPACE (' ')
+= ('+=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('7')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value += 7: "')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Compound `subtract` operator.')
WHITE_SPACE ('\n    ')
identifier ('value')
WHITE_SPACE (' ')
-= ('-=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value -= 2: "')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Compound `divide` operator.')
WHITE_SPACE ('\n    ')
identifier ('value')
WHITE_SPACE (' ')
/= ('/=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value /= 3: "')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Compound `multiply` operator.')
WHITE_SPACE ('\n    ')
identifier ('value')
WHITE_SPACE (' ')
*= ('*=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value *= 2: "')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Compound `and` operator.')
WHITE_SPACE ('\n    ')
identifier ('value')
WHITE_SPACE (' ')
COMPOUND_BIT_AND ('&=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value &= 4: "')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Compound `or` operator.')
WHITE_SPACE ('\n    ')
identifier ('value')
WHITE_SPACE (' ')
COMPOUND_BIT_OR ('|=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value |= 3: "')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Compound `xor` operator.')
WHITE_SPACE ('\n    ')
identifier ('value')
WHITE_SPACE (' ')
COMPOUND_BIT_XOR ('^=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value ^= 5: "')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Compound `left shift` operator.')
WHITE_SPACE ('\n    ')
identifier ('value')
WHITE_SPACE (' ')
COMPOUND_LEFT_SHIFT ('<<=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value <<= 1: "')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Compound `right shift` operator.')
WHITE_SPACE ('\n    ')
identifier ('value')
WHITE_SPACE (' ')
COMPOUND_RIGHT_SHIFT ('>>=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value >>= 1: "')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Compound `logical shift` operator.')
WHITE_SPACE ('\n    ')
identifier ('value')
WHITE_SPACE (' ')
COMPOUND_LOGICAL_SHIFT ('>>>=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value >>>= 1: "')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
