import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Iterating a string array :"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('fruits')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"apple"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"banana"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"cherry"')
] (']')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `foreach` statement can be used to iterate an array. Each iteration returns an element in the array. ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The index of the corresponding element is not returned.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('v')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('fruits')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"fruit: "')
, (',')
WHITE_SPACE (' ')
identifier ('v')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nIterating a map :"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('words')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('a')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"apple"')
, (',')
WHITE_SPACE (' ')
identifier ('b')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"banana"')
, (',')
WHITE_SPACE (' ')
identifier ('c')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"cherry"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Iterating a map will return the values in the map.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('fruit')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('words')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('fruit')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Calling the `.entries()' method on a `map` and iterating it will return the key (`string`) and the value as a')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `tuple` variable. Tuple destructuring can be used to split the tuple variable into two variables.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
[ ('[')
identifier ('k')
, (',')
WHITE_SPACE (' ')
identifier ('v')
] (']')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('words')
. ('.')
identifier ('entries')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"letter: "')
, (',')
WHITE_SPACE (' ')
identifier ('k')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('", word: "')
, (',')
WHITE_SPACE (' ')
identifier ('v')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nIterating a JSON object :"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('apple')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"apple"')
, (',')
WHITE_SPACE (' ')
identifier ('colors')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"red"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"green"')
] (']')
, (',')
WHITE_SPACE (' ')
identifier ('price')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Iterating a JSON is only supported with `map<json>` or `json[]`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// To iterate a JSON, first cast it to the relevant iterable type.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
json ('json')
> ('>')
WHITE_SPACE (' ')
identifier ('mapValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
map ('map')
< ('<')
json ('json')
> ('>')
> ('>')
WHITE_SPACE (' ')
identifier ('apple')
; (';')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('value')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('mapValue')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('value')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"string value: "')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('value')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"int value: "')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('value')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
json ('json')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"json array value: "')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// JSON is a union type for `()` or `null` | `int` | `float` | `decimal` | `string` | `json[]` | `map<json>`.')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// The else block will be reached if `j` is neither `string`, `int`, or `json[]`.')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"non-string value: "')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nIterating a JSON array :"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// To iterate a JSON array, you need to first cast it into a JSON array (`json[]`).')
WHITE_SPACE ('\n    ')
json ('json')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('colors')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
json ('json')
[ ('[')
] (']')
> ('>')
identifier ('apple')
. ('.')
identifier ('colors')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('counter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('j')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('colors')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"color "')
, (',')
WHITE_SPACE (' ')
identifier ('counter')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('": "')
, (',')
WHITE_SPACE (' ')
identifier ('j')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('counter')
WHITE_SPACE (' ')
+= ('+=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nIterating XML :"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('book')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('b')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('k')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('\n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('S')
XML_ALL_CHAR ('h')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('c')
XML_ALL_CHAR ('k')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('H')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('s')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('\n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('u')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('h')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('S')
XML_ALL_CHAR ('i')
XML_ALL_CHAR ('r')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('A')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('h')
XML_ALL_CHAR ('u')
XML_ALL_CHAR ('r')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('C')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('D')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('y')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('u')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('h')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('\n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('b')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('k')
XML_ALL_CHAR ('>')
XML_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Iterating an XML will return each element in each iteration.')
WHITE_SPACE ('\n    ')
identifier ('counter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('book')
. ('.')
identifier ('getChildren')
( ('(')
) (')')
. ('.')
identifier ('elements')
( ('(')
) (')')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"xml at "')
, (',')
WHITE_SPACE (' ')
identifier ('counter')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('": "')
, (',')
WHITE_SPACE (' ')
identifier ('x')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('counter')
WHITE_SPACE (' ')
+= ('+=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nIterating a closed integer range :"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('endValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('sum')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// A closed integer range in the `foreach` statement represents an incremental integer value range from the start')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// expression (`1`) to the end expression (`endValue`) inclusively.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
... ('...')
identifier ('endValue')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('sum')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('sum')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('i')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"summation from 1 to "')
, (',')
WHITE_SPACE (' ')
identifier ('endValue')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" is "')
, (',')
WHITE_SPACE (' ')
identifier ('sum')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nIterating a half open integer range :"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('sum')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// A half-open integer range in the `foreach` statement represents an incremental integer value range from the start')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// expression (`1`) inclusively, to the end expression (`endValue`) exclusively.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
HALF_OPEN_RANGE ('..<')
identifier ('endValue')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('sum')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('sum')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('i')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"summation from 1 to "')
, (',')
WHITE_SPACE (' ')
identifier ('endValue')
, (',')
WHITE_SPACE ('\n                        ')
QUOTED_STRING_LITERAL ('" excluding "')
, (',')
WHITE_SPACE (' ')
identifier ('endValue')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" is "')
, (',')
WHITE_SPACE (' ')
identifier ('sum')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
