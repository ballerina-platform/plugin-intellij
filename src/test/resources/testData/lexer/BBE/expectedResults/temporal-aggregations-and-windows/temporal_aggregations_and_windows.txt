import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('ClientRequest')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('host')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('RequestCount')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('host')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('count')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
stream ('stream')
< ('<')
identifier ('ClientRequest')
> ('>')
WHITE_SPACE (' ')
identifier ('requestStream')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n')
stream ('stream')
< ('<')
identifier ('RequestCount')
> ('>')
WHITE_SPACE (' ')
identifier ('requestCountStream')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('initRealtimeRequestCounter')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Whenever the `requestCountStream` stream receives an event from the streaming rules defined in the `forever` block,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the `printRequestCount` function is invoked.')
WHITE_SPACE ('\n    ')
identifier ('requestCountStream')
. ('.')
identifier ('subscribe')
( ('(')
identifier ('printRequestCount')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Gathers all the events coming in to the `requestStream` for five seconds, groups them by the host, counts the number')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// of requests per host, and checks if the count is more than 6. If yes, publish the output (host and the count) to')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the `requestCountStream` stream as an alert. This `forever` block is executed once when initializing the service.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The processing happens asynchronously each time the `requestStream` receives an event.')
WHITE_SPACE ('\n    ')
forever ('forever')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
from ('from')
WHITE_SPACE (' ')
identifier ('requestStream')
WHITE_SPACE (' ')
window ('window')
WHITE_SPACE (' ')
identifier ('timeBatch')
( ('(')
DECIMAL_INTEGER_LITERAL ('10000')
) (')')
WHITE_SPACE ('\n        ')
select ('select')
WHITE_SPACE (' ')
identifier ('requestStream')
. ('.')
identifier ('host')
, (',')
WHITE_SPACE (' ')
identifier ('count')
( ('(')
) (')')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('count')
WHITE_SPACE ('\n            ')
group ('group')
WHITE_SPACE (' ')
by ('by')
WHITE_SPACE (' ')
identifier ('requestStream')
. ('.')
identifier ('host')
WHITE_SPACE ('\n            ')
having ('having')
WHITE_SPACE (' ')
identifier ('count')
WHITE_SPACE (' ')
> ('>')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('6')
WHITE_SPACE ('\n        ')
=> ('=>')
WHITE_SPACE (' ')
( ('(')
identifier ('RequestCount')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('counts')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// `counts` is the output of the streaming rules and is published to the `requestCountStream`.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// The `select` clause should match the structure of the `RequestCount` record.')
WHITE_SPACE ('\n            ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('counts')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('requestCountStream')
. ('.')
identifier ('publish')
( ('(')
identifier ('c')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Defines the `printRequestCount` function.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('printRequestCount')
( ('(')
identifier ('RequestCount')
WHITE_SPACE (' ')
identifier ('reqCount')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"ALERT!! : Received more than 6 requests from the "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                        ')
QUOTED_STRING_LITERAL ('"host within 10 seconds : "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('reqCount')
. ('.')
identifier ('host')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
listener ('listener')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
WHITE_SPACE (' ')
identifier ('ep')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
( ('(')
DECIMAL_INTEGER_LITERAL ('9090')
) (')')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The host header is extracted from the requests that come to the service using the `/requests` context. Using this')
WHITE_SPACE ('\n')
LINE_COMMENT ('// information, the `clientRequest` object is created and published to the `requestStream`.')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('requestService')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
identifier ('ep')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
function ('function')
WHITE_SPACE (' ')
OBJECT_INIT ('__init')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('initRealtimeRequestCounter')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"POST"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/requests"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('requests')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('conn')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('hostName')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
@ ('@')
identifier ('untainted')
> ('>')
WHITE_SPACE (' ')
identifier ('conn')
. ('.')
identifier ('remoteAddress')
. ('.')
identifier ('host')
; (';')
WHITE_SPACE ('\n        ')
identifier ('ClientRequest')
WHITE_SPACE (' ')
identifier ('clientRequest')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('host')
: (':')
WHITE_SPACE (' ')
identifier ('hostName')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n        ')
identifier ('requestStream')
. ('.')
identifier ('publish')
( ('(')
identifier ('clientRequest')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
identifier ('res')
. ('.')
identifier ('setJsonPayload')
( ('(')
QUOTED_STRING_LITERAL ('"{'message' : 'request successfully "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                                ')
QUOTED_STRING_LITERAL ('"received'}"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
error ('error')
? ('?')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('conn')
-> ('->')
identifier ('respond')
( ('(')
identifier ('res')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error in responding to caller"')
, (',')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
