import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `fork` block allows you to spawn (fork) multiple workers')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// within any execution flow of a Ballerina program.')
WHITE_SPACE ('\n    ')
fork ('fork')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w1')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
string ('string')
] (']')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('23')
; (';')
WHITE_SPACE ('\n            ')
string ('string')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Colombo"')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w1] i: "')
, (',')
WHITE_SPACE (' ')
identifier ('i')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" s: "')
, (',')
WHITE_SPACE (' ')
identifier ('s')
) (')')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Return of worker `w1`.')
WHITE_SPACE ('\n            ')
return ('return')
WHITE_SPACE (' ')
[ ('[')
identifier ('i')
, (',')
WHITE_SPACE (' ')
identifier ('s')
] (']')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w2')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
float ('float')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
float ('float')
WHITE_SPACE (' ')
identifier ('f')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('10.344')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w2] f: "')
, (',')
WHITE_SPACE (' ')
identifier ('f')
) (')')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Return of worker `w2`.')
WHITE_SPACE ('\n            ')
return ('return')
WHITE_SPACE (' ')
identifier ('f')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Workers are visible outside the `fork` as futures.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The `wait` action will wait for both workers `w1` and `w2` to finish.')
WHITE_SPACE ('\n    ')
record ('record')
{ ('{')
WHITE_SPACE (' ')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
string ('string')
] (']')
WHITE_SPACE (' ')
identifier ('w1')
; (';')
WHITE_SPACE (' ')
float ('float')
WHITE_SPACE (' ')
identifier ('w2')
; (';')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE (' ')
identifier ('results')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
wait ('wait')
WHITE_SPACE (' ')
{ ('{')
identifier ('w1')
, (',')
WHITE_SPACE (' ')
identifier ('w2')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The resulting record contains returned values from each worker with')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the field name as the worker name (if a field name is not provided).')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
[ ('[')
identifier ('iW1')
, (',')
WHITE_SPACE (' ')
identifier ('sW1')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('results')
. ('.')
identifier ('w1')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('fW2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('results')
. ('.')
identifier ('w2')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[main] iW1: "')
, (',')
WHITE_SPACE (' ')
identifier ('iW1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" sW1: "')
, (',')
WHITE_SPACE (' ')
identifier ('sW1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" fW2: "')
, (',')
WHITE_SPACE (' ')
identifier ('fW2')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
