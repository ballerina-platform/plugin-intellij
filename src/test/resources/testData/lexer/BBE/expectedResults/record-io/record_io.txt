import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function returns a `ReadableTextRecordChannel` from a given file location.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The encoding is a character representation (i.e., UTF-8 ASCCI) of the')
WHITE_SPACE ('\n')
LINE_COMMENT ('// content in the file. The `rs` annotation defines a record separator')
WHITE_SPACE ('\n')
LINE_COMMENT ('// (e.g., a new line) and the `fs` annotation is a field separator')
WHITE_SPACE ('\n')
LINE_COMMENT ('// (e.g., a comma).')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getReadableRecordChannel')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('filePath')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('encoding')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('rs')
, (',')
WHITE_SPACE ('\n                                  ')
string ('string')
WHITE_SPACE (' ')
identifier ('fs')
) (')')
WHITE_SPACE ('\n                                        ')
returns ('returns')
WHITE_SPACE (' ')
@ ('@')
identifier ('tainted')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('ReadableTextRecordChannel')
| ('|')
error ('error')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('ReadableByteChannel')
WHITE_SPACE (' ')
identifier ('byteChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('openReadableFile')
( ('(')
identifier ('filePath')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Creates a readable character channel')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// from the readable byte channel to read the content as text.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('ReadableCharacterChannel')
WHITE_SPACE (' ')
identifier ('characterChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
identifier ('byteChannel')
, (',')
WHITE_SPACE (' ')
identifier ('encoding')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Converts the readable character channel to a readable record channel')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// to read the content as records.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('ReadableTextRecordChannel')
WHITE_SPACE (' ')
identifier ('delimitedRecordChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
identifier ('characterChannel')
, (',')
WHITE_SPACE ('\n                                                              ')
identifier ('rs')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('rs')
, (',')
WHITE_SPACE ('\n                                                              ')
identifier ('fs')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('fs')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('delimitedRecordChannel')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function returns a `WritableTextRecordChannel` from a given file location.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The encoding is a character representation (i.e., UTF-8 ASCCI) of the')
WHITE_SPACE ('\n')
LINE_COMMENT ('// content in the file. The `rs` annotation defines a record separator')
WHITE_SPACE ('\n')
LINE_COMMENT ('// (e.g., a new line) and the `fs` annotation is a field separator')
WHITE_SPACE ('\n')
LINE_COMMENT ('// (e.g., a comma).')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getWritableRecordChannel')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('filePath')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('encoding')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('rs')
, (',')
WHITE_SPACE ('\n                                  ')
string ('string')
WHITE_SPACE (' ')
identifier ('fs')
) (')')
WHITE_SPACE ('\n                                        ')
returns ('returns')
WHITE_SPACE (' ')
@ ('@')
identifier ('tainted')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('WritableTextRecordChannel')
| ('|')
error ('error')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('WritableByteChannel')
WHITE_SPACE (' ')
identifier ('byteChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('openWritableFile')
( ('(')
identifier ('filePath')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Creates a writable character channel')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// from the writable byte channel to read the content as text.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('WritableCharacterChannel')
WHITE_SPACE (' ')
identifier ('characterChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
identifier ('byteChannel')
, (',')
WHITE_SPACE (' ')
identifier ('encoding')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Converts the writable character channel to a writable record channel')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// to read the content as records.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('WritableTextRecordChannel')
WHITE_SPACE (' ')
identifier ('delimitedRecordChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
identifier ('characterChannel')
, (',')
WHITE_SPACE ('\n                                                              ')
identifier ('rs')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('rs')
, (',')
WHITE_SPACE ('\n                                                              ')
identifier ('fs')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('fs')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('delimitedRecordChannel')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function processes the `.CSV` file and')
WHITE_SPACE ('\n')
LINE_COMMENT ('// writes the content back as text with the `|` delimiter.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('process')
( ('(')
identifier ('io')
: (':')
identifier ('ReadableTextRecordChannel')
WHITE_SPACE (' ')
identifier ('srcRecordChannel')
, (',')
WHITE_SPACE ('\n                 ')
identifier ('io')
: (':')
identifier ('WritableTextRecordChannel')
WHITE_SPACE (' ')
identifier ('dstRecordChannel')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
error ('error')
? ('?')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Reads all the records from the provided file until there are')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// no more records.')
WHITE_SPACE ('\n    ')
while ('while')
WHITE_SPACE (' ')
( ('(')
identifier ('srcRecordChannel')
. ('.')
identifier ('hasNext')
( ('(')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Reads the records.')
WHITE_SPACE ('\n        ')
string ('string')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('records')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('srcRecordChannel')
. ('.')
identifier ('getNext')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Writes the records.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('dstRecordChannel')
. ('.')
identifier ('write')
( ('(')
identifier ('records')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
return ('return')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Closes the readable text record channel.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('closeRc')
( ('(')
identifier ('io')
: (':')
identifier ('ReadableTextRecordChannel')
WHITE_SPACE (' ')
identifier ('rc')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('closeResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('rc')
. ('.')
identifier ('close')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('closeResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while closing the channel: "')
, (',')
WHITE_SPACE ('\n                       ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('closeResult')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Closes the writable channel.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('closeWc')
( ('(')
identifier ('io')
: (':')
identifier ('WritableTextRecordChannel')
WHITE_SPACE (' ')
identifier ('wc')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('closeResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('wc')
. ('.')
identifier ('close')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('closeResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while closing the channel: "')
, (',')
WHITE_SPACE ('\n                       ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('closeResult')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Specifies the location of the `.CSV` file and the text file. ')
WHITE_SPACE ('\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
error ('error')
? ('?')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('srcFileName')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"./files/sample.csv"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('dstFileName')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"./files/sampleResponse.txt"')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The record separator of the `.CSV` file is a')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// new line and the field separator is a comma (,).')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('ReadableTextRecordChannel')
WHITE_SPACE (' ')
identifier ('srcRecordChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n    ')
check ('check')
WHITE_SPACE (' ')
identifier ('getReadableRecordChannel')
( ('(')
identifier ('srcFileName')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"UTF-8"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"\\r?\\n"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('","')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//The record separator of the text file')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//is a new line and the field separator is a pipe (|).')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('WritableTextRecordChannel')
WHITE_SPACE (' ')
identifier ('dstRecordChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n    ')
check ('check')
WHITE_SPACE (' ')
identifier ('getWritableRecordChannel')
( ('(')
identifier ('dstFileName')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"UTF-8"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"\r\n"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"|"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Start processing the CSV file from "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('srcFileName')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n               ')
QUOTED_STRING_LITERAL ('" to the text file in "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('dstFileName')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('process')
( ('(')
identifier ('srcRecordChannel')
, (',')
WHITE_SPACE (' ')
identifier ('dstRecordChannel')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"An error occurred while processing the records: "')
, (',')
WHITE_SPACE ('\n                       ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Processing completed. The processed file is located in "')
, (',')
WHITE_SPACE ('\n                    ')
identifier ('dstFileName')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Closes the channels.')
WHITE_SPACE ('\n    ')
identifier ('closeRc')
( ('(')
identifier ('srcRecordChannel')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('closeWc')
( ('(')
identifier ('dstRecordChannel')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
