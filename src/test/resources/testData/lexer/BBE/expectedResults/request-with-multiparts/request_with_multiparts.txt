import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('mime')
; (';')
WHITE_SPACE ('\n\n')
identifier ('http')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('clientEP')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"http://localhost:9090"')
) (')')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/multiparts"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
LINE_COMMENT ('//Binds the listener to the service.')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('multipartDemoService')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
( ('(')
DECIMAL_INTEGER_LITERAL ('9090')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"POST"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/decode"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('multipartReceiver')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE ('\n                                        ')
identifier ('request')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Extracts bodyparts from the request.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('bodyParts')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('request')
. ('.')
identifier ('getBodyParts')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('bodyParts')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('Entity')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('part')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('bodyParts')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('handleContent')
( ('(')
identifier ('part')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
identifier ('response')
. ('.')
identifier ('setPayload')
( ('(')
< ('<')
@ ('@')
identifier ('untainted')
> ('>')
WHITE_SPACE (' ')
identifier ('bodyParts')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('bodyParts')
. ('.')
identifier ('reason')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('response')
. ('.')
identifier ('setPayload')
( ('(')
QUOTED_STRING_LITERAL ('"Error in decoding multiparts!"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('response')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/encode"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('multipartSender')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Create a json body part.')
WHITE_SPACE ('\n        ')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('jsonBodyPart')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
identifier ('jsonBodyPart')
. ('.')
identifier ('setContentDisposition')
( ('(')
WHITE_SPACE ('\n                        ')
identifier ('getContentDispositionForFormData')
( ('(')
QUOTED_STRING_LITERAL ('"json part"')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('jsonBodyPart')
. ('.')
identifier ('setJson')
( ('(')
{ ('{')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"wso2"')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Create an `xml` body part as a file upload.')
WHITE_SPACE ('\n        ')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('xmlFilePart')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
identifier ('xmlFilePart')
. ('.')
identifier ('setContentDisposition')
( ('(')
WHITE_SPACE ('\n                       ')
identifier ('getContentDispositionForFormData')
( ('(')
QUOTED_STRING_LITERAL ('"xml file part"')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This file path is relative to where the ballerina is running.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// If your file is located outside, please')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// give the absolute file path instead.')
WHITE_SPACE ('\n        ')
identifier ('xmlFilePart')
. ('.')
identifier ('setFileAsEntityBody')
( ('(')
QUOTED_STRING_LITERAL ('"./files/test.xml"')
, (',')
WHITE_SPACE ('\n                                        ')
identifier ('contentType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('APPLICATION_XML')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Create an array to hold all the body parts.')
WHITE_SPACE ('\n        ')
identifier ('mime')
: (':')
identifier ('Entity')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('bodyParts')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
identifier ('jsonBodyPart')
, (',')
WHITE_SPACE (' ')
identifier ('xmlFilePart')
] (']')
; (';')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('request')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Set the body parts to the request.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Here the content-type is set as multipart form data.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This also works with any other multipart media type.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// eg:- `multipart/mixed`, `multipart/related` etc.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// You need to pass the content type that suit your requirement.')
WHITE_SPACE ('\n        ')
identifier ('request')
. ('.')
identifier ('setBodyParts')
( ('(')
identifier ('bodyParts')
, (',')
WHITE_SPACE (' ')
identifier ('contentType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('MULTIPART_FORM_DATA')
) (')')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('returnResponse')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEP')
-> ('->')
identifier ('post')
( ('(')
QUOTED_STRING_LITERAL ('"/multiparts/decode"')
, (',')
WHITE_SPACE (' ')
identifier ('request')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('returnResponse')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Response')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('returnResponse')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n            ')
identifier ('response')
. ('.')
identifier ('setPayload')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while sending multipart "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                                    ')
QUOTED_STRING_LITERAL ('"request!"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('response')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The content logic that handles the body parts vary based on your requirement.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('handleContent')
( ('(')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('bodyPart')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('mediaType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('getMediaType')
( ('(')
identifier ('bodyPart')
. ('.')
identifier ('getContentType')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mediaType')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('MediaType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('baseType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('mediaType')
. ('.')
identifier ('getBaseType')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('APPLICATION_XML')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
WHITE_SPACE (' ')
|| ('||')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('TEXT_XML')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('//Extracts `xml` data from the body part.')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bodyPart')
. ('.')
identifier ('getXml')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
xml ('xml')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
identifier ('payload')
. ('.')
identifier ('toString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('payload')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('APPLICATION_JSON')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('//Extracts `json` data from the body part.')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bodyPart')
. ('.')
identifier ('getJson')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
json ('json')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
identifier ('payload')
. ('.')
identifier ('toJsonString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('payload')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('TEXT_PLAIN')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('//Extracts text data from the body part.')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bodyPart')
. ('.')
identifier ('getText')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('payload')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getContentDispositionForFormData')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('partName')
) (')')
WHITE_SPACE ('\n                                    ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('ContentDisposition')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('mime')
: (':')
identifier ('ContentDisposition')
WHITE_SPACE (' ')
identifier ('contentDisposition')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n    ')
identifier ('contentDisposition')
. ('.')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('partName')
; (';')
WHITE_SPACE ('\n    ')
identifier ('contentDisposition')
. ('.')
identifier ('disposition')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"form-data"')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('contentDisposition')
; (';')
WHITE_SPACE ('\n')
} ('}')
