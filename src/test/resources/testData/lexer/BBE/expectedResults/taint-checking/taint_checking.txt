import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('lang')
. ('.')
identifier (''int')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('ints')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerinax')
/ ('/')
identifier ('java')
. ('.')
identifier ('jdbc')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The `@untainted` annotation can be used with the parameters of user-defined functions. This allow users to restrict')
WHITE_SPACE ('\n')
LINE_COMMENT ('// passing untrusted (tainted) data into a security sensitive parameter.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('userDefinedSecureOperation')
( ('(')
@ ('@')
identifier ('untainted')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('secureParameter')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n')
} ('}')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Student')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('firstname')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('jdbc')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('customerDBEP')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
( ('(')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"jdbc:mysql://localhost:3306/testdb"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('username')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"root"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"root"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('poolOptions')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('maximumPoolSize')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
WHITE_SPACE (' ')
} ('}')
, (',')
WHITE_SPACE ('\n        ')
identifier ('dbOptions')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('useSSL')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Sensitive parameters of functions that are built-in to Ballerina are decorated with the `@untainted` annotation.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This ensures that tainted data cannot pass into the security sensitive parameter.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// For example, the taint checking mechanism of Ballerina completely prevents SQL injection vulnerabilities by')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// disallowing tainted data in the SQL query.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This line results in a compile error because the query is appended with a user-provided argument.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('customerDBEP')
-> ('->')
WHITE_SPACE ('\n    ')
identifier ('select')
( ('(')
QUOTED_STRING_LITERAL ('"SELECT firstname FROM student WHERE registration_id = "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n            ')
identifier ('args')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
, (',')
WHITE_SPACE (' ')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
table ('table')
< ('<')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('firstname')
; (';')
WHITE_SPACE (' ')
} ('}')
> ('>')
WHITE_SPACE (' ')
identifier ('dataTable')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
error ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
error ('error')
> ('>')
WHITE_SPACE (' ')
identifier ('result')
; (';')
WHITE_SPACE ('\n        ')
panic ('panic')
WHITE_SPACE (' ')
identifier ('e')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('dataTable')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This line results in a compiler error because a user-provided argument is passed to a sensitive parameter.')
WHITE_SPACE ('\n    ')
identifier ('userDefinedSecureOperation')
( ('(')
identifier ('args')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('isInteger')
( ('(')
identifier ('args')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// After performing necessary validations and/or escaping, we can use type cast expression with @untainted annotation')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// to mark the proceeding value as `trusted` and pass it to a sensitive parameter.')
WHITE_SPACE ('\n        ')
identifier ('userDefinedSecureOperation')
( ('(')
< ('<')
@ ('@')
identifier ('untainted')
> ('>')
WHITE_SPACE (' ')
identifier ('args')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
error ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
error ('error')
( ('(')
QUOTED_STRING_LITERAL ('"Validation error: ID should be an integer"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
panic ('panic')
WHITE_SPACE (' ')
identifier ('err')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
while ('while')
WHITE_SPACE (' ')
( ('(')
identifier ('dataTable')
. ('.')
identifier ('hasNext')
( ('(')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('jsonResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('dataTable')
. ('.')
identifier ('getNext')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('jsonResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('Student')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('Student')
WHITE_SPACE (' ')
identifier ('jsonData')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('jsonResult')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// The return values of certain functions built-in to Ballerina are decorated with the `@tainted` annotation to')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// denote that the return value should be untrusted (tainted). One such example is the data read from a')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// database.')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('//')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// This line results in a compile error because a value derived from a database read (tainted) is passed to a')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// sensitive parameter.')
WHITE_SPACE ('\n            ')
identifier ('userDefinedSecureOperation')
( ('(')
identifier ('jsonData')
. ('.')
identifier ('firstname')
) (')')
; (';')
WHITE_SPACE ('\n\n            ')
string ('string')
WHITE_SPACE (' ')
identifier ('sanitizedData1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('sanitizeAndReturnTainted')
( ('(')
identifier ('jsonData')
. ('.')
identifier ('firstname')
) (')')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// This line results in a compile error because the `sanitize` function returns a value derived from the tainted')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// data. Therefore, the return of the `sanitize` function is also tainted.')
WHITE_SPACE ('\n            ')
identifier ('userDefinedSecureOperation')
( ('(')
identifier ('sanitizedData1')
) (')')
; (';')
WHITE_SPACE ('\n\n            ')
string ('string')
WHITE_SPACE (' ')
identifier ('sanitizedData2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('sanitizeAndReturnUntainted')
( ('(')
identifier ('jsonData')
. ('.')
identifier ('firstname')
) (')')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// This line successfully compiles. Although the `sanitize` function returns a value derived from tainted data,')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// the return value is annotated with the `@untainted` annotation. This means that the return value is safe and can be')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// trusted.')
WHITE_SPACE ('\n            ')
identifier ('userDefinedSecureOperation')
( ('(')
identifier ('sanitizedData2')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
checkpanic ('checkpanic')
WHITE_SPACE (' ')
identifier ('customerDBEP')
. ('.')
identifier ('stop')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('sanitizeAndReturnTainted')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('input')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// transform and sanitize the string here.')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('input')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The `@untainted` annotation denotes that the return value of the function should be trusted (untainted) even though')
WHITE_SPACE ('\n')
LINE_COMMENT ('// the return value is derived from tainted data.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('sanitizeAndReturnUntainted')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('input')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
@ ('@')
identifier ('untainted')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// transform and sanitize the string here.')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('input')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('isInteger')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('input')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
boolean ('boolean')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('intVal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('ints')
: (':')
identifier ('fromString')
( ('(')
identifier ('input')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('intVal')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
