import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create an `anydata`-typed `map` with two entries.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
| ('|')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('m1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('stringVal')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"str"')
, (',')
WHITE_SPACE (' ')
identifier ('intVal')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Call `.cloneReadOnly()` on the map `m1` and assign the returned value to another variable.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
| ('|')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('m2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('m1')
. ('.')
identifier ('cloneReadOnly')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Reference equality checks for `m1` and `m2` should evaluate to false due to a clone being created')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// since `m1` is not an immutable value.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"m1 === m2: "')
, (',')
WHITE_SPACE (' ')
identifier ('m1')
WHITE_SPACE (' ')
=== ('===')
WHITE_SPACE (' ')
identifier ('m2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Check if `m1` is immutable. This evaluates to false since no changes are done to')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the original value.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"m1 is immutable: "')
, (',')
WHITE_SPACE (' ')
identifier ('m1')
. ('.')
identifier ('isReadOnly')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Check if `m2` is immutable. This evaluates to true since the returned clone is')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// marked as immutable.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"m2 is immutable: "')
, (',')
WHITE_SPACE (' ')
identifier ('m2')
. ('.')
identifier ('isReadOnly')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Attempt to add an entry to the `map` and trap the panic if it results in a panic.')
WHITE_SPACE ('\n    ')
error ('error')
? ('?')
WHITE_SPACE (' ')
identifier ('updateResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
trap ('trap')
WHITE_SPACE (' ')
identifier ('addEntryToMap')
( ('(')
identifier ('m2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"intValTwo"')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('updateResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// An error should occur since `m2` is frozen.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred on update: "')
, (',')
WHITE_SPACE ('\n                   ')
< ('<')
string ('string')
> ('>')
identifier ('updateResult')
. ('.')
identifier ('detail')
( ('(')
) (')')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Now call `.cloneReadOnly()` on the immutable value `m2`.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
| ('|')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('m3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('m2')
. ('.')
identifier ('cloneReadOnly')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Reference equality checks for `m2` and `m3` should evaluate to true due to no clones being created')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// since `m2` is already an immutable value.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"m2 === m3: "')
, (',')
WHITE_SPACE (' ')
identifier ('m2')
WHITE_SPACE (' ')
=== ('===')
WHITE_SPACE (' ')
identifier ('m3')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// An `is` check for a frozen value becomes an `is like` check.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// In other words, storage type is not considered.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Define a `map` of the constraint type `string` or `int`, but with')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// values of the type `string` only.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
| ('|')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('m5')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('valueType')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"map"')
, (',')
WHITE_SPACE (' ')
identifier ('constraint')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"string"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Make the map immutable. The resultant value would only')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// contain values of the type `string` and no values can now be')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// added to the map.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('frozenVal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('m5')
. ('.')
identifier ('cloneReadOnly')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Checking if the frozen value is of the type `map<string>` thus')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// evaluates to `true`.')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('frozenVal')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
map ('map')
< ('<')
string ('string')
> ('>')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"frozenVal is map<string>"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Function to add an entry to a `map`.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('addEntryToMap')
( ('(')
map ('map')
< ('<')
string ('string')
| ('|')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('m')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('key')
, (',')
WHITE_SPACE (' ')
string ('string')
| ('|')
int ('int')
WHITE_SPACE (' ')
identifier ('value')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('m')
[ ('[')
identifier ('key')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('value')
; (';')
WHITE_SPACE ('\n')
} ('}')
