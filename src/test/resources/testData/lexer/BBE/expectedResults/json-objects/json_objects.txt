import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create a JSON object. A JSON object in Ballerina is equivalent to a `map<json>`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Thus, the same can be written as')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `map<json> j = { name: "apple", color: "red", price: j2 };`')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"apple"')
, (',')
WHITE_SPACE (' ')
identifier ('color')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"red"')
, (',')
WHITE_SPACE (' ')
identifier ('price')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('100')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('j')
. ('.')
identifier ('toJsonString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Since a JSON object is a `map<json>`, this type test evaluates to true.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"j is map<json>: "')
, (',')
WHITE_SPACE (' ')
identifier ('j')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
map ('map')
< ('<')
json ('json')
> ('>')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create an empty JSON object. This is equivalent to an empty `map<json>`.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('empty')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('30')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create a JSON object. Keys can be defined with or without quotes.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Values can be any `json` expression.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('p')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('fname')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John"')
, (',')
WHITE_SPACE (' ')
identifier ('lname')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Stallone"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"age"')
: (':')
WHITE_SPACE (' ')
identifier ('age')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('p')
. ('.')
identifier ('toJsonString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// You can add or change JSON object values using member access (i.e., the `[expr]` operator).')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// In order to change fields of an object value, it needs to be accessed')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// as a `map<json>`. This is done by casting `p` to `map<json>`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Alternatively, `p` could have been defined as a `map<json>`.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
json ('json')
> ('>')
WHITE_SPACE (' ')
identifier ('mp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
map ('map')
< ('<')
json ('json')
> ('>')
> ('>')
WHITE_SPACE (' ')
identifier ('p')
; (';')
WHITE_SPACE ('\n    ')
identifier ('mp')
[ ('[')
QUOTED_STRING_LITERAL ('"age"')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('31')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('p')
. ('.')
identifier ('toJsonString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create a nested JSON object.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This could also be defined as a `json` variable instead of `map<json>`.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
json ('json')
> ('>')
WHITE_SPACE (' ')
identifier ('p2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n         ')
identifier ('fname')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Peter"')
, (',')
WHITE_SPACE ('\n         ')
identifier ('lname')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Stallone"')
, (',')
WHITE_SPACE ('\n         ')
identifier ('address')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n             ')
identifier ('line')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"20 Palm Grove"')
, (',')
WHITE_SPACE ('\n             ')
identifier ('city')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Colombo 03"')
, (',')
WHITE_SPACE ('\n             ')
identifier ('country')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Sri Lanka"')
WHITE_SPACE ('\n         ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('p2')
. ('.')
identifier ('toJsonString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Member access expressions with `string` keys can be used to access fields of a')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// mapping of `json`.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('lastName')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('p2')
[ ('[')
QUOTED_STRING_LITERAL ('"lname"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('lastName')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
