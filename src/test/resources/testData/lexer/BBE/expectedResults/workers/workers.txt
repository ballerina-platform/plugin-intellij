import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// In Ballerina, each function consists of one or more workers, which are ')
WHITE_SPACE ('\n')
LINE_COMMENT ('// independent parallel execution paths called strands. If explicit workers are')
WHITE_SPACE ('\n')
LINE_COMMENT ('// not mentioned within worker blocks, the function code will belong to a')
WHITE_SPACE ('\n')
LINE_COMMENT ('// single implicit default worker. The default worker in each function wil be')
WHITE_SPACE ('\n')
LINE_COMMENT ('// executed in the same strand as the caller function.')
WHITE_SPACE ('\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Worker execution started"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This block belongs to the worker `w1`.')
WHITE_SPACE ('\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w1')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Calculates the sum(n).')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10000000')
; (';')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('sum')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
... ('...')
identifier ('n')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('sum')
WHITE_SPACE (' ')
+= ('+=')
WHITE_SPACE (' ')
identifier ('i')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"sum of first "')
, (',')
WHITE_SPACE (' ')
identifier ('n')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" positive numbers = "')
, (',')
WHITE_SPACE (' ')
identifier ('sum')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This block belongs to the worker `w2`.')
WHITE_SPACE ('\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w2')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Calculates the sum(n^2).')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10000000')
; (';')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('sum')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
... ('...')
identifier ('n')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('sum')
WHITE_SPACE (' ')
+= ('+=')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
identifier ('i')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"sum of squares of first "')
, (',')
WHITE_SPACE (' ')
identifier ('n')
, (',')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('" positive numbers = "')
, (',')
WHITE_SPACE (' ')
identifier ('sum')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Waits for both workers to finish.')
WHITE_SPACE ('\n    ')
identifier ('_')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
wait ('wait')
WHITE_SPACE (' ')
{ ('{')
identifier ('w1')
, (',')
WHITE_SPACE (' ')
identifier ('w2')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Worker execution finished"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
