import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
object ('object')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('fname')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('lname')
; (';')
WHITE_SPACE ('\n\n    ')
function ('function')
WHITE_SPACE (' ')
OBJECT_INIT ('__init')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('fname')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('lname')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('self')
. ('.')
identifier ('fname')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('fname')
; (';')
WHITE_SPACE ('\n        ')
identifier ('self')
. ('.')
identifier ('lname')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('lname')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
function ('function')
WHITE_SPACE (' ')
identifier ('getFullName')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('self')
. ('.')
identifier ('fname')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('self')
. ('.')
identifier ('lname')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function returns a value of the `any` type.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getValue')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
any ('any')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"cat"')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// In this example, the variable named `a` of the `any` type holds')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// a `Person` object.')
WHITE_SPACE ('\n    ')
any ('any')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('Person')
( ('(')
QUOTED_STRING_LITERAL ('"John"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Doe"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Before anything useful can be done with `a`, it is required to ascertain')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// its type. A type cast or a type guard can be used for this.')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('john')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
identifier ('Person')
> ('>')
identifier ('a')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Full name: "')
, (',')
WHITE_SPACE (' ')
identifier ('john')
. ('.')
identifier ('getFullName')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('a')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('Person')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"First name: "')
, (',')
WHITE_SPACE (' ')
identifier ('john')
. ('.')
identifier ('fname')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Variables of type `any` can hold values of any type except for `error`.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('ia')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('6')
] (']')
; (';')
WHITE_SPACE ('\n    ')
any ('any')
WHITE_SPACE (' ')
identifier ('ar')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('ia')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('ar')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('getValue')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
