import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('kafka')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
identifier ('kafka')
: (':')
identifier ('ProducerConfig')
WHITE_SPACE (' ')
identifier ('producerConfigs')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Here, we create the configs of a producer with optional parameters.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// client.id - used for broker-side logging.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `acks` - number of acknowledgments to complete the request.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `noRetries` - number of retries if record sending fails.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `bootstrapServers` is the list of remote server endpoints of')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the Kafka brokers')
WHITE_SPACE ('\n    ')
identifier ('bootstrapServers')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"localhost:9092"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('clientId')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"basic-producer"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('acks')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"all"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('retryCount')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
identifier ('kafka')
: (':')
identifier ('Producer')
WHITE_SPACE (' ')
identifier ('kafkaProducer')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
( ('(')
identifier ('producerConfigs')
) (')')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Hello World, Ballerina"')
; (';')
WHITE_SPACE ('\n    ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('serializedMsg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('msg')
. ('.')
identifier ('toBytes')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('sendResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('kafkaProducer')
-> ('->')
identifier ('send')
( ('(')
identifier ('serializedMsg')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"test-kafka-topic"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('sendResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Kafka producer failed to send data"')
, (',')
WHITE_SPACE (' ')
identifier ('sendResult')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('flushResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('kafkaProducer')
-> ('->')
identifier ('flushRecords')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('flushResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Kafka producer failed to flush the records"')
, (',')
WHITE_SPACE (' ')
identifier ('flushResult')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
