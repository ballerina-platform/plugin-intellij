import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// HTTP caching is enabled by default for client endpoints. Caching can be')
WHITE_SPACE ('\n')
LINE_COMMENT ('// disabled by setting `enabled=false` in the `cache` config of the client')
WHITE_SPACE ('\n')
LINE_COMMENT ('// endpoint. In this example, the `isShared` field of the `cacheConfig` is set')
WHITE_SPACE ('\n')
LINE_COMMENT ('// to true, as the cache will be a public cache in this particular scenario.')
WHITE_SPACE ('\n')
LINE_COMMENT ('//')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The default caching policy is to cache a response only if it contains a')
WHITE_SPACE ('\n')
LINE_COMMENT ('// `cache-control` header and either an `etag` header, or a `last-modified`')
WHITE_SPACE ('\n')
LINE_COMMENT ('// header. The user can control this behaviour by setting the `policy` field of')
WHITE_SPACE ('\n')
LINE_COMMENT ('// the `cacheConfig`. Currently, there are only 2 policies:')
WHITE_SPACE ('\n')
LINE_COMMENT ('// `CACHE_CONTROL_AND_VALIDATORS` (the default policy) and `RFC_7234`.')
WHITE_SPACE ('\n\n')
identifier ('http')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('cachingEP')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"http://localhost:8080"')
, (',')
WHITE_SPACE ('\n                            ')
{ ('{')
WHITE_SPACE (' ')
identifier ('cache')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('isShared')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE (' ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/cache"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('cachingProxy')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
( ('(')
DECIMAL_INTEGER_LITERAL ('9090')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('cacheableResource')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('cachingEP')
-> ('->')
identifier ('forward')
( ('(')
QUOTED_STRING_LITERAL ('"/hello"')
, (',')
WHITE_SPACE (' ')
identifier ('req')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('response')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Response')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// If the request was successful, an HTTP response will be')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// returned. In this example, the received response is')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// forwarded to the client through the outbound endpoint.')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Failed to respond to the caller"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// For failed requests, a `500` response is sent back to the')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// caller.')
WHITE_SPACE ('\n            ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n            ')
identifier ('res')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n            ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
identifier ('response')
. ('.')
identifier ('reason')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('res')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Failed to respond to the caller"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
json ('json')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"message"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Hello, World!"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Sample backend service which serves cacheable responses.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/hello"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('helloWorld')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
( ('(')
DECIMAL_INTEGER_LITERAL ('8080')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/"')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('sayHello')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// The `ResponseCacheControl` object in the `Response` object can be')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// used for setting the cache control directives associated with the')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// response. In this example, `max-age` directive is set to 15 seconds')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// indicating that the response will be fresh for 15 seconds. The')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// `must-revalidate` directive instructs that the cache should not')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// serve a stale response without validating it with the origin server')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// first. The `public` directive is set by setting `isPrivate=false`.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This indicates that the response can be cached even by intermediary')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// caches which serve multiple users.')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('ResponseCacheControl')
WHITE_SPACE (' ')
identifier ('resCC')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
identifier ('resCC')
. ('.')
identifier ('maxAge')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('15')
; (';')
WHITE_SPACE ('\n        ')
identifier ('resCC')
. ('.')
identifier ('mustRevalidate')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n        ')
identifier ('resCC')
. ('.')
identifier ('isPrivate')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
; (';')
WHITE_SPACE ('\n\n        ')
identifier ('res')
. ('.')
identifier ('cacheControl')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('resCC')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// The `setETag()` function can be used for generating ETags for')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// `string`, `json`, and `xml` types. This uses the `getCRC32()`')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// function from the `ballerina/crypto` module for generating the ETag.')
WHITE_SPACE ('\n        ')
identifier ('res')
. ('.')
identifier ('setETag')
( ('(')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// The `setLastModified()` function sets the current time as the')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// `last-modified` header.')
WHITE_SPACE ('\n        ')
identifier ('res')
. ('.')
identifier ('setLastModified')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// When sending the response, if the `cacheControl` field of the')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// response is set, and the user has not already set a `cache-control`')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// header, a `cache-control` header will be set using the directives set')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// in the `cacheControl` object.')
WHITE_SPACE ('\n\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('res')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Failed to respond to the caller"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
