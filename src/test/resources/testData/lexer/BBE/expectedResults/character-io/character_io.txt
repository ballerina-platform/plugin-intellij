import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function reads content from a file,')
WHITE_SPACE ('\n')
LINE_COMMENT ('// appends the additional `string`, and writes the content.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('process')
( ('(')
identifier ('io')
: (':')
identifier ('ReadableCharacterChannel')
WHITE_SPACE (' ')
identifier ('sc')
, (',')
WHITE_SPACE ('\n                 ')
identifier ('io')
: (':')
identifier ('WritableCharacterChannel')
WHITE_SPACE (' ')
identifier ('dc')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
error ('error')
? ('?')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('intermediateCharacterString')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" my name is "')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Reads the characters from the source channel.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('greetingText')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('sc')
. ('.')
identifier ('read')
( ('(')
DECIMAL_INTEGER_LITERAL ('5')
) (')')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('sc')
. ('.')
identifier ('read')
( ('(')
DECIMAL_INTEGER_LITERAL ('15')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Writes the characters to the destination channel.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('writeCharResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('dc')
. ('.')
identifier ('write')
( ('(')
identifier ('greetingText')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('writeCharResult1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('dc')
. ('.')
identifier ('write')
( ('(')
identifier ('intermediateCharacterString')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('writeCharResult2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('dc')
. ('.')
identifier ('write')
( ('(')
identifier ('name')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Closes the readable character channel.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('closeRc')
( ('(')
identifier ('io')
: (':')
identifier ('ReadableCharacterChannel')
WHITE_SPACE (' ')
identifier ('ch')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('cr')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('ch')
. ('.')
identifier ('close')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('cr')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while closing the channel: "')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('cr')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Closes the writable character channel.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('closeWc')
( ('(')
identifier ('io')
: (':')
identifier ('WritableCharacterChannel')
WHITE_SPACE (' ')
identifier ('ch')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('cr')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('ch')
. ('.')
identifier ('close')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('cr')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while closing the channel: "')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('cr')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
identifier ('public function main')
( ('(')
) (')')
identifier (' returns error')
? ('?')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This example uses the <BALLERINA_LANG>/examples/character-io/files/sample.txt file as the ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// source file, which includes the text "Hello Ballerina!!". ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// You can replace this with the file path of a preferred text file. ')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('ReadableByteChannel readableFieldResult ')
= ('=')
identifier (' check io')
: (':')
identifier ('openReadableFile')
( ('(')
QUOTED_STRING_LITERAL ('"./files/sample.txt"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('ReadableCharacterChannel sourceChannel ')
= ('=')
WHITE_SPACE ('\n            ')
new ('new')
( ('(')
identifier ('readableFieldResult')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"UTF-8"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This example creates the <BALLERINA_LANG>/examples/character-io/files/sampleResponse.txt')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// destination file and writes the text "Hello my name is Ballerina!!"".  ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// You can replace this with the file path of a preferred text file.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('WritableByteChannel writableFileResult ')
= ('=')
identifier (' check io')
: (':')
identifier ('openWritableFile')
( ('(')
QUOTED_STRING_LITERAL ('"./files/sampleResponse.txt"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('WritableCharacterChannel destinationChannel ')
= ('=')
WHITE_SPACE ('\n            ')
new ('new')
( ('(')
identifier ('writableFileResult')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"UTF-8"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Started to process the file."')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Processes the given `string`.')
WHITE_SPACE ('\n    ')
identifier ('var result ')
= ('=')
identifier (' process')
( ('(')
identifier ('sourceChannel')
, (',')
identifier (' destinationChannel')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('if ')
( ('(')
identifier ('result is error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"error occurred while processing chars "')
, (',')
identifier (' err ')
= ('=')
identifier (' result')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
identifier (' else ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"File processing complete."')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Closes the readable channel.')
WHITE_SPACE ('\n    ')
identifier ('closeRc')
( ('(')
identifier ('sourceChannel')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Closes the writable channel.')
WHITE_SPACE ('\n    ')
identifier ('closeWc')
( ('(')
identifier ('destinationChannel')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
