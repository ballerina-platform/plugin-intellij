import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Grades')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
LEFT_CLOSED_RECORD_DELIMITER ('{|')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('maths')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('physics')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('chemistry')
; (';')
WHITE_SPACE ('\n')
RIGHT_CLOSED_RECORD_DELIMITER ('|}')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This creates a `Grades` record.')
WHITE_SPACE ('\n    ')
identifier ('Grades')
WHITE_SPACE (' ')
identifier ('grades')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
identifier ('maths')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('80')
, (',')
WHITE_SPACE (' ')
identifier ('physics')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('75')
, (',')
WHITE_SPACE (' ')
identifier ('chemistry')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('65')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `foreach` variable is a 2-tuple, which consists of the field name and the value of the field.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The type of the field name is `string`. The variable type of the value depends on the types of the fields of the record.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If the fields and the rest descriptor are of the same type (the rest descriptor does not matter if it is a closed record),')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the variable will also be of the same type. If not, the variable will be of the type `any`.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('total')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
( ('(')
identifier ('subject')
, (',')
WHITE_SPACE (' ')
identifier ('grade')
) (')')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('grades')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('total')
WHITE_SPACE (' ')
+= ('+=')
WHITE_SPACE (' ')
identifier ('grade')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('subject')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" : "')
, (',')
WHITE_SPACE (' ')
identifier ('grade')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Average grade: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('total')
/ ('/')
DECIMAL_FLOATING_POINT_NUMBER ('3.0')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// In this example, the integer grades are mapped to letter grades using the provided function and then')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the entries with either an "A" or "B" grade are filtered out. Iterable operations `map()` and `filter()`')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// always return a `map` when invoked on records. The constraint type of the returned `map` will depend on')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the types of the values in the resultant `map`. In this case, all the values are `string`. Hence, the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// returned `map` will be of the type `map<string>`.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('letterGrades')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('grades')
WHITE_SPACE ('\n                                ')
. ('.')
map ('map')
( ('(')
identifier ('mapToLetterGrade')
) (')')
WHITE_SPACE ('\n                                ')
. ('.')
identifier ('filter')
( ('(')
function ('function')
WHITE_SPACE (' ')
( ('(')
( ('(')
string ('string')
, (',')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
identifier ('entry')
) (')')
WHITE_SPACE ('\n                                         ')
returns ('returns')
WHITE_SPACE (' ')
boolean ('boolean')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                                    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('entry')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
] (']')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"A"')
WHITE_SPACE (' ')
|| ('||')
WHITE_SPACE (' ')
identifier ('entry')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
] (']')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"B"')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                                        ')
return ('return')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n                                    ')
} ('}')
WHITE_SPACE ('\n                                    ')
return ('return')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
; (';')
WHITE_SPACE ('\n                                ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Mapped and filtered letter grades: "')
, (',')
WHITE_SPACE (' ')
identifier ('letterGrades')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Average grade using iterable ops: "')
, (',')
WHITE_SPACE (' ')
identifier ('grades')
. ('.')
identifier ('average')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The mapping function to be used to map integer grades to letter grades.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('mapToLetterGrade')
( ('(')
( ('(')
string ('string')
, (',')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
identifier ('entry')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
string ('string')
, (',')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
( ('(')
identifier ('subject')
, (',')
WHITE_SPACE (' ')
identifier ('grade')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('entry')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('grade')
WHITE_SPACE (' ')
>= ('>=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('80')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('subject')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"A"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('grade')
WHITE_SPACE (' ')
>= ('>=')
DECIMAL_INTEGER_LITERAL ('70')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('subject')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"B"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('grade')
WHITE_SPACE (' ')
>= ('>=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('60')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('subject')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"C"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('grade')
WHITE_SPACE (' ')
>= ('>=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('50')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('subject')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"D"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('subject')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"F"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
