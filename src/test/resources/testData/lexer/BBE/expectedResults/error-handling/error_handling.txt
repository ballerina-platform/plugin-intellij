import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
const ('const')
WHITE_SPACE (' ')
identifier ('INVALID_ACC_TYPE_REASON')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"InvalidAccountType"')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('InvalidAccountTypeErrorData')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('message')
? ('?')
; (';')
WHITE_SPACE ('\n    ')
error ('error')
WHITE_SPACE (' ')
identifier ('cause')
? ('?')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('accountType')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// User-defined `error` with a `constant` as the reason.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('InvalidAccountTypeError')
WHITE_SPACE (' ')
error ('error')
< ('<')
identifier ('INVALID_ACC_TYPE_REASON')
, (',')
WHITE_SPACE (' ')
identifier ('InvalidAccountTypeErrorData')
> ('>')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getTypeId')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('accountType')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
| ('|')
WHITE_SPACE (' ')
identifier ('InvalidAccountTypeError')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('accountType')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
QUOTED_STRING_LITERAL ('"checking"')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
return ('return')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n        ')
QUOTED_STRING_LITERAL ('"savings"')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
return ('return')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
; (';')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// When a constant reason is used in the error definition we can use error type name as the error constructor.')
WHITE_SPACE ('\n    ')
identifier ('InvalidAccountTypeError')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('InvalidAccountTypeError')
( ('(')
identifier ('accountType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('accountType')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('e')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Define a record to represent the error details.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// This record can have fields of `anydata|error` types.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('AccountNotFoundErrorData')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('message')
? ('?')
; (';')
WHITE_SPACE ('\n    ')
error ('error')
WHITE_SPACE (' ')
identifier ('cause')
? ('?')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('accountID')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// User-defined `error` types can be introduced by specifying a `reason` type descriptor')
WHITE_SPACE ('\n')
LINE_COMMENT ('// and optionally a `detail` type descriptor.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The `reason` type descriptor should be a subtype of `string` and the `detail`')
WHITE_SPACE ('\n')
LINE_COMMENT ('// type descriptor should be a subtype of ')
WHITE_SPACE ('\n')
LINE_COMMENT ('// `record {| string message?; error cause?; (anydata|error)...; |}`.')
WHITE_SPACE ('\n')
const ('const')
WHITE_SPACE (' ')
identifier ('ACCOUNT_NOT_FOUND')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"AccountNotFound"')
; (';')
WHITE_SPACE ('\n')
const ('const')
WHITE_SPACE (' ')
identifier ('INVALID_ACCOUNT_ID')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"InvalidAccountID"')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('AccountNotFoundError')
WHITE_SPACE (' ')
error ('error')
< ('<')
identifier ('ACCOUNT_NOT_FOUND')
WHITE_SPACE (' ')
| ('|')
WHITE_SPACE (' ')
identifier ('INVALID_ACCOUNT_ID')
, (',')
WHITE_SPACE (' ')
identifier ('AccountNotFoundErrorData')
> ('>')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getAccountBalance')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('accountID')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
| ('|')
identifier ('AccountNotFoundError')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Values for the error detail mapping should be passed as named arguments.')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('accountID')
WHITE_SPACE (' ')
< ('<')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Return an error with "InvalidAccountID" as the reason if the `accountID` is less than zero.')
WHITE_SPACE ('\n        ')
identifier ('AccountNotFoundError')
WHITE_SPACE (' ')
identifier ('accountNotFoundError')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                                            ')
error ('error')
( ('(')
identifier ('INVALID_ACCOUNT_ID')
, (',')
WHITE_SPACE (' ')
identifier ('accountID')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('accountID')
) (')')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('accountNotFoundError')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('accountID')
WHITE_SPACE (' ')
> ('>')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('100')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Return an error with "AccountNotFound" as the reason if the `accountID` is above hundred.')
WHITE_SPACE ('\n        ')
identifier ('AccountNotFoundError')
WHITE_SPACE (' ')
identifier ('accountNotFoundError')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                                            ')
error ('error')
( ('(')
identifier ('ACCOUNT_NOT_FOUND')
, (',')
WHITE_SPACE (' ')
identifier ('accountID')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('accountID')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Return the value if the `accountID` is in between zero and hundred inclusive.')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('600')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Define an error of the generic error type.')
WHITE_SPACE ('\n    ')
error ('error')
WHITE_SPACE (' ')
identifier ('simpleError')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
error ('error')
( ('(')
QUOTED_STRING_LITERAL ('"SimpleErrorType"')
, (',')
WHITE_SPACE (' ')
identifier ('message')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Simple error occured"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Print the error reason and the `message` field from the error detail.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The `.reason()` and `.detail()` built-in methods can be called on variables of')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the type `error` to retrieve the reason and details of the error.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `message` is an optional field in the generic error `Detail` record.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error: "')
, (',')
WHITE_SPACE (' ')
identifier ('simpleError')
. ('.')
identifier ('reason')
( ('(')
) (')')
, (',')
WHITE_SPACE ('\n                ')
QUOTED_STRING_LITERAL ('", Message: "')
, (',')
WHITE_SPACE (' ')
identifier ('simpleError')
. ('.')
identifier ('detail')
( ('(')
) (')')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getTypeId')
( ('(')
QUOTED_STRING_LITERAL ('"Joined"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Account type ID: "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error: "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
. ('.')
identifier ('reason')
( ('(')
) (')')
, (',')
WHITE_SPACE ('\n                   ')
QUOTED_STRING_LITERAL ('", Account type: "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('accountType')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getAccountBalance')
( ('(')
- ('-')
DECIMAL_INTEGER_LITERAL ('1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If the `result` is an `int`, then print the value.')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result2')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Account Balance: "')
, (',')
WHITE_SPACE (' ')
identifier ('result2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If an error is returned, print the reason and the account ID from the detail record.')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error: "')
, (',')
WHITE_SPACE (' ')
identifier ('result2')
. ('.')
identifier ('reason')
( ('(')
) (')')
, (',')
WHITE_SPACE ('\n                    ')
QUOTED_STRING_LITERAL ('", Account ID: "')
, (',')
WHITE_SPACE (' ')
identifier ('result2')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('accountID')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
