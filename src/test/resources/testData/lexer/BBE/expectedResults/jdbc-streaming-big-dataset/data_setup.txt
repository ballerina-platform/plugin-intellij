import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerinax')
/ ('/')
identifier ('java')
. ('.')
identifier ('jdbc')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('jdbc')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('testDB')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"jdbc:mysql://localhost:3306/testdb"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('username')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"test"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"test"')
WHITE_SPACE ('\n    ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create a table for data insertion.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"CREATE TABLE Data (id INT, field1 "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n        ')
QUOTED_STRING_LITERAL ('"VARCHAR(1024), field2 VARCHAR(1024));"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Create Data table"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create the stored procedure with row_count IN parameter.')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"CREATE PROCEDURE PopulateData(IN row_count INT) "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n       ')
QUOTED_STRING_LITERAL ('"BEGIN "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n           ')
QUOTED_STRING_LITERAL ('"DECLARE count INT; "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n           ')
QUOTED_STRING_LITERAL ('"DECLARE strDataEntry VARCHAR(1024); "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n           ')
QUOTED_STRING_LITERAL ('"SET count = 1; "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n           ')
QUOTED_STRING_LITERAL ('"SET strDataEntry =  ''; "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n           ')
QUOTED_STRING_LITERAL ('"WHILE count <= 1024 DO "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                       ')
QUOTED_STRING_LITERAL ('"SET strDataEntry = CONCAT(strDataEntry, 'x'); "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                       ')
QUOTED_STRING_LITERAL ('"SET count = count + 1; "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n           ')
QUOTED_STRING_LITERAL ('"END WHILE; "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n           ')
QUOTED_STRING_LITERAL ('"SET count = 1; "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n           ')
QUOTED_STRING_LITERAL ('"WHILE count <= row_count DO "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                       ')
QUOTED_STRING_LITERAL ('"INSERT INTO Data VALUES (count, strDataEntry, strDataEntry); "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                       ')
QUOTED_STRING_LITERAL ('"SET count = count + 1; "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n           ')
QUOTED_STRING_LITERAL ('"END WHILE; "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n           ')
QUOTED_STRING_LITERAL ('"SELECT strDataEntry; "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n       ')
QUOTED_STRING_LITERAL ('"END"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Stored procedure with IN param creation"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Call stored procedure. This inserts around 200MB of textual data.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// You can increment the row_count to increase the amount of data.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('retCall')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('call')
( ('(')
QUOTED_STRING_LITERAL ('"CALL PopulateData(?)"')
, (',')
WHITE_SPACE (' ')
( ('(')
) (')')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('100000')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('retCall')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
( ('(')
) (')')
| ('|')
table ('table')
< ('<')
record ('record')
WHITE_SPACE (' ')
{ ('{')
} ('}')
> ('>')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Call operation is successful"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
error ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('retCall')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Stored procedure call failed: "')
, (',')
WHITE_SPACE ('\n                     ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('detail')
( ('(')
) (')')
[ ('[')
QUOTED_STRING_LITERAL ('"message"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Function to handle the return value of the update remote function.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('handleUpdate')
( ('(')
identifier ('jdbc')
: (':')
identifier ('UpdateResult')
| ('|')
identifier ('jdbc')
: (':')
identifier ('Error')
WHITE_SPACE (' ')
identifier ('returned')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('message')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('returned')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('jdbc')
: (':')
identifier ('UpdateResult')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('message')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" status: "')
, (',')
WHITE_SPACE (' ')
identifier ('returned')
. ('.')
identifier ('updatedRowCount')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
error ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('returned')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('message')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" failed: "')
, (',')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('detail')
( ('(')
) (')')
[ ('[')
QUOTED_STRING_LITERAL ('"message"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
