import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('jsonutils')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerinax')
/ ('/')
identifier ('java')
. ('.')
identifier ('jdbc')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Create MySQL client.')
WHITE_SPACE ('\n')
identifier ('jdbc')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('testDB')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"jdbc:mysql://localhost:3306/testdb"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('username')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"test"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"test"')
WHITE_SPACE ('\n')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Create an HTTP service and bind it to a listener on port 9090.')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('dataService')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
( ('(')
DECIMAL_INTEGER_LITERAL ('9090')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('getData')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Invoke `select` remote function on the MySQL database client')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// and obtain a large amount of data.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('selectRet')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('select')
( ('(')
QUOTED_STRING_LITERAL ('"SELECT * FROM Data"')
, (',')
WHITE_SPACE (' ')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('selectRet')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
table ('table')
WHITE_SPACE (' ')
< ('<')
record ('record')
WHITE_SPACE (' ')
{ ('{')
} ('}')
> ('>')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Convert the obtained data to `json`. Note that this conversion')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// does not load all the data into memory.')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// The `table` can be converted to `xml` in a similar manner.')
WHITE_SPACE ('\n            ')
json ('json')
WHITE_SPACE (' ')
identifier ('jsonConversionRet')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('jsonutils')
: (':')
identifier ('fromTable')
( ('(')
identifier ('selectRet')
) (')')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Set the `json` payload to the response. This is streamed')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// to the client once the service is invoked.')
WHITE_SPACE ('\n            ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
< ('<')
@ ('@')
identifier ('untainted')
> ('>')
WHITE_SPACE (' ')
identifier ('jsonConversionRet')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Set a payload indicating an error in case the data retrieval')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// fails.')
WHITE_SPACE ('\n            ')
identifier ('res')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('STATUS_INTERNAL_SERVER_ERROR')
; (';')
WHITE_SPACE ('\n            ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Error"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Error occured while retrieving data "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"from the database"')
WHITE_SPACE (' ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Respond to the client.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('respondRet')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('res')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('respondRet')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Sending response failed"')
, (',')
WHITE_SPACE (' ')
identifier ('respondRet')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
