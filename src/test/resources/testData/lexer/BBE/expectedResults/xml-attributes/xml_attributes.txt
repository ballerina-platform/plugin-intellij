import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
xmlns ('xmlns')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"http://ballerina.com/aa"')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('ns0')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Creates an XML element, which has attributes that are bound to a namespace as well as ones that are not.')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('x1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('s')
XML_ALL_CHAR ('0')
XML_ALL_CHAR (':')
XML_ALL_CHAR ('b')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('k')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('s')
XML_ALL_CHAR ('0')
XML_ALL_CHAR (':')
XML_ALL_CHAR ('s')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('u')
XML_ALL_CHAR ('s')
XML_ALL_CHAR ('=')
XML_ALL_CHAR ('"')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('v')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('i')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('b')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('"')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('c')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('u')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('=')
XML_ALL_CHAR ('"')
XML_ALL_CHAR ('5')
XML_ALL_CHAR ('"')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('>')
XML_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x1')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// A single attribute that is bound to a namespace can be accessed using its qualified name. ')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x1')
@ ('@')
[ ('[')
identifier ('ns0')
: (':')
identifier ('status')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// An attribute can also be accessed using the string representation of the qualified name. ')
WHITE_SPACE ('\n    ')
string ('string')
? ('?')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('x1')
@ ('@')
[ ('[')
QUOTED_STRING_LITERAL ('"{http://ballerina.com/aa}status"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('s')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// An attribute that is not bound to a namespace can be accessed using the string representation of the name.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x1')
@ ('@')
[ ('[')
QUOTED_STRING_LITERAL ('"count"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Accesses an attribute using a dynamic name.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('attributeName')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"count"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x1')
@ ('@')
[ ('[')
identifier ('attributeName')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Updates an attribute.')
WHITE_SPACE ('\n    ')
identifier ('x1')
@ ('@')
[ ('[')
identifier ('ns0')
: (':')
identifier ('status')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Not Available"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x1')
@ ('@')
[ ('[')
identifier ('ns0')
: (':')
identifier ('status')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// It is possible to get all the attributes at once. However, this cannot be assigned to any variable.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x1')
@ ('@')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The`x1@` syntax can be used to get all the attributes of a singleton XML element as a map.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
> ('>')
? ('?')
WHITE_SPACE (' ')
identifier ('attributeMap')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('x1')
@ ('@')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('attributeMap')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('attributeMap')
[ ('[')
QUOTED_STRING_LITERAL ('"count"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// However, if we apply the `@` operator to a XML sequence, it will return NIL because only XML elements have attributes.')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('x2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('P')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('s')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('=')
XML_ALL_CHAR ('"')
XML_ALL_CHAR ('J')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('s')
XML_ALL_CHAR ('"')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('>')
XML_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('x3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('x1')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('x2')
; (';')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
> ('>')
? ('?')
WHITE_SPACE (' ')
identifier ('attributeMapOfSeq')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('x3')
@ ('@')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('attributeMapOfSeq')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
