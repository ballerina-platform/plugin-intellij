import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('mime')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Creates an endpoint for the client.')
WHITE_SPACE ('\n')
identifier ('http')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('clientEP')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"http://localhost:9092"')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Creates a listener for the service.')
WHITE_SPACE ('\n')
listener ('listener')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
WHITE_SPACE (' ')
identifier ('multipartEP')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
DECIMAL_INTEGER_LITERAL ('9090')
) (')')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/multiparts"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('multipartResponseEncoder')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
( ('(')
DECIMAL_INTEGER_LITERAL ('9092')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/encode_out_response"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('multipartSender')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE ('\n                                        ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('request')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Creates an enclosing entity to hold the child parts.')
WHITE_SPACE ('\n        ')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('parentPart')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Creates a child part with the JSON content.')
WHITE_SPACE ('\n        ')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('childPart1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
identifier ('childPart1')
. ('.')
identifier ('setJson')
( ('(')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"wso2"')
WHITE_SPACE (' ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Creates another child part with a file.')
WHITE_SPACE ('\n        ')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('childPart2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This file path is relative to where the Ballerina is running.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//If your file is located outside, please give the')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//absolute file path instead.')
WHITE_SPACE ('\n        ')
identifier ('childPart2')
. ('.')
identifier ('setFileAsEntityBody')
( ('(')
QUOTED_STRING_LITERAL ('"./files/test.xml"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('contentType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('TEXT_XML')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Creates an array to hold the child parts.')
WHITE_SPACE ('\n        ')
identifier ('mime')
: (':')
identifier ('Entity')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('childParts')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
identifier ('childPart1')
, (',')
WHITE_SPACE (' ')
identifier ('childPart2')
] (']')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Sets the child parts to the parent part.')
WHITE_SPACE ('\n        ')
identifier ('parentPart')
. ('.')
identifier ('setBodyParts')
( ('(')
identifier ('childParts')
, (',')
WHITE_SPACE ('\n            ')
identifier ('contentType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('MULTIPART_MIXED')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Creates an array to hold the parent part and set it to the response.')
WHITE_SPACE ('\n        ')
identifier ('mime')
: (':')
identifier ('Entity')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('immediatePartsToResponse')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
identifier ('parentPart')
] (']')
; (';')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('outResponse')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
identifier ('outResponse')
. ('.')
identifier ('setBodyParts')
( ('(')
identifier ('immediatePartsToResponse')
, (',')
WHITE_SPACE ('\n            ')
identifier ('contentType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('MULTIPART_FORM_DATA')
) (')')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('outResponse')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in responding "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Binds the listener to the service.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/multiparts"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('multipartResponseDecoder')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
identifier ('multipartEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/decode_in_response"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This resource accepts multipart responses.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('multipartReceiver')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE ('\n                                        ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('request')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('inResponse')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('returnResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEP')
-> ('->')
identifier ('get')
( ('(')
QUOTED_STRING_LITERAL ('"/multiparts/encode_out_response"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('returnResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Response')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Extracts the body parts from the response.')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('parentParts')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('returnResult')
. ('.')
identifier ('getBodyParts')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('parentParts')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('Entity')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('//Loops through body parts.')
WHITE_SPACE ('\n                ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('parentPart')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('parentParts')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('handleNestedParts')
( ('(')
identifier ('parentPart')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n                ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
QUOTED_STRING_LITERAL ('"Body Parts Received!"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('res')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n            ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
QUOTED_STRING_LITERAL ('"Connection error"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('res')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in responding "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Gets the child parts that are nested within the parent.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('handleNestedParts')
( ('(')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('parentPart')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('contentTypeOfParent')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('parentPart')
. ('.')
identifier ('getContentType')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('contentTypeOfParent')
. ('.')
identifier ('startsWith')
( ('(')
QUOTED_STRING_LITERAL ('"multipart/"')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('childParts')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('parentPart')
. ('.')
identifier ('getBodyParts')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('childParts')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('Entity')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Nested Parts Detected!"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('childPart')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('childParts')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('handleContent')
( ('(')
identifier ('childPart')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error retrieving child parts! "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                            ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('childParts')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//The content logic that handles the body parts')
WHITE_SPACE ('\n')
LINE_COMMENT ('//vary based on your requirement.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('handleContent')
( ('(')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('bodyPart')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('baseType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getBaseType')
( ('(')
identifier ('bodyPart')
. ('.')
identifier ('getContentType')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('APPLICATION_XML')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
WHITE_SPACE (' ')
|| ('||')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('TEXT_XML')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Extracts `xml` data from the body part.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bodyPart')
. ('.')
identifier ('getXml')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
xml ('xml')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
string ('string')
WHITE_SPACE (' ')
identifier ('strValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n             ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"XML data: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('strValue')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n             ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in parsing XML data"')
, (',')
WHITE_SPACE (' ')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('APPLICATION_JSON')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Extracts `json` data from the body part.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bodyPart')
. ('.')
identifier ('getJson')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
json ('json')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"JSON data: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('payload')
. ('.')
identifier ('toJsonString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n             ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in parsing JSON data"')
, (',')
WHITE_SPACE (' ')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('TEXT_PLAIN')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Extracts text data from the body part.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bodyPart')
. ('.')
identifier ('getText')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Text data: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in parsing text data"')
, (',')
WHITE_SPACE (' ')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('APPLICATION_PDF')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Extracts byte channel from the body part and save it as a file.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bodyPart')
. ('.')
identifier ('getByteChannel')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('ReadableByteChannel')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('WritableByteChannel')
WHITE_SPACE (' ')
identifier ('destinationChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n            ')
< ('<')
@ ('@')
identifier ('untainted')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('WritableByteChannel')
> ('>')
identifier ('io')
: (':')
identifier ('openWritableFile')
( ('(')
QUOTED_STRING_LITERAL ('"ReceivedFile.pdf"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('copy')
( ('(')
identifier ('payload')
, (',')
WHITE_SPACE (' ')
identifier ('destinationChannel')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"error occurred while performing copy "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
identifier ('close')
( ('(')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('close')
( ('(')
identifier ('destinationChannel')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in parsing byte channel :"')
, (',')
WHITE_SPACE (' ')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Gets the base type from a given content type.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getBaseType')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('contentType')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('getMediaType')
( ('(')
identifier ('contentType')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('MediaType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('result')
. ('.')
identifier ('getBaseType')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
panic ('panic')
WHITE_SPACE (' ')
identifier ('result')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Copies the content from the source channel to the destination channel.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('copy')
( ('(')
identifier ('io')
: (':')
identifier ('ReadableByteChannel')
WHITE_SPACE (' ')
identifier ('src')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('WritableByteChannel')
WHITE_SPACE (' ')
identifier ('dst')
) (')')
WHITE_SPACE ('\n                ')
returns ('returns')
WHITE_SPACE (' ')
error ('error')
? ('?')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
while ('while')
WHITE_SPACE (' ')
( ('(')
BOOLEAN_LITERAL ('true')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Operation attempts to read a maximum of 1000 bytes.')
WHITE_SPACE ('\n        ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
| ('|')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('Error')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('src')
. ('.')
identifier ('read')
( ('(')
DECIMAL_INTEGER_LITERAL ('1000')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('EofError')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
break ('break')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
return ('return')
WHITE_SPACE (' ')
< ('<')
@ ('@')
identifier ('untained')
> ('>')
WHITE_SPACE (' ')
identifier ('result')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('//Writes the given content into the channel.')
WHITE_SPACE ('\n            ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n            ')
while ('while')
WHITE_SPACE (' ')
( ('(')
identifier ('i')
WHITE_SPACE (' ')
< ('<')
WHITE_SPACE (' ')
identifier ('result')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
var ('var')
WHITE_SPACE (' ')
identifier ('result2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('dst')
. ('.')
identifier ('write')
( ('(')
identifier ('result')
, (',')
WHITE_SPACE (' ')
identifier ('i')
) (')')
; (';')
WHITE_SPACE ('\n                ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result2')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
return ('return')
WHITE_SPACE (' ')
identifier ('result2')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('result2')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
return ('return')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Closes the byte channel.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('close')
( ('(')
identifier ('io')
: (':')
identifier ('ReadableByteChannel')
| ('|')
identifier ('io')
: (':')
identifier ('WritableByteChannel')
WHITE_SPACE (' ')
identifier ('ch')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
abstract ('abstract')
WHITE_SPACE (' ')
object ('object')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('close')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
error ('error')
? ('?')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
identifier ('channelResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('ch')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('cr')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('channelResult')
. ('.')
identifier ('close')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('cr')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while closing the channel: "')
, (',')
WHITE_SPACE (' ')
identifier ('cr')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
