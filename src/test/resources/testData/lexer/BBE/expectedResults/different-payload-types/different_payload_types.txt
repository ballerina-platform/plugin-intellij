import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('mime')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Client endpoint.')
WHITE_SPACE ('\n')
identifier ('http')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('clientEP')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"http://localhost:9091/backEndService"')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Service to test HTTP client remote functions with different payload types.')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('actionService')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
( ('(')
DECIMAL_INTEGER_LITERAL ('9090')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('messageUsage')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//GET remote function without any payload.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEP')
-> ('->')
identifier ('get')
( ('(')
QUOTED_STRING_LITERAL ('"/greeting"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('handleResponse')
( ('(')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//GET remote function with request as message.')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('request')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEP')
-> ('->')
identifier ('get')
( ('(')
QUOTED_STRING_LITERAL ('"/greeting"')
, (',')
WHITE_SPACE (' ')
identifier ('message')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('request')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('handleResponse')
( ('(')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//POST remote function without any payload.')
WHITE_SPACE ('\n        ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEP')
-> ('->')
identifier ('post')
( ('(')
QUOTED_STRING_LITERAL ('"/echo"')
, (',')
WHITE_SPACE (' ')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('handleResponse')
( ('(')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//POST remote function with text as payload.')
WHITE_SPACE ('\n        ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEP')
-> ('->')
identifier ('post')
( ('(')
QUOTED_STRING_LITERAL ('"/echo"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Sample Text"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('handleResponse')
( ('(')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//POST remote function with `xml` as payload.')
WHITE_SPACE ('\n        ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEP')
-> ('->')
identifier ('post')
( ('(')
QUOTED_STRING_LITERAL ('"/echo"')
, (',')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('y')
XML_ALL_CHAR ('y')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('S')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('p')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('e')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('X')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('y')
XML_ALL_CHAR ('y')
XML_ALL_CHAR ('>')
XML_LITERAL_END ('`')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('handleResponse')
( ('(')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//POST remote function with `json` as payload.')
WHITE_SPACE ('\n        ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEP')
-> ('->')
identifier ('post')
( ('(')
QUOTED_STRING_LITERAL ('"/echo"')
, (',')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"apple"')
, (',')
WHITE_SPACE (' ')
identifier ('color')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"red"')
WHITE_SPACE (' ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('handleResponse')
( ('(')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//POST remote function with `byte[]` as payload.')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('textVal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Sample Text"')
; (';')
WHITE_SPACE ('\n        ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('binaryValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('textVal')
. ('.')
identifier ('toBytes')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEP')
-> ('->')
identifier ('post')
( ('(')
QUOTED_STRING_LITERAL ('"/echo"')
, (',')
WHITE_SPACE (' ')
identifier ('binaryValue')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('handleResponse')
( ('(')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//Get a byte channel to a given file.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('bChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('openReadableFile')
( ('(')
QUOTED_STRING_LITERAL ('"./files/logo.png"')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('bChannel')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('ReadableByteChannel')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('//POST remote function with byte channel as payload. Since the file path is static')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('//`untaint` is used to denote that the byte channel is trusted .')
WHITE_SPACE ('\n            ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEP')
-> ('->')
identifier ('post')
( ('(')
QUOTED_STRING_LITERAL ('"/image"')
, (',')
WHITE_SPACE (' ')
< ('<')
@ ('@')
identifier ('untainted')
> ('>')
WHITE_SPACE (' ')
identifier ('bChannel')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('handleResponse')
( ('(')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n\n            ')
LINE_COMMENT ('//Create a JSON body part.')
WHITE_SPACE ('\n            ')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('part1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n            ')
identifier ('part1')
. ('.')
identifier ('setJson')
( ('(')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Jane"')
WHITE_SPACE (' ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n            ')
LINE_COMMENT ('//Create a text body part.')
WHITE_SPACE ('\n            ')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('part2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n            ')
identifier ('part2')
. ('.')
identifier ('setText')
( ('(')
QUOTED_STRING_LITERAL ('"Hello"')
) (')')
; (';')
WHITE_SPACE ('\n\n            ')
LINE_COMMENT ('//POST remote function with body parts as payload.')
WHITE_SPACE ('\n            ')
identifier ('mime')
: (':')
identifier ('Entity')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('bodyParts')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
identifier ('part1')
, (',')
WHITE_SPACE (' ')
identifier ('part2')
] (']')
; (';')
WHITE_SPACE ('\n            ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEP')
-> ('->')
identifier ('post')
( ('(')
QUOTED_STRING_LITERAL ('"/echo"')
, (',')
WHITE_SPACE (' ')
identifier ('bodyParts')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('handleResponse')
( ('(')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
QUOTED_STRING_LITERAL ('"Client actions successfully executed!"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('handleError')
( ('(')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n            ')
identifier ('res')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n            ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
< ('<')
@ ('@')
identifier ('untainted')
> ('>')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('bChannel')
. ('.')
identifier ('detail')
( ('(')
) (')')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('res')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('handleError')
( ('(')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Back end service that send out different payload types as response.')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('backEndService')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
( ('(')
DECIMAL_INTEGER_LITERAL ('9091')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/greeting"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('replyText')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
error ('error')
? ('?')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
QUOTED_STRING_LITERAL ('"Hello"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in responding to caller"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"POST"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/echo"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('directResponse')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('req')
. ('.')
identifier ('hasHeader')
( ('(')
QUOTED_STRING_LITERAL ('"content-type"')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
string ('string')
WHITE_SPACE (' ')
identifier ('baseType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getBaseType')
( ('(')
identifier ('req')
. ('.')
identifier ('getContentType')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('TEXT_PLAIN')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
var ('var')
WHITE_SPACE (' ')
identifier ('returnValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('req')
. ('.')
identifier ('getTextPayload')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n                ')
string ('string')
WHITE_SPACE (' ')
identifier ('textValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('""')
; (';')
WHITE_SPACE ('\n                ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('returnValue')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('textValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('returnValue')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('textValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('returnValue')
. ('.')
identifier ('detail')
( ('(')
) (')')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('message')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n                ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
< ('<')
@ ('@')
identifier ('untainted')
> ('>')
WHITE_SPACE (' ')
identifier ('textValue')
) (')')
; (';')
WHITE_SPACE ('\n                ')
identifier ('handleError')
( ('(')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('APPLICATION_XML')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
var ('var')
WHITE_SPACE (' ')
identifier ('xmlValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('req')
. ('.')
identifier ('getXmlPayload')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n                ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('xmlValue')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
xml ('xml')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
< ('<')
@ ('@')
identifier ('untainted')
> ('>')
WHITE_SPACE (' ')
identifier ('xmlValue')
) (')')
; (';')
WHITE_SPACE ('\n                    ')
identifier ('handleError')
( ('(')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('sendErrorMsg')
( ('(')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('xmlValue')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('APPLICATION_JSON')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
var ('var')
WHITE_SPACE (' ')
identifier ('jsonValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('req')
. ('.')
identifier ('getJsonPayload')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n                ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('jsonValue')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
json ('json')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
< ('<')
@ ('@')
identifier ('untainted')
> ('>')
WHITE_SPACE (' ')
identifier ('jsonValue')
) (')')
; (';')
WHITE_SPACE ('\n                    ')
identifier ('handleError')
( ('(')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('sendErrorMsg')
( ('(')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('jsonValue')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('APPLICATION_OCTET_STREAM')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
var ('var')
WHITE_SPACE (' ')
identifier ('blobValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('req')
. ('.')
identifier ('getBinaryPayload')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n                ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('blobValue')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
byte ('byte')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
< ('<')
@ ('@')
identifier ('untainted')
> ('>')
WHITE_SPACE (' ')
identifier ('blobValue')
) (')')
; (';')
WHITE_SPACE ('\n                    ')
identifier ('handleError')
( ('(')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('sendErrorMsg')
( ('(')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('blobValue')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('MULTIPART_FORM_DATA')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
var ('var')
WHITE_SPACE (' ')
identifier ('bodyParts')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('req')
. ('.')
identifier ('getBodyParts')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n                ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('bodyParts')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('Entity')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
< ('<')
@ ('@')
identifier ('untainted')
> ('>')
WHITE_SPACE (' ')
identifier ('bodyParts')
) (')')
; (';')
WHITE_SPACE ('\n                    ')
identifier ('handleError')
( ('(')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('sendErrorMsg')
( ('(')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('bodyParts')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('handleError')
( ('(')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"POST"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/image"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('sendByteChannel')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('bytes')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('req')
. ('.')
identifier ('getBinaryPayload')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('bytes')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
byte ('byte')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n            ')
identifier ('response')
. ('.')
identifier ('setBinaryPayload')
( ('(')
< ('<')
@ ('@')
identifier ('untainted')
> ('>')
WHITE_SPACE (' ')
identifier ('bytes')
, (',')
WHITE_SPACE ('\n                                        ')
identifier ('contentType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('IMAGE_PNG')
) (')')
; (';')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('handleError')
( ('(')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('sendErrorMsg')
( ('(')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('bytes')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Handle response data received from HTTP client remote functions.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('handleResponse')
( ('(')
identifier ('http')
: (':')
identifier ('Response')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('response')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('response')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Response')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Print the content type of the received data.')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('response')
. ('.')
identifier ('hasHeader')
( ('(')
QUOTED_STRING_LITERAL ('"content-type"')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
string ('string')
WHITE_SPACE (' ')
identifier ('baseType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getBaseType')
( ('(')
identifier ('response')
. ('.')
identifier ('getContentType')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('TEXT_PLAIN')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('response')
. ('.')
identifier ('getTextPayload')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n                ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Text data: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in parsing text data"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('APPLICATION_XML')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('response')
. ('.')
identifier ('getXmlPayload')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n                ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
xml ('xml')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
string ('string')
WHITE_SPACE (' ')
identifier ('strValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n                    ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Xml data: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('strValue')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in parsing xml data"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('APPLICATION_JSON')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('response')
. ('.')
identifier ('getJsonPayload')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n                ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
json ('json')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Json data: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('payload')
. ('.')
identifier ('toJsonString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in parsing json data"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('APPLICATION_OCTET_STREAM')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('response')
. ('.')
identifier ('getTextPayload')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n                ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Response contains binary data: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in parsing binary data"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('MULTIPART_FORM_DATA')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Response contains body parts: "')
) (')')
; (';')
WHITE_SPACE ('\n                ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('response')
. ('.')
identifier ('getBodyParts')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n                ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('Entity')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('handleBodyParts')
( ('(')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in parsing multipart data"')
, (',')
WHITE_SPACE ('\n                                    ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('IMAGE_PNG')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Response contains an image"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Entity body is not available"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
identifier ('response')
. ('.')
identifier ('reason')
( ('(')
) (')')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('sendErrorMsg')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
error ('error')
WHITE_SPACE (' ')
identifier ('err')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n    ')
identifier ('res')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n    ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
< ('<')
@ ('@')
identifier ('untainted')
> ('>')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('detail')
( ('(')
) (')')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('res')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleError')
( ('(')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('handleError')
( ('(')
error ('error')
? ('?')
WHITE_SPACE (' ')
identifier ('result')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
identifier ('result')
. ('.')
identifier ('reason')
( ('(')
) (')')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Get the base type from a given content type.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getBaseType')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('contentType')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('getMediaType')
( ('(')
identifier ('contentType')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('MediaType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('result')
. ('.')
identifier ('getBaseType')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
panic ('panic')
WHITE_SPACE (' ')
identifier ('result')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Loop through body parts and print its content.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('handleBodyParts')
( ('(')
identifier ('mime')
: (':')
identifier ('Entity')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('bodyParts')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('bodyPart')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('bodyParts')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('baseType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getBaseType')
( ('(')
identifier ('bodyPart')
. ('.')
identifier ('getContentType')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('APPLICATION_JSON')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bodyPart')
. ('.')
identifier ('getJson')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
json ('json')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Json Part: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('payload')
. ('.')
identifier ('toJsonString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
identifier ('payload')
. ('.')
identifier ('reason')
( ('(')
) (')')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('TEXT_PLAIN')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bodyPart')
. ('.')
identifier ('getText')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Text Part: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
identifier ('payload')
. ('.')
identifier ('reason')
( ('(')
) (')')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
