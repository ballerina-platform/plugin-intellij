import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('runtime')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Employee')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('id')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Defines a `stream`, which is constrained by the `Employee` type.')
WHITE_SPACE ('\n    ')
stream ('stream')
< ('<')
identifier ('Employee')
> ('>')
WHITE_SPACE (' ')
identifier ('employeeStream')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Subscribes to the `employeeStream` using a function that accepts `Employee` values.')
WHITE_SPACE ('\n    ')
identifier ('employeeStream')
. ('.')
identifier ('subscribe')
( ('(')
identifier ('printEmployeeName')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Publishes `Employee` values to the `stream`.')
WHITE_SPACE ('\n    ')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('e1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('id')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Jane"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('e2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('id')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Anne"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('e3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('id')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('employeeStream')
. ('.')
identifier ('publish')
( ('(')
identifier ('e1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('employeeStream')
. ('.')
identifier ('publish')
( ('(')
identifier ('e2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('employeeStream')
. ('.')
identifier ('publish')
( ('(')
identifier ('e3')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Allows receipt by subscribers. The `printEmployeeName()` function should be invoked for each published value.')
WHITE_SPACE ('\n    ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('1000')
) (')')
; (';')
WHITE_SPACE ('\n\n\n    ')
LINE_COMMENT ('// Defines a stream, which is constrained by the `float` type.')
WHITE_SPACE ('\n    ')
stream ('stream')
< ('<')
float ('float')
> ('>')
WHITE_SPACE (' ')
identifier ('temperatureStream')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Subscribes to the `temperatureStream` using a function that accepts `float` values.')
WHITE_SPACE ('\n    ')
identifier ('temperatureStream')
. ('.')
identifier ('subscribe')
( ('(')
identifier ('printTemperature')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Publishes `float` values to the stream indicating the temperature.')
WHITE_SPACE ('\n    ')
identifier ('temperatureStream')
. ('.')
identifier ('publish')
( ('(')
DECIMAL_FLOATING_POINT_NUMBER ('28.0')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('temperatureStream')
. ('.')
identifier ('publish')
( ('(')
DECIMAL_FLOATING_POINT_NUMBER ('30.1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('temperatureStream')
. ('.')
identifier ('publish')
( ('(')
DECIMAL_FLOATING_POINT_NUMBER ('29.5')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Waits for the subscriber to receive the values. The `printTemperature()` function ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// should be invoked for each published value.')
WHITE_SPACE ('\n    ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('1000')
) (')')
; (';')
WHITE_SPACE ('\n\n\n    ')
LINE_COMMENT ('// Defines a `stream`, which accepts values of the `anydata` type.')
WHITE_SPACE ('\n    ')
stream ('stream')
< ('<')
anydata ('anydata')
> ('>')
WHITE_SPACE (' ')
identifier ('updateStream')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Subscribes to the `stream` using a function that accepts values of the `anydata` type.')
WHITE_SPACE ('\n    ')
identifier ('updateStream')
. ('.')
identifier ('subscribe')
( ('(')
identifier ('printEvent')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Publishes values to the `stream`.')
WHITE_SPACE ('\n    ')
identifier ('updateStream')
. ('.')
identifier ('publish')
( ('(')
QUOTED_STRING_LITERAL ('"Hello Ballerina!"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('updateStream')
. ('.')
identifier ('publish')
( ('(')
DECIMAL_FLOATING_POINT_NUMBER ('1.0')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('updateStream')
. ('.')
identifier ('publish')
( ('(')
identifier ('e1')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Wait for the subscriber to receive the values. The `printEvent()` function should be invoked for each published')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// value.')
WHITE_SPACE ('\n    ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('1000')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function accepts `Employee` values and is used to subscribe to a stream.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('printEmployeeName')
( ('(')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('employee')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Employee event received for Employee Name: "')
, (',')
WHITE_SPACE ('\n        ')
identifier ('employee')
. ('.')
identifier ('name')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function accepts `float` values and is used to subscribe to a stream.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('printTemperature')
( ('(')
float ('float')
WHITE_SPACE (' ')
identifier ('temperature')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Temperature event received: "')
, (',')
WHITE_SPACE ('\n        ')
identifier ('temperature')
. ('.')
identifier ('toString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function accepts values of `anydata` type and is used to subscribe to a stream.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('printEvent')
( ('(')
anydata ('anydata')
WHITE_SPACE (' ')
identifier ('event')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Event received: "')
, (',')
WHITE_SPACE (' ')
identifier ('event')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
