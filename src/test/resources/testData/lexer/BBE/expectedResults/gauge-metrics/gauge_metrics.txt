import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('observe')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Create a gauge as a global variable in the service with optional field description,')
WHITE_SPACE ('\n')
LINE_COMMENT ('//and default statistics configurations = { timeWindow: 600000, buckets: 5,')
WHITE_SPACE ('\n')
LINE_COMMENT ('// percentiles: [0.33, 0.5, 0.66, 0.99] }.')
WHITE_SPACE ('\n')
identifier ('observe')
: (':')
identifier ('Gauge')
WHITE_SPACE (' ')
identifier ('globalGauge')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"global_gauge"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Global gauge defined"')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Make sure you start the service with the '--b7a.observability.enabled=true' property or with metrics enabled.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/online-store-service"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('onlineStoreService')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
( ('(')
DECIMAL_INTEGER_LITERAL ('9090')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/make-order"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('makeOrder')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"------------------------------------------"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Incrementing the global gauge defined by 15.0.')
WHITE_SPACE ('\n        ')
identifier ('globalGauge')
. ('.')
identifier ('increment')
( ('(')
DECIMAL_FLOATING_POINT_NUMBER ('15.0')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Log the current state of global gauge.')
WHITE_SPACE ('\n        ')
identifier ('printGauge')
( ('(')
identifier ('globalGauge')
) (')')
; (';')
WHITE_SPACE ('\n\n\n        ')
LINE_COMMENT ('//Create a gauge with simply a name, and default statistics configurations.')
WHITE_SPACE ('\n        ')
identifier ('observe')
: (':')
identifier ('Gauge')
WHITE_SPACE (' ')
identifier ('localGauge')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"local_operations"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Increment the local gauge by default value 1.0.')
WHITE_SPACE ('\n        ')
identifier ('localGauge')
. ('.')
identifier ('increment')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Increment the value of the gauge by 20.')
WHITE_SPACE ('\n        ')
identifier ('localGauge')
. ('.')
identifier ('increment')
( ('(')
DECIMAL_FLOATING_POINT_NUMBER ('20.0')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Decrement the local gauge by default value 1.0.')
WHITE_SPACE ('\n        ')
identifier ('localGauge')
. ('.')
identifier ('decrement')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Decrement the value of the gauge by 20.')
WHITE_SPACE ('\n        ')
identifier ('localGauge')
. ('.')
identifier ('decrement')
( ('(')
DECIMAL_FLOATING_POINT_NUMBER ('10.0')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Log the current state of local gauge.')
WHITE_SPACE ('\n        ')
identifier ('printGauge')
( ('(')
identifier ('localGauge')
) (')')
; (';')
WHITE_SPACE ('\n\n\n        ')
LINE_COMMENT ('//Create a gauge with optional fields description, and tags defined.')
WHITE_SPACE ('\n        ')
identifier ('observe')
: (':')
identifier ('Gauge')
WHITE_SPACE (' ')
identifier ('registeredGaugeWithTags')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"registered_gauge_with_tags"')
, (',')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"RegisteredGauge"')
, (',')
WHITE_SPACE ('\n            ')
{ ('{')
WHITE_SPACE (' ')
identifier ('property')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"gaugeProperty"')
, (',')
WHITE_SPACE (' ')
identifier ('gaugeType')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"RegisterType"')
WHITE_SPACE (' ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//Register the gauge instance, therefore it is stored in the global registry and can be reported to the')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//metrics server such as Prometheus. Additionally, this operation will register to the global registry for the')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//first invocation and will throw an error if there is already a registration of different metrics instance')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//or type. And subsequent invocations of register() will simply retrieve the stored metrics instance')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//for the provided name and tags fields, and use that instance for the subsequent operations on the')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//counter instance.')
WHITE_SPACE ('\n        ')
error ('error')
? ('?')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('registeredGaugeWithTags')
. ('.')
identifier ('register')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in registering gauge"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//Set the value of the gauge with the new value.')
WHITE_SPACE ('\n        ')
identifier ('registeredGaugeWithTags')
. ('.')
identifier ('increment')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
float ('float')
WHITE_SPACE (' ')
identifier ('value')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('registeredGaugeWithTags')
. ('.')
identifier ('getValue')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
float ('float')
WHITE_SPACE (' ')
identifier ('newValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('value')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('12')
; (';')
WHITE_SPACE ('\n        ')
identifier ('registeredGaugeWithTags')
. ('.')
identifier ('setValue')
( ('(')
identifier ('newValue')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Log the current state of registered gauge with tags.')
WHITE_SPACE ('\n        ')
identifier ('printGauge')
( ('(')
identifier ('registeredGaugeWithTags')
) (')')
; (';')
WHITE_SPACE ('\n\n\n        ')
LINE_COMMENT ('//Create a gauge with statistics disabled by passing empty statistics config array.')
WHITE_SPACE ('\n        ')
identifier ('observe')
: (':')
identifier ('StatisticConfig')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('statsConfigs')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
] (']')
; (';')
WHITE_SPACE ('\n        ')
identifier ('observe')
: (':')
identifier ('Gauge')
WHITE_SPACE (' ')
identifier ('gaugeWithNoStats')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"gauge_with_no_stats"')
, (',')
WHITE_SPACE ('\n                                        ')
QUOTED_STRING_LITERAL ('"Some description"')
, (',')
WHITE_SPACE (' ')
( ('(')
) (')')
, (',')
WHITE_SPACE (' ')
identifier ('statsConfigs')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('gaugeWithNoStats')
. ('.')
identifier ('setValue')
( ('(')
DECIMAL_INTEGER_LITERAL ('100')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('printGauge')
( ('(')
identifier ('gaugeWithNoStats')
) (')')
; (';')
WHITE_SPACE ('\n\n\n        ')
LINE_COMMENT ('//Create gauge with custom statistics config.')
WHITE_SPACE ('\n        ')
identifier ('observe')
: (':')
identifier ('StatisticConfig')
WHITE_SPACE (' ')
identifier ('config')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('timeWindow')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('30000')
, (',')
WHITE_SPACE ('\n                    ')
identifier ('percentiles')
: (':')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_FLOATING_POINT_NUMBER ('0.33')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('0.5')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('0.9')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('0.99')
] (']')
, (',')
WHITE_SPACE (' ')
identifier ('buckets')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n        ')
identifier ('statsConfigs')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('config')
; (';')
WHITE_SPACE ('\n        ')
identifier ('observe')
: (':')
identifier ('Gauge')
WHITE_SPACE (' ')
identifier ('gaugeWithCustomStats')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"gauge_with_custom_stats"')
, (',')
WHITE_SPACE ('\n                                        ')
QUOTED_STRING_LITERAL ('"Some description"')
, (',')
WHITE_SPACE (' ')
( ('(')
) (')')
, (',')
WHITE_SPACE (' ')
identifier ('statsConfigs')
) (')')
; (';')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n        ')
while ('while')
WHITE_SPACE (' ')
( ('(')
identifier ('i')
WHITE_SPACE (' ')
< ('<')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('6')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('gaugeWithCustomStats')
. ('.')
identifier ('setValue')
( ('(')
DECIMAL_FLOATING_POINT_NUMBER ('100.0')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
identifier ('i')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Log the current state of registered gauge with tags.')
WHITE_SPACE ('\n        ')
identifier ('printGauge')
( ('(')
identifier ('gaugeWithCustomStats')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"------------------------------------------"')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//Send response to the client.')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Use a util method to set a string payload.')
WHITE_SPACE ('\n        ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
QUOTED_STRING_LITERAL ('"Order Processed!"')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Send the response back to the caller.')
WHITE_SPACE ('\n        ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('res')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('printGauge')
( ('(')
identifier ('observe')
: (':')
identifier ('Gauge')
WHITE_SPACE (' ')
identifier ('gauge')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//Get the statistics snapshot of the gauge.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"Gauge - "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('gauge')
. ('.')
identifier ('name')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" Snapshot: "')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('observe')
: (':')
identifier ('Snapshot')
[ ('[')
] (']')
? ('?')
WHITE_SPACE (' ')
identifier ('snapshots')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('gauge')
. ('.')
identifier ('getSnapshot')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
json ('json')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('snapshotAsAJson')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
json ('json')
. ('.')
identifier ('constructFrom')
( ('(')
identifier ('snapshots')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
identifier ('snapshotAsAJson')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
json ('json')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('snapshotAsAJson')
. ('.')
identifier ('toJsonString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//Get the current value of the gauge.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Gauge - "')
, (',')
WHITE_SPACE (' ')
identifier ('gauge')
. ('.')
identifier ('name')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" Current Value: "')
WHITE_SPACE ('\n        ')
, (',')
WHITE_SPACE (' ')
identifier ('gauge')
. ('.')
identifier ('getValue')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
