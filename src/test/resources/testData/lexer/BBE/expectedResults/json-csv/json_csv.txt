import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Convert a `map<json>` value to an array of Strings.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// Return the result as a tuple, which contains the headers and fields.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getFields')
( ('(')
map ('map')
< ('<')
json ('json')
> ('>')
WHITE_SPACE (' ')
identifier ('rec')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
[ ('[')
string ('string')
[ ('[')
] (']')
, (',')
WHITE_SPACE (' ')
string ('string')
[ ('[')
] (']')
] (']')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('fields')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
] (']')
; (';')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('field')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('rec')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('fields')
[ ('[')
identifier ('fields')
. ('.')
identifier ('length')
( ('(')
) (')')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('field')
. ('.')
identifier ('toString')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
[ ('[')
identifier ('rec')
. ('.')
identifier ('keys')
( ('(')
) (')')
, (',')
WHITE_SPACE (' ')
identifier ('fields')
] (']')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Writes `json` content to CSV.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('writeCsv')
( ('(')
json ('json')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('content')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('path')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
error ('error')
? ('?')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('WritableCSVChannel')
WHITE_SPACE (' ')
identifier ('csvch')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('openWritableCsvFile')
( ('(')
identifier ('path')
) (')')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('recIndex')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('recLen')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('content')
. ('.')
identifier ('length')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
while ('while')
WHITE_SPACE (' ')
( ('(')
identifier ('recIndex')
WHITE_SPACE (' ')
< ('<')
WHITE_SPACE (' ')
identifier ('recLen')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
[ ('[')
string ('string')
WHITE_SPACE (' ')
[ ('[')
] (']')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
[ ('[')
] (']')
] (']')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getFields')
( ('(')
< ('<')
map ('map')
< ('<')
json ('json')
> ('>')
> ('>')
WHITE_SPACE (' ')
identifier ('content')
[ ('[')
identifier ('recIndex')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
[ ('[')
identifier ('headers')
, (',')
WHITE_SPACE (' ')
identifier ('fields')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('recIndex')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('//We ignore the result as this would mean a `nil` return')
WHITE_SPACE ('\n            ')
check ('check')
WHITE_SPACE (' ')
identifier ('csvch')
. ('.')
identifier ('write')
( ('(')
identifier ('headers')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
check ('check')
WHITE_SPACE (' ')
identifier ('csvch')
. ('.')
identifier ('write')
( ('(')
identifier ('fields')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('recIndex')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('recIndex')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The sample `json`, which will be written.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('sample')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"employees"')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
QUOTED_STRING_LITERAL ('"employee"')
: (':')
WHITE_SPACE (' ')
[ ('[')
WHITE_SPACE ('\n                    ')
{ ('{')
WHITE_SPACE ('\n                        ')
QUOTED_STRING_LITERAL ('"id"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"1"')
, (',')
WHITE_SPACE ('\n                        ')
QUOTED_STRING_LITERAL ('"firstName"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Tom"')
, (',')
WHITE_SPACE ('\n                        ')
QUOTED_STRING_LITERAL ('"lastName"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Cruise"')
, (',')
WHITE_SPACE ('\n                        ')
QUOTED_STRING_LITERAL ('"photo"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"https://ballerina-team/profile/3737.jpg"')
WHITE_SPACE ('\n                    ')
} ('}')
, (',')
WHITE_SPACE ('\n                    ')
{ ('{')
WHITE_SPACE ('\n                        ')
QUOTED_STRING_LITERAL ('"id"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"2"')
, (',')
WHITE_SPACE ('\n                        ')
QUOTED_STRING_LITERAL ('"firstName"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Maria"')
, (',')
WHITE_SPACE ('\n                        ')
QUOTED_STRING_LITERAL ('"lastName"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Sharapova"')
, (',')
WHITE_SPACE ('\n                        ')
QUOTED_STRING_LITERAL ('"photo"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"https://ballerina-team/profile/5676.jpg"')
WHITE_SPACE ('\n                    ')
} ('}')
, (',')
WHITE_SPACE ('\n                    ')
{ ('{')
WHITE_SPACE ('\n                        ')
QUOTED_STRING_LITERAL ('"id"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"3"')
, (',')
WHITE_SPACE ('\n                        ')
QUOTED_STRING_LITERAL ('"firstName"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"James"')
, (',')
WHITE_SPACE ('\n                        ')
QUOTED_STRING_LITERAL ('"lastName"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Bond"')
, (',')
WHITE_SPACE ('\n                        ')
QUOTED_STRING_LITERAL ('"photo"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"https://ballerina-team/profile/6776.jpg"')
WHITE_SPACE ('\n                    ')
} ('}')
WHITE_SPACE ('\n                ')
] (']')
WHITE_SPACE ('\n            ')
} ('}')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Writes JSON into a CSV.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('path')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"./files/sample.csv"')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Specifies the JSON array, which should be transformed into CSV.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Also, provides the location the CSV should be written.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('writeCsv')
( ('(')
< ('<')
json ('json')
[ ('[')
] (']')
> ('>')
WHITE_SPACE (' ')
identifier ('sample')
. ('.')
identifier ('employees')
. ('.')
identifier ('employee')
, (',')
WHITE_SPACE (' ')
identifier ('path')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while writing csv record :"')
, (',')
WHITE_SPACE ('\n                        ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"json record successfully transformed to a csv, file could"')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                    ')
QUOTED_STRING_LITERAL ('" be found in "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('path')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
