import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('SampleError')
WHITE_SPACE (' ')
error ('error')
WHITE_SPACE (' ')
< ('<')
string ('string')
, (',')
WHITE_SPACE (' ')
identifier ('Foo')
> ('>')
; (';')
WHITE_SPACE ('\n\n')
const ('const')
WHITE_SPACE (' ')
identifier ('INVALID_ID')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Invalid ID"')
; (';')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('InvalidIdError')
WHITE_SPACE (' ')
error ('error')
WHITE_SPACE (' ')
< ('<')
identifier ('INVALID_ID')
, (',')
WHITE_SPACE (' ')
identifier ('InvalidIdDetail')
> ('>')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Foo')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
LEFT_CLOSED_RECORD_DELIMITER ('{|')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('message')
? ('?')
; (';')
WHITE_SPACE ('\n    ')
error ('error')
WHITE_SPACE (' ')
identifier ('cause')
? ('?')
; (';')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('fatal')
; (';')
WHITE_SPACE ('\n')
RIGHT_CLOSED_RECORD_DELIMITER ('|}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('InvalidIdDetail')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
LEFT_CLOSED_RECORD_DELIMITER ('{|')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('message')
? ('?')
; (';')
WHITE_SPACE ('\n    ')
error ('error')
WHITE_SPACE (' ')
identifier ('cause')
? ('?')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('id')
; (';')
WHITE_SPACE ('\n')
RIGHT_CLOSED_RECORD_DELIMITER ('|}')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
string ('string')
] (']')
WHITE_SPACE (' ')
identifier ('v1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"Sample String"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Sample String 2"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Foo')
WHITE_SPACE (' ')
identifier ('v2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('message')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"A"')
, (',')
WHITE_SPACE (' ')
identifier ('fatal')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
error ('error')
WHITE_SPACE (' ')
identifier ('e1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
error ('error')
( ('(')
QUOTED_STRING_LITERAL ('"Generic Error"')
, (',')
WHITE_SPACE (' ')
identifier ('message')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Failed"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('SampleError')
WHITE_SPACE (' ')
identifier ('e2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
error ('error')
( ('(')
QUOTED_STRING_LITERAL ('"Sample Error"')
, (',')
WHITE_SPACE ('  ')
identifier ('message')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('  ')
QUOTED_STRING_LITERAL ('"Fatal"')
, (',')
WHITE_SPACE (' ')
identifier ('fatal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('InvalidIdError')
WHITE_SPACE (' ')
identifier ('e3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('InvalidIdError')
( ('(')
identifier ('id')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"33456"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('basicMatch')
( ('(')
identifier ('v1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('basicMatch')
( ('(')
identifier ('v2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('basicMatch')
( ('(')
identifier ('e1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('basicMatch')
( ('(')
identifier ('e2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('basicMatch')
( ('(')
identifier ('e3')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('basicMatch')
( ('(')
any ('any')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('v')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('v')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
[ ('[')
identifier ('tVar1')
, (',')
WHITE_SPACE (' ')
identifier ('tVar2')
] (']')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched a value with a tuple shape"')
) (')')
; (';')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('message')
, (',')
WHITE_SPACE (' ')
identifier ('fatal')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE ('\n                            ')
{ ('{')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched a value with a record shape"')
) (')')
; (';')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// If the variable 'v' contains an `error` values of shape that matches `InvalidIdError`')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// it will be matched to `InvalidIdError` indirect error match pattern.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('InvalidIdError')
( ('(')
identifier ('id')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('id')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched `InvalidError` id="')
, (',')
WHITE_SPACE (' ')
identifier ('id')
) (')')
; (';')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// If the variable `v` contains an `error` value, it will be matched')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// to this pattern and the reason string and the detail record will be')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// destructed within the pattern block.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
error ('error')
( ('(')
identifier ('reason')
, (',')
WHITE_SPACE (' ')
identifier ('message')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('message')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched an error value : "')
, (',')
WHITE_SPACE ('\n                  ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"reason: %s, message: %s"')
, (',')
WHITE_SPACE (' ')
identifier ('reason')
, (',')
WHITE_SPACE (' ')
identifier ('message')
) (')')
) (')')
; (';')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// If a rest binding pattern is used, the error details that are not matched will be recorded in a map.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
error ('error')
( ('(')
identifier ('reason')
, (',')
WHITE_SPACE (' ')
identifier ('message')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('message')
, (',')
WHITE_SPACE (' ')
... ('...')
identifier ('rest')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched an error value : "')
, (',')
WHITE_SPACE ('\n                  ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"reason: %s, rest detail: %s"')
, (',')
WHITE_SPACE (' ')
identifier ('reason')
, (',')
WHITE_SPACE (' ')
identifier ('rest')
) (')')
) (')')
; (';')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
