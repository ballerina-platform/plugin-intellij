import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Create an endpoint with port 8080 for the mock backend services.')
WHITE_SPACE ('\n')
listener ('listener')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
WHITE_SPACE (' ')
identifier ('backendEP')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
DECIMAL_INTEGER_LITERAL ('8080')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Define the load balance client endpoint to call the backend services.')
WHITE_SPACE ('\n')
identifier ('http')
: (':')
identifier ('LoadBalanceClient')
WHITE_SPACE (' ')
identifier ('lbBackendEP')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Define the set of HTTP clients that need to be load balanced.')
WHITE_SPACE ('\n        ')
identifier ('targets')
: (':')
WHITE_SPACE (' ')
[ ('[')
WHITE_SPACE ('\n            ')
{ ('{')
WHITE_SPACE (' ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"http://localhost:8080/mock1"')
WHITE_SPACE (' ')
} ('}')
, (',')
WHITE_SPACE ('\n            ')
{ ('{')
WHITE_SPACE (' ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"http://localhost:8080/mock2"')
WHITE_SPACE (' ')
} ('}')
, (',')
WHITE_SPACE ('\n            ')
{ ('{')
WHITE_SPACE (' ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"http://localhost:8080/mock3"')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n        ')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('timeoutInMillis')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5000')
WHITE_SPACE ('\n')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n\n')
LINE_COMMENT ('// Create an HTTP service bound to the endpoint (`loadBalancerEP`).')
WHITE_SPACE ('\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/lb"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('loadBalancerDemoService')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
WHITE_SPACE (' ')
( ('(')
DECIMAL_INTEGER_LITERAL ('9090')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create a REST resource within the API.')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('roundRobin')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
json ('json')
WHITE_SPACE (' ')
identifier ('requestPayload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Ballerina"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('lbBackendEP')
-> ('->')
identifier ('post')
( ('(')
QUOTED_STRING_LITERAL ('"/"')
, (',')
WHITE_SPACE (' ')
identifier ('requestPayload')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// If a response is returned, the normal process runs. If the service')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// does not get the expected response, the error-handling logic is')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// executed.')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('response')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Response')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('responseToCaller')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('responseToCaller')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('ListenerError')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('responseToCaller')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('outResponse')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n            ')
identifier ('outResponse')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n            ')
identifier ('outResponse')
. ('.')
identifier ('setPayload')
( ('(')
< ('<')
string ('string')
> ('>')
identifier ('response')
. ('.')
identifier ('detail')
( ('(')
) (')')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('responseToCaller')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('outResponse')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('responseToCaller')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('ListenerError')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('responseToCaller')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Define the mock backend services, which are called by the load balancer.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/mock1"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('mock1')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
identifier ('backendEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('mock1Resource')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('responseToCaller')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
QUOTED_STRING_LITERAL ('"Mock1 resource was invoked."')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('responseToCaller')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('ListenerError')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('handleRespondResult')
( ('(')
identifier ('responseToCaller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/mock2"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('mock2')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
identifier ('backendEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('mock2Resource')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('responseToCaller')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
QUOTED_STRING_LITERAL ('"Mock2 resource was invoked."')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('responseToCaller')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('ListenerError')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('handleRespondResult')
( ('(')
identifier ('responseToCaller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/mock3"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('mock3')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
identifier ('backendEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('mock3Resource')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('responseToCaller')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
QUOTED_STRING_LITERAL ('"Mock3 resource was invoked."')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('responseToCaller')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('ListenerError')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('handleRespondResult')
( ('(')
identifier ('responseToCaller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Function to handle respond results')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('handleRespondResult')
( ('(')
identifier ('http')
: (':')
identifier ('ListenerError')
? ('?')
WHITE_SPACE (' ')
identifier ('result')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('ListenerError')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response from mock service"')
, (',')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
