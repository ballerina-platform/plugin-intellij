import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerinax')
/ ('/')
identifier ('java')
. ('.')
identifier ('jdbc')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Client for the MySQL database. This client can be used with any JDBC')
WHITE_SPACE ('\n')
LINE_COMMENT ('// supported database by providing the corresponding JDBC URL.')
WHITE_SPACE ('\n')
identifier ('jdbc')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('testDB')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"jdbc:mysql://localhost:3306/testdb"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('username')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"test"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"test"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('poolOptions')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('maximumPoolSize')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
WHITE_SPACE (' ')
} ('}')
, (',')
WHITE_SPACE ('\n    ')
identifier ('dbOptions')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('useSSL')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This is the `type` created to represent a data row.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Student')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('id')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('myBatchType')
WHITE_SPACE (' ')
int ('int')
| ('|')
string ('string')
? ('?')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create a table using the `update` remote function. If the DDL')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// statement execution is successful, the `update` remote function')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// returns 0.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"The update operation - Creating a table:"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"CREATE TABLE student(id INT AUTO_INCREMENT, "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                         ')
QUOTED_STRING_LITERAL ('"age INT, name VARCHAR(255), PRIMARY KEY (id))"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Create student table"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('jsonMsg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
QUOTED_STRING_LITERAL ('"student"')
: (':')
WHITE_SPACE (' ')
[ ('[')
{ ('{')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"firstname"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Peter"')
, (',')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"age"')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
WHITE_SPACE ('\n        ')
} ('}')
, (',')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"firstname"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John"')
, (',')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"age"')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('15')
WHITE_SPACE ('\n        ')
} ('}')
, (',')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"firstname"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"James"')
, (',')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"age"')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('12')
WHITE_SPACE ('\n        ')
} ('}')
] (']')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('datalen')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Prepare the data batches.')
WHITE_SPACE ('\n    ')
json ('json')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('students')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('jsonMsg')
. ('.')
identifier ('student')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('students')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
json ('json')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('datalen')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('students')
. ('.')
identifier ('length')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('myBatchType')
[ ('[')
] (']')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('dataBatch')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
] (']')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('students')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
json ('json')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
( ('(')
var ('var')
WHITE_SPACE (' ')
identifier ('studentData')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('students')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('studentData')
. ('.')
identifier ('firstname')
. ('.')
identifier ('toString')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n            ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
int ('int')
> ('>')
identifier ('studentData')
. ('.')
identifier ('age')
; (';')
WHITE_SPACE ('\n\n            ')
identifier ('myBatchType')
? ('?')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('dataRow')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
identifier ('age')
, (',')
WHITE_SPACE (' ')
identifier ('name')
] (']')
; (';')
WHITE_SPACE ('\n            ')
identifier ('dataBatch')
[ ('[')
identifier ('i')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('dataRow')
; (';')
WHITE_SPACE ('\n            ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// A batch of data can be inserted using the `batchUpdate` remote function.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The number of inserted rows for each insert in the batch is returned as')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// an array.')
WHITE_SPACE ('\n    ')
identifier ('jdbc')
: (':')
identifier ('BatchUpdateResult')
WHITE_SPACE (' ')
identifier ('retBatch')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('batchUpdate')
( ('(')
QUOTED_STRING_LITERAL ('"INSERT INTO student "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                    ')
QUOTED_STRING_LITERAL ('"(age,name) VALUES (?,?)"')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
, (',')
WHITE_SPACE (' ')
... ('...')
identifier ('dataBatch')
) (')')
; (';')
WHITE_SPACE ('\n    ')
error ('error')
? ('?')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('retBatch')
. ('.')
identifier ('returnedError')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('e')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Batch update operation failed:"')
, (',')
WHITE_SPACE ('\n                    ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('e')
. ('.')
identifier ('detail')
( ('(')
) (')')
[ ('[')
QUOTED_STRING_LITERAL ('"message"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Batch 1 update counts: "')
, (',')
WHITE_SPACE (' ')
identifier ('retBatch')
. ('.')
identifier ('updatedRowCount')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Batch 2 update counts: "')
, (',')
WHITE_SPACE (' ')
identifier ('retBatch')
. ('.')
identifier ('updatedRowCount')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n        ')
anydata ('anydata')
[ ('[')
] (']')
? ('?')
WHITE_SPACE (' ')
identifier ('generatedKeys')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('retBatch')
. ('.')
identifier ('generatedKeys')
[ ('[')
QUOTED_STRING_LITERAL ('"GENERATED_KEY"')
] (']')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('generatedKeys')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
int ('int')
WHITE_SPACE (' ')
identifier ('key1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('generatedKeys')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
; (';')
WHITE_SPACE ('\n            ')
int ('int')
WHITE_SPACE (' ')
identifier ('key2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('generatedKeys')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
] (']')
; (';')
WHITE_SPACE ('\n            ')
int ('int')
WHITE_SPACE (' ')
identifier ('key3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('generatedKeys')
[ ('[')
DECIMAL_INTEGER_LITERAL ('2')
] (']')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Generated keys are: "')
WHITE_SPACE (' ')
, (',')
WHITE_SPACE (' ')
identifier ('key1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('", "')
, (',')
WHITE_SPACE (' ')
identifier ('key2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" and "')
, (',')
WHITE_SPACE (' ')
identifier ('key3')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Check the data in the database.')
WHITE_SPACE ('\n    ')
identifier ('checkData')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nThe update operation - Drop the student table"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"DROP TABLE student"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Drop table student"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Function to handle the return value of the `update` remote function.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('handleUpdate')
( ('(')
identifier ('jdbc')
: (':')
identifier ('UpdateResult')
| ('|')
identifier ('jdbc')
: (':')
identifier ('Error')
WHITE_SPACE (' ')
identifier ('returned')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('message')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('returned')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('jdbc')
: (':')
identifier ('UpdateResult')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('message')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" status: "')
, (',')
WHITE_SPACE (' ')
identifier ('returned')
. ('.')
identifier ('updatedRowCount')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
error ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('returned')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('message')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" failed: "')
, (',')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('detail')
( ('(')
) (')')
[ ('[')
QUOTED_STRING_LITERAL ('"message"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Select data from the table and print.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('checkData')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('dtReturned')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('select')
( ('(')
QUOTED_STRING_LITERAL ('"SELECT * FROM student"')
, (',')
WHITE_SPACE (' ')
identifier ('Student')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('dtReturned')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
table ('table')
< ('<')
identifier ('Student')
> ('>')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Iterating data.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Data in students table:"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('row')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('dtReturned')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Student:"')
, (',')
WHITE_SPACE (' ')
identifier ('row')
. ('.')
identifier ('id')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"|"')
, (',')
WHITE_SPACE (' ')
identifier ('row')
. ('.')
identifier ('name')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"|"')
, (',')
WHITE_SPACE (' ')
identifier ('row')
. ('.')
identifier ('age')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
error ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('dtReturned')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Select data from student table failed: "')
, (',')
WHITE_SPACE ('\n                 ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('detail')
( ('(')
) (')')
[ ('[')
QUOTED_STRING_LITERAL ('"message"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
