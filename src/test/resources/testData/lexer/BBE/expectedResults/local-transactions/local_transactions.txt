import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerinax')
/ ('/')
identifier ('java')
. ('.')
identifier ('jdbc')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Creates an endpoint for the H2 database. Changes the DB details before running the example.')
WHITE_SPACE ('\n')
identifier ('jdbc')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('testDB')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
( ('(')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"jdbc:h2:file:./local-transactions/testdb"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('username')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"test"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"test"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('poolOptions')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('maximumPoolSize')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Creates the tables that are required for the transaction.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"CREATE TABLE CUSTOMER (ID INTEGER, NAME "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                              ')
QUOTED_STRING_LITERAL ('"VARCHAR(30))"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Create CUSTOMER table"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"CREATE TABLE SALARY (ID INTEGER, MON_SALARY FLOAT)"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Create SALARY table"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The below is a `transaction` block. Any transacted action within the `transaction` block')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// may return errors such as backend DB errors, connection pool errors etc. The user can')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// decide whether to `abort` or `retry` based on the returned error. If you do not')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// explicitly `abort` or `retry` a returned error, the transaction will be automatically')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// retried until the retry count is reached and aborted.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The retry count that is given via `retries` is the number of times the transaction')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// is retried before it being aborted. By default, a transaction is tried three times before')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// aborting it. Only integer literals or constants are allowed as the `retry count`.')
WHITE_SPACE ('\n    ')
transaction ('transaction')
WHITE_SPACE (' ')
with ('with')
WHITE_SPACE (' ')
retries ('retries')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This is the first remote function participant of the transaction.')
WHITE_SPACE ('\n        ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"INSERT INTO CUSTOMER(ID,NAME) "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                                     ')
QUOTED_STRING_LITERAL ('"VALUES (1, 'Anne')"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This is the second remote function participant of the transaction.')
WHITE_SPACE ('\n        ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"INSERT INTO SALARY (ID, MON_SALARY) "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                                 ')
QUOTED_STRING_LITERAL ('"VALUES (1, 2500)"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('ret')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('jdbc')
: (':')
identifier ('UpdateResult')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Inserted count: "')
, (',')
WHITE_SPACE (' ')
identifier ('ret')
. ('.')
identifier ('updatedRowCount')
) (')')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// If the transaction is forced to abort, it will roll back the transaction')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// and exit the transaction block without retrying.')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('ret')
. ('.')
identifier ('updatedRowCount')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
abort ('abort')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// If the transaction is forced to retry, it will roll back the transaction,')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// go to the `onretry` block, and retry from the beginning until the defined')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// retry count is reached.')
WHITE_SPACE ('\n            ')
retry ('retry')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The end curly bracket marks the end of the transaction and the transaction will')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// be committed or rolled back at this point.')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
onretry ('onretry')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// The `onretry` block will be executed whenever the transaction is retried until it')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// reaches the retry count. A transaction could be retried if it fails due to an')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// exception or throw statement or from an explicit retry statement.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Retrying transaction"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
committed ('committed')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Any action that needs to be performed once the transaction is committed should be added as shown below.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Transaction committed"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
aborted ('aborted')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Any action that needs to perform if the transaction is aborted should be added as shown below.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Transaction aborted"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//Drops the tables.')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"DROP TABLE CUSTOMER"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Drop table CUSTOMER"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"DROP TABLE SALARY"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Drop table SALARY"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Closes the connection pool.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('stopRet')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
. ('.')
identifier ('stop')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('stopRet')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('stopRet')
. ('.')
identifier ('detail')
( ('(')
) (')')
[ ('[')
QUOTED_STRING_LITERAL ('"message"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function handles the return of the update operation.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('handleUpdate')
( ('(')
identifier ('jdbc')
: (':')
identifier ('UpdateResult')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('returned')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('message')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('returned')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('jdbc')
: (':')
identifier ('UpdateResult')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('message')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" status: "')
, (',')
WHITE_SPACE (' ')
identifier ('returned')
. ('.')
identifier ('updatedRowCount')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('message')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" failed: "')
, (',')
WHITE_SPACE (' ')
identifier ('returned')
. ('.')
identifier ('reason')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
