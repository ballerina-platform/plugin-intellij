import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Constants are defined using the `const` modifier.')
WHITE_SPACE ('\n')
const ('const')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('GET')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"GET"')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Constants can be defined without the type using the `var` keyword. Then, the type is inferred from the right hand side.')
WHITE_SPACE ('\n')
const ('const')
WHITE_SPACE (' ')
identifier ('POST')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"POST"')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Constants can be used to create type definitions. The type definition below specifies that a variable of the type')
WHITE_SPACE ('\n')
LINE_COMMENT ('// `ACTION` can only hold either `GET` or `POST` as its value.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('ACTION')
WHITE_SPACE (' ')
identifier ('GET')
| ('|')
identifier ('POST')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// An integer constant.')
WHITE_SPACE ('\n')
const ('const')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('I')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('125')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Constants of the `map` type can be defined as well. The constraint of these constant maps should be either a simple type')
WHITE_SPACE ('\n')
LINE_COMMENT ('// or another map type, which should eventually have a simple type constraint. `var` cannot be used to declare')
WHITE_SPACE ('\n')
LINE_COMMENT ('// constant maps. Therefore, the correct type should be present when declaring the constant.')
WHITE_SPACE ('\n')
const ('const')
WHITE_SPACE (' ')
map ('map')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('data')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('  ')
QUOTED_STRING_LITERAL ('"user"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Ballerina"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ID"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"1234"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Constant with nested map literals.')
WHITE_SPACE ('\n')
const ('const')
WHITE_SPACE (' ')
map ('map')
< ('<')
map ('map')
< ('<')
string ('string')
> ('>')
> ('>')
WHITE_SPACE (' ')
identifier ('complexData')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"data"')
: (':')
WHITE_SPACE (' ')
identifier ('data')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"data2"')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"user"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"WSO2"')
WHITE_SPACE (' ')
} ('}')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This is identical to the code line `ACTION get = "GET";`.')
WHITE_SPACE ('\n    ')
identifier ('ACTION')
WHITE_SPACE (' ')
identifier ('get')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('GET')
; (';')
WHITE_SPACE ('\n    ')
identifier ('testAction')
( ('(')
identifier ('get')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('ACTION')
WHITE_SPACE (' ')
identifier ('post')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"POST"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('testAction')
( ('(')
identifier ('POST')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// `I` can be concatenated with any other integer value.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('value')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('I')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('data')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('complexData')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Values of a constant map can be accessed and used as usual.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('complexData')
[ ('[')
QUOTED_STRING_LITERAL ('"data"')
] (']')
[ ('[')
QUOTED_STRING_LITERAL ('"user"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// However, updating a constant map will produce a compile-time error. E.g., -')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// data.ID = "4321";')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// data.newField = 10;')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAction')
( ('(')
identifier ('ACTION')
WHITE_SPACE (' ')
identifier ('action')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('action')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('GET')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"GET action"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('action')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('POST')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"POST action"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
