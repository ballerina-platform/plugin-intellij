import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Header name to be set to the request in the filter.')
WHITE_SPACE ('\n')
final ('final')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('filter_name_header')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"X-requestHeader"')
; (';')
WHITE_SPACE ('\n')
LINE_COMMENT ('// Header value to be set to the request in the filter.')
WHITE_SPACE ('\n')
final ('final')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('filter_name_header_value')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"RequestFilter"')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The Request filter implementation. It intercepts the request and adds a new')
WHITE_SPACE ('\n')
LINE_COMMENT ('// header to request before it is dispatched to the HTTP resource.')
WHITE_SPACE ('\n')
public ('public')
WHITE_SPACE (' ')
type ('type')
WHITE_SPACE (' ')
identifier ('RequestFilter')
WHITE_SPACE (' ')
object ('object')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
* ('*')
identifier ('http')
: (':')
identifier ('RequestFilter')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Intercepts the request.')
WHITE_SPACE ('\n    ')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('filterRequest')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('request')
, (',')
WHITE_SPACE ('\n                        ')
identifier ('http')
: (':')
identifier ('FilterContext')
WHITE_SPACE (' ')
identifier ('context')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
boolean ('boolean')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Set a header to the request inside the filter.')
WHITE_SPACE ('\n        ')
identifier ('request')
. ('.')
identifier ('setHeader')
( ('(')
identifier ('filter_name_header')
, (',')
WHITE_SPACE (' ')
identifier ('filter_name_header_value')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Return true on success.')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Create a new RequestFilter.')
WHITE_SPACE ('\n')
identifier ('RequestFilter')
WHITE_SPACE (' ')
identifier ('requestFilter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The response filter implementation. It intercepts the response in response ')
WHITE_SPACE ('\n')
LINE_COMMENT ('// path and adds a new header to response.')
WHITE_SPACE ('\n')
public ('public')
WHITE_SPACE (' ')
type ('type')
WHITE_SPACE (' ')
identifier ('ResponseFilter')
WHITE_SPACE (' ')
object ('object')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
* ('*')
identifier ('http')
: (':')
identifier ('ResponseFilter')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Intercepts the response.')
WHITE_SPACE ('\n    ')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('filterResponse')
( ('(')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('response')
, (',')
WHITE_SPACE (' \n                        ')
identifier ('http')
: (':')
identifier ('FilterContext')
WHITE_SPACE (' ')
identifier ('context')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
boolean ('boolean')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Set a header to the response inside the filter.')
WHITE_SPACE ('\n        ')
identifier ('response')
. ('.')
identifier ('setHeader')
( ('(')
QUOTED_STRING_LITERAL ('"X-responseHeader"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ResponseFilter"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Return true on success.')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Create a new ResponseFilter.')
WHITE_SPACE ('\n')
identifier ('ResponseFilter')
WHITE_SPACE (' ')
identifier ('responseFilter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Create an HTTP listener and assign the filters as a config parameter.')
WHITE_SPACE ('\n')
listener ('listener')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
WHITE_SPACE (' ')
identifier ('echoListener')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
( ('(')
DECIMAL_INTEGER_LITERAL ('9090')
, (',')
WHITE_SPACE ('\n                                            ')
identifier ('config')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('filters')
: (':')
WHITE_SPACE (' ')
[ ('[')
identifier ('requestFilter')
, (',')
WHITE_SPACE (' ')
identifier ('responseFilter')
] (']')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/hello"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('echo')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
identifier ('echoListener')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/sayHello"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('echo')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Create a new http response.')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Set the `filter_name_header` from the request to the response.')
WHITE_SPACE ('\n        ')
identifier ('res')
. ('.')
identifier ('setHeader')
( ('(')
identifier ('filter_name_header')
, (',')
WHITE_SPACE (' ')
identifier ('req')
. ('.')
identifier ('getHeader')
( ('(')
identifier ('filter_name_header')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
QUOTED_STRING_LITERAL ('"Hello, World!"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
< ('<')
@ ('@')
identifier ('untainted')
> ('>')
WHITE_SPACE (' ')
identifier ('res')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n           ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
