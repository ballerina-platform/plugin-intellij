import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('cache')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('runtime')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This creates a new cache. The cache cleanup task runs every 5 seconds')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// and clears all the expired caches. In this example, the cache expiry time')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// is set to four seconds in order to demonstrate how cache cleaning is')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// carried out.')
WHITE_SPACE ('\n    ')
identifier ('cache')
: (':')
identifier ('Cache')
WHITE_SPACE (' ')
identifier ('cache')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
DECIMAL_INTEGER_LITERAL ('4000')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Adds a new entry to the cache.')
WHITE_SPACE ('\n    ')
identifier ('cache')
. ('.')
identifier ('put')
( ('(')
QUOTED_STRING_LITERAL ('"Name"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Ballerina"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Fetches the cached value.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('""')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('cache')
. ('.')
identifier ('hasKey')
( ('(')
QUOTED_STRING_LITERAL ('"Name"')
) (')')
) (')')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
identifier ('cache')
. ('.')
identifier ('get')
( ('(')
QUOTED_STRING_LITERAL ('"Name"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Name: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('name')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This sends the current worker to the sleep mode for six seconds.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// No execution takes place during this period.')
WHITE_SPACE ('\n    ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('6000')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The cache expires after 4 seconds. The cache cleanup task runs during the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// fifth second and cleans the cache while this thread is in the sleep mode.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// As a result, the value in the cache becomes null.')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('cache')
. ('.')
identifier ('hasKey')
( ('(')
QUOTED_STRING_LITERAL ('"Name"')
) (')')
) (')')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
identifier ('cache')
. ('.')
identifier ('get')
( ('(')
QUOTED_STRING_LITERAL ('"Name"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('""')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Name: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('name')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
