import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// A range expression `x ... y` can be used to iterate integers')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// from `x` to `y` including `x` and `y` in ascending order.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"foreach for 25 ... 28"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('25')
WHITE_SPACE (' ')
... ('...')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('28')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('i')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// A range expression `x ..< y` can be used to iterate integers')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// from `x` to `y` including `x` but excluding `y` in ascending order.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nforeach for 25 ..< 28"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('25')
WHITE_SPACE (' ')
HALF_OPEN_RANGE ('..<')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('28')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('i')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The result of a range expression can also be used by assigning it to')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// an object belonging to the abstract object type `Iterable<int>`.')
WHITE_SPACE ('\n    ')
abstract ('abstract')
WHITE_SPACE (' ')
object ('object')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('next')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
record ('record')
WHITE_SPACE (' ')
LEFT_CLOSED_RECORD_DELIMITER ('{|')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('value')
; (';')
WHITE_SPACE (' ')
RIGHT_CLOSED_RECORD_DELIMITER ('|}')
? ('?')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
identifier ('iterator')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('25')
WHITE_SPACE (' ')
HALF_OPEN_RANGE ('..<')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('28')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\niterable object for 25 ..< 28"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
while ('while')
WHITE_SPACE (' ')
( ('(')
BOOLEAN_LITERAL ('true')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
record ('record')
WHITE_SPACE (' ')
LEFT_CLOSED_RECORD_DELIMITER ('{|')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('value')
; (';')
WHITE_SPACE (' ')
RIGHT_CLOSED_RECORD_DELIMITER ('|}')
? ('?')
WHITE_SPACE (' ')
identifier ('r')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('iterator')
. ('.')
identifier ('next')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('r')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
LEFT_CLOSED_RECORD_DELIMITER ('{|')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('value')
; (';')
WHITE_SPACE (' ')
RIGHT_CLOSED_RECORD_DELIMITER ('|}')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('r')
. ('.')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// `r` is `()` implying the end of the iteration.')
WHITE_SPACE ('\n            ')
break ('break')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
