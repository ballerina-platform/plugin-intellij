import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Copies the content from the source channel to a destination channel.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('copy')
( ('(')
identifier ('io')
: (':')
identifier ('ReadableByteChannel')
WHITE_SPACE (' ')
identifier ('src')
, (',')
WHITE_SPACE ('\n              ')
identifier ('io')
: (':')
identifier ('WritableByteChannel')
WHITE_SPACE (' ')
identifier ('dst')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
error ('error')
? ('?')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The below example shows how to read all the content from')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the source and copy it to the destination.')
WHITE_SPACE ('\n    ')
while ('while')
WHITE_SPACE (' ')
( ('(')
BOOLEAN_LITERAL ('true')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// The operation attempts to read a maximum of 1000 bytes and returns')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// with the available content, which could be < 1000.')
WHITE_SPACE ('\n        ')
byte ('byte')
[ ('[')
] (']')
| ('|')
identifier ('io')
: (':')
identifier ('Error')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('src')
. ('.')
identifier ('read')
( ('(')
DECIMAL_INTEGER_LITERAL ('1000')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('EofError')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
break ('break')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
return ('return')
WHITE_SPACE (' ')
< ('<')
@ ('@')
identifier ('untained')
> ('>')
WHITE_SPACE (' ')
identifier ('result')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// The operation writes the given content into the channel.')
WHITE_SPACE ('\n            ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n            ')
while ('while')
WHITE_SPACE (' ')
( ('(')
identifier ('i')
WHITE_SPACE (' ')
< ('<')
WHITE_SPACE (' ')
identifier ('result')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
var ('var')
WHITE_SPACE (' ')
identifier ('result2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('dst')
. ('.')
identifier ('write')
( ('(')
identifier ('result')
, (',')
WHITE_SPACE (' ')
identifier ('i')
) (')')
; (';')
WHITE_SPACE ('\n                ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result2')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
return ('return')
WHITE_SPACE (' ')
identifier ('result2')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('result2')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
return ('return')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Closes a given readable or writable byte channel.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('close')
( ('(')
identifier ('io')
: (':')
identifier ('ReadableByteChannel')
| ('|')
identifier ('io')
: (':')
identifier ('WritableByteChannel')
WHITE_SPACE (' ')
identifier ('ch')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
abstract ('abstract')
WHITE_SPACE (' ')
object ('object')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('close')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
error ('error')
? ('?')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
identifier ('channelResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('ch')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('cr')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('channelResult')
. ('.')
identifier ('close')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('cr')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while closing the channel: "')
, (',')
WHITE_SPACE (' ')
identifier ('cr')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
error ('error')
? ('?')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('srcPath')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"./files/ballerina.jpg"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('dstPath')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"./files/ballerinaCopy.jpg"')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Initializes the readable byte channel.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('ReadableByteChannel')
WHITE_SPACE (' ')
identifier ('srcCh')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('openReadableFile')
( ('(')
identifier ('srcPath')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Initializes the writable byte channel.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('WritableByteChannel')
WHITE_SPACE (' ')
identifier ('dstCh')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('openWritableFile')
( ('(')
identifier ('dstPath')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Start to copy files from "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('srcPath')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" to "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('dstPath')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Copies the source byte channel to the target byte channel.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('copy')
( ('(')
identifier ('srcCh')
, (',')
WHITE_SPACE (' ')
identifier ('dstCh')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"error occurred while performing copy "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"File copy completed. The copied file is located at "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                    ')
identifier ('dstPath')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Closes the connections.')
WHITE_SPACE ('\n    ')
identifier ('close')
( ('(')
identifier ('srcCh')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('close')
( ('(')
identifier ('dstCh')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
