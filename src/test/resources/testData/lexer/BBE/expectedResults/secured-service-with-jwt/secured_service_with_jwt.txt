import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('jwt')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Creates an inbound JWT authentication provider with the relevant')
WHITE_SPACE ('\n')
LINE_COMMENT ('// configurations.')
WHITE_SPACE ('\n')
identifier ('jwt')
: (':')
identifier ('InboundJwtAuthProvider')
WHITE_SPACE (' ')
identifier ('jwtAuthProvider')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('issuer')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('audience')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina.io"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('trustStoreConfig')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('certificateAlias')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('trustStore')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"${ballerina.home}/bre/security/ballerinaTruststore.p12"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Creates a Bearer Auth handler with the created JWT Auth provider.')
WHITE_SPACE ('\n')
identifier ('http')
: (':')
identifier ('BearerAuthHandler')
WHITE_SPACE (' ')
identifier ('jwtAuthHandler')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
identifier ('jwtAuthProvider')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The endpoint used here is the `http:Listener`. The JWT authentication')
WHITE_SPACE ('\n')
LINE_COMMENT ('// handler is set to this endpoint using the `authHandlers` attribute.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// It is optional to override the authentication and authorization at the')
WHITE_SPACE ('\n')
LINE_COMMENT ('// service and resource levels.')
WHITE_SPACE ('\n')
listener ('listener')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
WHITE_SPACE (' ')
identifier ('ep')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
DECIMAL_INTEGER_LITERAL ('9090')
, (',')
WHITE_SPACE (' ')
identifier ('config')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('auth')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('authHandlers')
: (':')
WHITE_SPACE (' ')
[ ('[')
identifier ('jwtAuthHandler')
] (']')
WHITE_SPACE ('\n    ')
} ('}')
, (',')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The secure hello world sample uses HTTPS.')
WHITE_SPACE ('\n    ')
identifier ('secureSocket')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('keyStore')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"${ballerina.home}/bre/security/ballerinaKeystore.p12"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/hello"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The Auth configuration comprises of two parts -')
WHITE_SPACE ('\n')
LINE_COMMENT ('// authentication & authorization.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// Authentication can be disabled by setting the `enabled: false` flag.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// Authorization is based on scopes. A scope maps to one or more groups.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// For a user to access a resource, the user should be in the same groups as')
WHITE_SPACE ('\n')
LINE_COMMENT ('// the scope.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// To specify one or more scope of a resource, the annotation attribute')
WHITE_SPACE ('\n')
LINE_COMMENT ('// `scopes` can be used.')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('echo')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
identifier ('ep')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/sayHello"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('auth')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('scopes')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"hello"')
] (']')
, (',')
WHITE_SPACE ('\n            ')
identifier ('enabled')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The authentication and authorization settings can be overridden at')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the resource level.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The hello resource would inherit the `enabled: true` flag from the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// service level, which is set automatically.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The scope of the resource is defined as "hello".')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('hello')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
error ('error')
? ('?')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
QUOTED_STRING_LITERAL ('"Hello, World!!!"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in responding to caller"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
