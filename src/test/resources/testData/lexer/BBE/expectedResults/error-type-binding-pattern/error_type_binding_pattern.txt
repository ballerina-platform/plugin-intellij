import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('SampleErrorData')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('message')
? ('?')
; (';')
WHITE_SPACE ('\n    ')
error ('error')
WHITE_SPACE (' ')
identifier ('cause')
? ('?')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('info')
; (';')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('fatal')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('SampleError')
WHITE_SPACE (' ')
error ('error')
< ('<')
string ('string')
, (',')
WHITE_SPACE (' ')
identifier ('SampleErrorData')
> ('>')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This error-type binding pattern will destructure an `error` of the type `SampleError`, and create two variables as follows:')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The value of the reason string in the`SampleError` will be set to a new `string` variable `reason`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The values in the detail mapping will be set to new variables `info` and `fatal`.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
error ('error')
( ('(')
identifier ('reason')
, (',')
WHITE_SPACE (' ')
identifier ('info')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('info')
, (',')
WHITE_SPACE (' ')
identifier ('fatal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('fatal')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getSampleError')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Reason String: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('reason')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Info: "')
, (',')
WHITE_SPACE (' ')
identifier ('info')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Fatal: "')
, (',')
WHITE_SPACE (' ')
identifier ('fatal')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The detail mapping can also be destructured using a rest parameter.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `params` will be of the type `map<anydata|error>`, and will have the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `info` and `fatal` fields.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
error ('error')
( ('(')
identifier ('reasonTwo')
, (',')
WHITE_SPACE (' ')
... ('...')
identifier ('params')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getSampleError')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Reason String: "')
, (',')
WHITE_SPACE (' ')
identifier ('reasonTwo')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Detail Mapping: "')
, (',')
WHITE_SPACE (' ')
identifier ('params')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// When some error detail field names are provided rest parameter will only contain detail field that are not matched.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
error ('error')
( ('(')
identifier ('reasonThree')
, (',')
WHITE_SPACE (' ')
identifier ('info')
= ('=')
identifier ('info2')
, (',')
WHITE_SPACE (' ')
... ('...')
identifier ('filteredParams')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getSampleError')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Detail Mapping: "')
, (',')
WHITE_SPACE (' ')
identifier ('filteredParams')
) (')')
; (';')
WHITE_SPACE ('\n    \n    ')
LINE_COMMENT ('// The underscore '_' sign can be used to ignore either the reason string or the detail mapping.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
error ('error')
( ('(')
identifier ('_')
, (',')
WHITE_SPACE (' ')
identifier ('detailMsg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('detailMsg')
, (',')
WHITE_SPACE (' ')
identifier ('isFatal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('isFatal')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getRecordConstrainedError')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Detail Message: "')
, (',')
WHITE_SPACE (' ')
identifier ('detailMsg')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getSampleError')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
identifier ('SampleError')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('SampleError')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
error ('error')
( ('(')
QUOTED_STRING_LITERAL ('"Sample Error"')
, (',')
WHITE_SPACE (' ')
identifier ('info')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Detail Msg"')
, (',')
WHITE_SPACE (' ')
identifier ('fatal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('e')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Foo')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
LEFT_CLOSED_RECORD_DELIMITER ('{|')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('message')
? ('?')
; (';')
WHITE_SPACE ('\n    ')
error ('error')
WHITE_SPACE (' ')
identifier ('cause')
? ('?')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('detailMsg')
; (';')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('isFatal')
; (';')
WHITE_SPACE ('\n')
RIGHT_CLOSED_RECORD_DELIMITER ('|}')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getRecordConstrainedError')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
error ('error')
< ('<')
string ('string')
, (',')
WHITE_SPACE (' ')
identifier ('Foo')
> ('>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
error ('error')
< ('<')
string ('string')
, (',')
WHITE_SPACE (' ')
identifier ('Foo')
> ('>')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
error ('error')
( ('(')
QUOTED_STRING_LITERAL ('"Some Error"')
, (',')
WHITE_SPACE (' ')
identifier ('detailMsg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Failed Message"')
, (',')
WHITE_SPACE (' ')
identifier ('isFatal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('e')
; (';')
WHITE_SPACE ('\n')
} ('}')
