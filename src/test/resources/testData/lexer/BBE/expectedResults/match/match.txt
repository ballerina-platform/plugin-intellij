import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
int ('int')
[ ('[')
DECIMAL_INTEGER_LITERAL ('5')
] (']')
WHITE_SPACE (' ')
identifier ('intArray')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
] (']')
; (';')
WHITE_SPACE ('\n\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('counter')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('intArray')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// The value of the `counter` variable is matched against the given value match patterns.')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('counter')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
DECIMAL_INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value is: 0"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
DECIMAL_INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value is: 1"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
DECIMAL_INTEGER_LITERAL ('2')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value is: 2"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
DECIMAL_INTEGER_LITERAL ('3')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value is: 3"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
DECIMAL_INTEGER_LITERAL ('4')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value is: 4"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
DECIMAL_INTEGER_LITERAL ('5')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value is: 5"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
string ('string')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('animals')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"Cat"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Canine"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Mouse"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Horse"')
] (']')
; (';')
WHITE_SPACE ('\n\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('animal')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('animals')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// The value match can also be used with binary OR expression.')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('animal')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"Mouse"')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Mouse"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"Dog"')
| ('|')
QUOTED_STRING_LITERAL ('"Canine"')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Dog"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"Cat"')
| ('|')
QUOTED_STRING_LITERAL ('"Feline"')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Cat"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// The pattern `_` can be used as the final static value match pattern, which will be matched against all values.')
WHITE_SPACE ('\n            ')
identifier ('_')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Match All"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
