import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('filePath')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"./files/sample.xml"')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Creates XML content from the `string`.')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('x1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('b')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('k')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('T')
XML_ALL_CHAR ('h')
XML_ALL_CHAR ('e')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('L')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('s')
XML_ALL_CHAR ('t')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('W')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('d')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('b')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('k')
XML_ALL_CHAR ('>')
XML_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Preparing to write xml file"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Writes the content.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('wResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('write')
( ('(')
identifier ('x1')
, (',')
WHITE_SPACE (' ')
identifier ('filePath')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('wResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while writing xml: "')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('wResult')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Preparing to read the content written"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Reads the content.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('rResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('read')
( ('(')
identifier ('filePath')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('rResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
xml ('xml')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('rResult')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while reading xml: "')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('rResult')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Writes `xml` content to a given path.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('write')
( ('(')
xml ('xml')
WHITE_SPACE (' ')
identifier ('content')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('path')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
@ ('@')
identifier ('tainted')
WHITE_SPACE (' ')
error ('error')
? ('?')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Creates a byte channel from the given path.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('WritableByteChannel')
WHITE_SPACE (' ')
identifier ('wbc')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('openWritableFile')
( ('(')
identifier ('path')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Derives the character channel from the byte channel.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('WritableCharacterChannel')
WHITE_SPACE (' ')
identifier ('wch')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
identifier ('wbc')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"UTF8"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('wch')
. ('.')
identifier ('writeXml')
( ('(')
identifier ('content')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Closes the character channel once you are done with it.')
WHITE_SPACE ('\n    ')
identifier ('closeWc')
( ('(')
identifier ('wch')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('result')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Reads `xml` from a given path.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('read')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('path')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
@ ('@')
identifier ('tainted')
WHITE_SPACE (' ')
xml ('xml')
| ('|')
error ('error')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Creates a byte channel from the given path.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('ReadableByteChannel')
WHITE_SPACE (' ')
identifier ('rbc')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('openReadableFile')
( ('(')
identifier ('path')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Derives the character channel from the byte Channel.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('ReadableCharacterChannel')
WHITE_SPACE (' ')
identifier ('rch')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
identifier ('rbc')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"UTF8"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Reads the XML content from the character channel.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('rch')
. ('.')
identifier ('readXml')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Closes the character channel once you are done with it.')
WHITE_SPACE ('\n    ')
identifier ('closeRc')
( ('(')
identifier ('rch')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('result')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Closes a readable channel.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('closeRc')
( ('(')
identifier ('io')
: (':')
identifier ('ReadableCharacterChannel')
WHITE_SPACE (' ')
identifier ('rc')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('rc')
. ('.')
identifier ('close')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while closing character stream"')
, (',')
WHITE_SPACE ('\n                        ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Closes a writable channel.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('closeWc')
( ('(')
identifier ('io')
: (':')
identifier ('WritableCharacterChannel')
WHITE_SPACE (' ')
identifier ('wc')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('wc')
. ('.')
identifier ('close')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while closing character stream"')
, (',')
WHITE_SPACE ('\n                        ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
