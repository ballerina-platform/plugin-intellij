import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Creates a new client with the backend URL.')
WHITE_SPACE ('\n')
identifier ('http')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('clientEndpoint')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"http://postman-echo.com"')
) (')')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"GET request:"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Sends a `GET` request to the specified endpoint.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEndpoint')
-> ('->')
identifier ('get')
( ('(')
QUOTED_STRING_LITERAL ('"/get?test=123"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Handles the response.')
WHITE_SPACE ('\n    ')
identifier ('handleResponse')
( ('(')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nPOST request:"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Sends a `POST` request to the specified endpoint.')
WHITE_SPACE ('\n    ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEndpoint')
-> ('->')
identifier ('post')
( ('(')
QUOTED_STRING_LITERAL ('"/post"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"POST: Hello World"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Handles the response.')
WHITE_SPACE ('\n    ')
identifier ('handleResponse')
( ('(')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nUse custom HTTP verbs:"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Uses the `execute()` remote function for custom HTTP verbs.')
WHITE_SPACE ('\n    ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEndpoint')
-> ('->')
identifier ('execute')
( ('(')
QUOTED_STRING_LITERAL ('"COPY"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/get"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"CUSTOM: Hello World"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Initializes a request.')
WHITE_SPACE ('\n    ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n    ')
identifier ('req')
. ('.')
identifier ('addHeader')
( ('(')
QUOTED_STRING_LITERAL ('"Sample-Name"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"http-client-connector"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The `get()`, `head()`, and `options()` can have the optional `message` parameter,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// which will be a request or a payload.')
WHITE_SPACE ('\n    ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEndpoint')
-> ('->')
identifier ('get')
( ('(')
QUOTED_STRING_LITERAL ('"/get"')
, (',')
WHITE_SPACE (' ')
identifier ('req')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('response')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Response')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('contentType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('response')
. ('.')
identifier ('getHeader')
( ('(')
QUOTED_STRING_LITERAL ('"Content-Type"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Content-Type: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('contentType')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('response')
. ('.')
identifier ('statusCode')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Status code: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('statusCode')
. ('.')
identifier ('toString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error when calling the backend: "')
WHITE_SPACE (' ')
, (',')
WHITE_SPACE (' ')
identifier ('response')
. ('.')
identifier ('reason')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//The below function handles the response received from the remote HTTP endpoint.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('handleResponse')
( ('(')
identifier ('http')
: (':')
identifier ('Response')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('response')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('response')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Response')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('response')
. ('.')
identifier ('getJsonPayload')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('msg')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
json ('json')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Prints the received `json` response.')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('msg')
. ('.')
identifier ('toJsonString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Invalid payload received:"')
WHITE_SPACE (' ')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
. ('.')
identifier ('reason')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error when calling the backend: "')
, (',')
WHITE_SPACE (' ')
identifier ('response')
. ('.')
identifier ('reason')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
