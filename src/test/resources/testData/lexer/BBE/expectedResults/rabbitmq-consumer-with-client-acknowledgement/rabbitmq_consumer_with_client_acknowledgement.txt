import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('rabbitmq')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Creates a ballerina RabbitMQ connection that allows re-usability if necessary.')
WHITE_SPACE ('\n')
identifier ('rabbitmq')
: (':')
identifier ('Connection')
WHITE_SPACE (' ')
identifier ('connection')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
{ ('{')
WHITE_SPACE (' ')
identifier ('host')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"localhost"')
, (',')
WHITE_SPACE (' ')
identifier ('port')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5672')
WHITE_SPACE (' ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
listener ('listener')
WHITE_SPACE (' ')
identifier ('rabbitmq')
: (':')
identifier ('Listener')
WHITE_SPACE (' ')
identifier ('channelListener')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
identifier ('connection')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The consumer service listens to the "MyQueue" queue.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// ackMode is by default rabbitmq:AUTO_ACK which will automatically acknowledge')
WHITE_SPACE ('\n')
LINE_COMMENT ('// all messages once consumed.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('rabbitmq')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('queueConfig')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('queueName')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"MyQueue"')
WHITE_SPACE ('\n    ')
} ('}')
, (',')
WHITE_SPACE ('\n    ')
identifier ('ackMode')
: (':')
WHITE_SPACE (' ')
identifier ('rabbitmq')
: (':')
identifier ('CLIENT_ACK')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
LINE_COMMENT ('// Attaches the service to the listener.')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('rabbitmqConsumerAck')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
identifier ('channelListener')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Gets triggered when a message is received by the queue.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onMessage')
( ('(')
identifier ('rabbitmq')
: (':')
identifier ('Message')
WHITE_SPACE (' ')
identifier ('message')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Retrieves the text content of the message.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('messageContent')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('message')
. ('.')
identifier ('getTextContent')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('messageContent')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"The message received: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('messageContent')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while retrieving the message content."')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Positively acknowledges a single message.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('message')
-> ('->')
identifier ('basicAck')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while acknowledging the message."')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
