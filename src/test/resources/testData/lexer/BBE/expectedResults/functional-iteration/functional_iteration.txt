import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Defines a `map` of `string` values.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('words')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('a')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ant"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('b')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"bear"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('c')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"cat"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('d')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"dear"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('e')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"elephant"')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `length()` function returns the number of elements in the container.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Number of elements in 'words': "')
, (',')
WHITE_SPACE (' ')
identifier ('words')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `map()` function applies the given function to each item of the container')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// and returns a new container of the same type and length.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('animals')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('words')
. ('.')
map ('map')
( ('(')
identifier ('toUpper')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('animals')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Defines an array of `int` values.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('numbers')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
- ('-')
DECIMAL_INTEGER_LITERAL ('5')
, (',')
WHITE_SPACE (' ')
- ('-')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('7')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('12')
] (']')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `filter()` function returns a new container of the same type with')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// all the elements that satisfy the input predicate function.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('positive')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('numbers')
. ('.')
identifier ('filter')
( ('(')
function ('function')
WHITE_SPACE (' ')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
boolean ('boolean')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
>= ('>=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Positive numbers: "')
, (',')
WHITE_SPACE (' ')
identifier ('positive')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `forEach()` function executes a specified function once for each of')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the elements in the container.')
WHITE_SPACE ('\n    ')
identifier ('numbers')
. ('.')
identifier ('forEach')
( ('(')
function ('function')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('i')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `reduce()` function uses the given combining function to produce')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// a single value. The combining function takes the combined value so far')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// and an element of the container and returns a new combined value.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('total')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('numbers')
. ('.')
identifier ('reduce')
( ('(')
identifier ('sum')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Total: "')
, (',')
WHITE_SPACE (' ')
identifier ('total')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('totalWithInitialValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('numbers')
. ('.')
identifier ('reduce')
( ('(')
identifier ('sum')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Total with initial value: "')
, (',')
WHITE_SPACE (' ')
identifier ('totalWithInitialValue')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nExecution Order:-"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The `forEach()` function applies the given function to each item of the container.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
json ('json')
> ('>')
WHITE_SPACE (' ')
identifier ('j')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"apple"')
, (',')
WHITE_SPACE (' ')
identifier ('colors')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"red"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"green"')
] (']')
, (',')
WHITE_SPACE (' ')
identifier ('price')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('j')
. ('.')
map ('map')
( ('(')
function ('function')
WHITE_SPACE (' ')
( ('(')
json ('json')
WHITE_SPACE (' ')
identifier ('value')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('value')
. ('.')
identifier ('toString')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"- map operation's value: "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('result')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
) (')')
. ('.')
identifier ('forEach')
( ('(')
function ('function')
WHITE_SPACE (' ')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('s')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"-- foreach operation's value: "')
, (',')
WHITE_SPACE (' ')
identifier ('s')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('toUpper')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('value')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('value')
. ('.')
identifier ('toUpperAscii')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('sum')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('accumulator')
, (',')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('currentValue')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('accumulator')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('currentValue')
; (';')
WHITE_SPACE ('\n')
} ('}')
