import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('test')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The `assertEquals()` function allows you to compare primitive types (e.g., int) against composite objects.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// Compares values of the type `int`.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
{ ('{')
} ('}')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertIntEquals')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('answer')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
; (';')
WHITE_SPACE ('\n    ')
identifier ('answer')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('intAdd')
( ('(')
identifier ('a')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('answer')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('8')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"int values not equal"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Compares values of the type `float`.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
{ ('{')
} ('}')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertFloatEquals')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('10.000')
; (';')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('20.050')
; (';')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('answer')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('floatAdd')
( ('(')
identifier ('a')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('answer')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('30.050')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"float values not equal"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Compares values of the type `string`.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
{ ('{')
} ('}')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertStringEquals')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Doe"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('concatenated')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('stringConcat')
( ('(')
identifier ('a')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('concatenated')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"JohnDoe"')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"string values not equal"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Compares values of the type `json`.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
{ ('{')
} ('}')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertJsonEquals')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Ballerina"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Ballerina"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('a')
, (',')
WHITE_SPACE (' ')
identifier ('b')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"JSON values not equal"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Compares values of the type `boolean`.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
{ ('{')
} ('}')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertBooleanEquals')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('y')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('x')
, (',')
WHITE_SPACE (' ')
identifier ('y')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"boolean values not equal"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Compares values of the type `string[]`.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
{ ('{')
} ('}')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertStringArrayEquals')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"A"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"B"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"C"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('y')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"A"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"B"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"C"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('x')
, (',')
WHITE_SPACE (' ')
identifier ('y')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"string array values not equal"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Compares values of the type `int[]`.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
{ ('{')
} ('}')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertIntArrayEquals')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
] (']')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('y')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('x')
, (',')
WHITE_SPACE (' ')
identifier ('y')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"int array values not equal"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Compares values of the type `float[]`.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
{ ('{')
} ('}')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertFloatArrayEquals')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
float ('float')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_FLOATING_POINT_NUMBER ('1.1')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('2.2')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('3.3')
] (']')
; (';')
WHITE_SPACE ('\n    ')
float ('float')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('y')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_FLOATING_POINT_NUMBER ('1.1')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('2.2')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('3.3')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('x')
, (',')
WHITE_SPACE (' ')
identifier ('y')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"float array values not equal"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Compares distinct values of the type `string`.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
{ ('{')
} ('}')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertNotEqualsString')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"abc"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"def"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertNotEquals')
( ('(')
identifier ('s1')
, (',')
WHITE_SPACE (' ')
identifier ('s2')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"string values are equal"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Compares distinct values of the type `json`.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
{ ('{')
} ('}')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertNotEqualsJson')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('s1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"a"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"b"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('s2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"a"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"c"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertNotEquals')
( ('(')
identifier ('s1')
, (',')
WHITE_SPACE (' ')
identifier ('s2')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"JSON values are equal"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Asserts `true`.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
{ ('{')
} ('}')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertTrue')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('value')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertTrue')
( ('(')
identifier ('value')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"AssertTrue failed"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Asserts `false`.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
{ ('{')
} ('}')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertFalse')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('value')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertFalse')
( ('(')
identifier ('value')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"AssertFalse failed"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// A test-example, which is failing intentionally.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
{ ('{')
} ('}')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertFail')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
BOOLEAN_LITERAL ('true')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertFail')
( ('(')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"AssertFailed"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('intAdd')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('a')
, (',')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('b')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('a')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('floatAdd')
( ('(')
float ('float')
WHITE_SPACE (' ')
identifier ('a')
, (',')
WHITE_SPACE (' ')
float ('float')
WHITE_SPACE (' ')
identifier ('b')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
float ('float')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('a')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('stringConcat')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('a')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('b')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('a')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
