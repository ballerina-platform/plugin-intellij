import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('lang')
. ('.')
identifier (''float')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('floats')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('lang')
. ('.')
identifier (''int')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('ints')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The types `int`, `float`, `decimal`, `string`, `boolean`, `byte`, and `nil` are called simple basic types')
WHITE_SPACE ('\n')
LINE_COMMENT ('// because they are basic types with only simple values. Simple values are always immutable.')
WHITE_SPACE ('\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The `int` type represents the set of 64-bit signed integers.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('i')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `ballerina/lang.int` module contains common functions that can be used')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// with `int` values.')
WHITE_SPACE ('\n    ')
int ('int')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('i2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('ints')
: (':')
identifier ('fromString')
( ('(')
QUOTED_STRING_LITERAL ('"100"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('i2')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('i2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `float` type represents the set of double precision IEEE 754 floating point numbers.')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('f')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('20.0')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('f')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `ballerina/lang.float` module contains common functions that can be used with `float` values.')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('f1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('floats')
: (':')
identifier ('fromBitsInt')
( ('(')
identifier ('i')
) (')')
; (';')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('f2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('22.0')
; (';')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('max')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('floats')
: (':')
identifier ('max')
( ('(')
identifier ('f1')
, (',')
WHITE_SPACE (' ')
identifier ('f2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Max float: "')
, (',')
WHITE_SPACE (' ')
identifier ('max')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `.isNaN()`, `.isInfinite()`, and `.isFinite()` langlib functions are supported by the `float` type.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The `.isNaN()` function will return true if the `float` value is neither finite nor infinite.')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('nanVal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('0.0')
/ ('/')
DECIMAL_FLOATING_POINT_NUMBER ('0.0')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('nanVal')
. ('.')
identifier ('isNaN')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `.isInfinite()` function will return true if the `float` value is neither NaN nor finite.')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('infiniteVal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('12.0')
/ ('/')
DECIMAL_FLOATING_POINT_NUMBER ('0.0')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('infiniteVal')
. ('.')
identifier ('isInfinite')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `.isFinite()` function will return true if the `float` value is neither NaN nor infinite.')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('finiteVal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('6.0')
/ ('/')
DECIMAL_FLOATING_POINT_NUMBER ('3.0')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('finiteVal')
. ('.')
identifier ('isFinite')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `decimal` type represents the set of 128-bits IEEE 754R decimal floating point numbers.')
WHITE_SPACE ('\n    ')
decimal ('decimal')
WHITE_SPACE (' ')
identifier ('d')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('27.5')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('d')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `byte` type represents the set of 8-bit unsigned integers.')
WHITE_SPACE ('\n    ')
byte ('byte')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('23')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('c')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `string` type represents the set of sequences of Unicode code points.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Ballerina"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('s')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `boolean` type has only two values: `true` and `false`.')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `nil` type has a single value and is used to represent the absence of any other value.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Both the `nil` type and the `nil` value are written as `()`.')
WHITE_SPACE ('\n    ')
( ('(')
) (')')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('n')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Another representation for the `nil` value is the `null` literal.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// However, the use of the `null` literal in only allowed in JSON contexts.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
NULL_LITERAL ('null')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('j')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
