import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create a JSON string value.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Apple"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('j1')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create a JSON number value.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('5.36')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('j2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create a JSON true value.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('j3')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create a JSON false value.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j4')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('j4')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create a JSON null value.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j5')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
NULL_LITERAL ('null')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Creates a JSON Object. This is equivalent to a `map<json>`.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j6')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"apple"')
, (',')
WHITE_SPACE (' ')
identifier ('color')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"red"')
, (',')
WHITE_SPACE (' ')
identifier ('price')
: (':')
WHITE_SPACE (' ')
identifier ('j2')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('j6')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `.toJsonString()` defined for `json` values returns a `string` that')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// represents the value in JSON format.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('j6')
. ('.')
identifier ('toJsonString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create a JSON Array. This is equivalent to a `json[]`.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j7')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
, (',')
WHITE_SPACE (' ')
NULL_LITERAL ('null')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"foo"')
, (',')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('first')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John"')
, (',')
WHITE_SPACE (' ')
identifier ('last')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Pala"')
WHITE_SPACE (' ')
} ('}')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('j7')
. ('.')
identifier ('toJsonString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `.mergeJson()` method can be used to merge two `json` values.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If either of the two values is `null`, the result of `.mergeJson()` is')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the other value.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j8')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
checkpanic ('checkpanic')
WHITE_SPACE (' ')
identifier ('j5')
. ('.')
identifier ('mergeJson')
( ('(')
identifier ('j7')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('j8')
. ('.')
identifier ('toJsonString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// `.mergeJson()` can also be used to merge two JSON objects.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Where both `json` values are mappings, for each entry in the second,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// if an entry is not present in the first by the same key, the entry')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// is added to the first mapping. If there is already a field by the same')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// key in the first mapping, `.mergeJson()` is called recursively.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j9')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Anne"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
NULL_LITERAL ('null')
, (',')
WHITE_SPACE (' ')
identifier ('marks')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('math')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('90')
, (',')
WHITE_SPACE (' ')
identifier ('language')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('95')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j10')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
( ('(')
) (')')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('20')
, (',')
WHITE_SPACE (' ')
identifier ('marks')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('physics')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('85')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j11')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
checkpanic ('checkpanic')
WHITE_SPACE (' ')
identifier ('j9')
. ('.')
identifier ('mergeJson')
( ('(')
identifier ('j10')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('j11')
. ('.')
identifier ('toJsonString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Reference equality checks between `j9` and `j11` evaluate to true since')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the `j9` itself is updated and returned if the merge is successful.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('j9')
WHITE_SPACE (' ')
=== ('===')
WHITE_SPACE (' ')
identifier ('j11')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// `.mergeJson()` returns an `error` if the values cannot be merged.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// For example, attempting to merge a mapping value with a non-mapping value')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// or two non-mapping values where neither is `null`.')
WHITE_SPACE ('\n    ')
json ('json')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('j12')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('j2')
. ('.')
identifier ('mergeJson')
( ('(')
identifier ('j3')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('j12')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `.fromJsonString()` defined on `string` values attempts parsing the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// string expected to be in the JSON format and returns the represented JSON value ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// if successful. This method returns an error if the string cannot be parsed.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('j6')
. ('.')
identifier ('toJsonString')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j13')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
checkpanic ('checkpanic')
WHITE_SPACE (' ')
identifier ('s')
. ('.')
identifier ('fromJsonString')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('j13')
. ('.')
identifier ('toJsonString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The value would be equal to the original value from which the string')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// was created.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('j6')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('j13')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
