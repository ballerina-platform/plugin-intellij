import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('lang')
. ('.')
identifier (''decimal')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('decimals')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('lang')
. ('.')
identifier (''float')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('floats')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('lang')
. ('.')
identifier (''int')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('ints')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Employee')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('empNo')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function attempts to convert an `anydata` record `Employee` to an `anydata` record `Person`.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('convertEmployeeToPerson')
( ('(')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('emp')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Attempts to create a new value of the type `Person` from the `Employee`-typed `emp` value without changing ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the inherent type of `emp`.')
WHITE_SPACE ('\n    ')
identifier ('Person')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('Person')
. ('.')
identifier ('constructFrom')
( ('(')
identifier ('emp')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('res')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('Person')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// If the conversion is successful, this prints the `name` field.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Employee to Person, name: "')
, (',')
WHITE_SPACE (' ')
identifier ('res')
[ ('[')
QUOTED_STRING_LITERAL ('"name"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred on conversion"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function attempts to convert an `anydata` constrained map to an `anydata` record `Person`.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The conversion would return an error if an incompatible value is found.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('convertAnydataMapToPerson')
( ('(')
map ('map')
< ('<')
anydata ('anydata')
> ('>')
WHITE_SPACE (' ')
identifier ('m')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Attempts to create a new value of the type `Person` from the `map<anydata>` typed `m` value without changing')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the inherent type of `m`.')
WHITE_SPACE ('\n    ')
identifier ('Person')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('Person')
. ('.')
identifier ('constructFrom')
( ('(')
identifier ('m')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('res')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('Person')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// If the conversion is successful, this prints the `name` field.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"map<anydata> to Person, name: "')
, (',')
WHITE_SPACE (' ')
identifier ('res')
[ ('[')
QUOTED_STRING_LITERAL ('"name"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred on conversion: "')
, (',')
WHITE_SPACE (' ')
identifier ('res')
. ('.')
identifier ('detail')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function creates numeric values from string values.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('createNumericValues')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"45"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"abc"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"12.3"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s4')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"8"')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `fromString()` method in the ballerina/lang.int module returns the integer value represented by a')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// given string if there is a valid representation, else returns an `error`.')
WHITE_SPACE ('\n    ')
int ('int')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('res1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('ints')
: (':')
identifier ('fromString')
( ('(')
identifier ('s1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('res1')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"int value: "')
, (',')
WHITE_SPACE (' ')
identifier ('res1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"error: "')
, (',')
WHITE_SPACE (' ')
identifier ('res1')
. ('.')
identifier ('detail')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('res1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('ints')
: (':')
identifier ('fromString')
( ('(')
identifier ('s2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('res1')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"int value: "')
, (',')
WHITE_SPACE (' ')
identifier ('res1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"error: "')
, (',')
WHITE_SPACE (' ')
identifier ('res1')
. ('.')
identifier ('detail')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `fromString()` method in the ballerina/lang.float module returns the float value represented by a given')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// string if there is a valid representation, else returns an `error`.')
WHITE_SPACE ('\n    ')
float ('float')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('res2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('floats')
: (':')
identifier ('fromString')
( ('(')
identifier ('s3')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('res2')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
float ('float')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"float value: "')
, (',')
WHITE_SPACE (' ')
identifier ('res2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"error: "')
, (',')
WHITE_SPACE (' ')
identifier ('res2')
. ('.')
identifier ('detail')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `fromString()` method in the ballerina/lang.decimal module returns the decimal value represented by a given')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// string if there is a valid representation, else returns an `error`.')
WHITE_SPACE ('\n    ')
decimal ('decimal')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('res3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('decimals')
: (':')
identifier ('fromString')
( ('(')
identifier ('s4')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('res3')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
decimal ('decimal')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"decimal value: "')
, (',')
WHITE_SPACE (' ')
identifier ('res3')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"error: "')
, (',')
WHITE_SPACE (' ')
identifier ('res3')
. ('.')
identifier ('detail')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Attempts to convert an `anydata`-typed record to another `anydata`-typed record.')
WHITE_SPACE ('\n    ')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('emp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Jack Sparrow"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('54')
, (',')
WHITE_SPACE (' ')
identifier ('empNo')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('100')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('convertEmployeeToPerson')
( ('(')
identifier ('emp')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Attempts to convert an `anydata` constrained map to an `anydata`-typed record.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This conversion would be successful since all the expected elements are present.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
anydata ('anydata')
> ('>')
WHITE_SPACE (' ')
identifier ('m')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Hector Barbossa"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('54')
, (',')
WHITE_SPACE (' ')
identifier ('empNo')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('100')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('convertAnydataMapToPerson')
( ('(')
identifier ('m')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This conversion would not be successful since all the required elements are not')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// present in the map.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
anydata ('anydata')
> ('>')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Elizabeth Swann"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('convertAnydataMapToPerson')
( ('(')
identifier ('n')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Attempts to convert strings to numeric types.')
WHITE_SPACE ('\n    ')
identifier ('createNumericValues')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
