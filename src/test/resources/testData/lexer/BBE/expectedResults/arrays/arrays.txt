import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Creates an `int` array of length 0.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('a')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Creates an array specifying an array literal.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('6')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('7')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('8')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('b')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('b')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Arrays support several inbuilt functions such as `.reverse()`, `.pop()`, `.push()`, and `.removeAll()`.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('bReveresed')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('b')
. ('.')
identifier ('reverse')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Reversed: "')
, (',')
WHITE_SPACE (' ')
identifier ('bReveresed')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Before pop: "')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('poppedValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('b')
. ('.')
identifier ('pop')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Popped value: "')
, (',')
WHITE_SPACE (' ')
identifier ('poppedValue')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"After pop: "')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Arrays are an iterable type and arrays support functional iteration operations such as `.map()`, `.filter()`, and')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `.reduce()`.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('doubled')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('b')
. ('.')
map ('map')
( ('(')
function ('function')
WHITE_SPACE (' ')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('value')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
return ('return')
WHITE_SPACE (' ')
identifier ('value')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Doubled: "')
, (',')
WHITE_SPACE (' ')
identifier ('doubled')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Unless the length is explicitly specified or is expected to be inferred, arrays are unbounded in length.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// They can grow up to any length based on the given index.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// In this example, the length of the array is 1000.')
WHITE_SPACE ('\n    ')
identifier ('b')
[ ('[')
DECIMAL_INTEGER_LITERAL ('999')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('23')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('b')
[ ('[')
DECIMAL_INTEGER_LITERAL ('999')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('b')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Initializes a two dimensional `int` array.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('iarray')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('10')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('20')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('30')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('5')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('6')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('7')
] (']')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('iarray')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('iarray')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Initializes the outermost array to an empty array.')
WHITE_SPACE ('\n    ')
identifier ('iarray')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
] (']')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Adds a new array as the first element.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('d')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('9')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('iarray')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('d')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Prints the first value of the two-dimensional array.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('iarray')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Creates an `int` array with the fixed length of five.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
DECIMAL_INTEGER_LITERAL ('5')
] (']')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('e')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// To infer the size of the array from the array literal, use the following syntax.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The length of the array is set to four here.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
* ('*')
] (']')
WHITE_SPACE (' ')
identifier ('g')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('g')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
