import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('country')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Country')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Capital')
WHITE_SPACE (' ')
identifier ('capital')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Capital')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
LEFT_CLOSED_RECORD_DELIMITER ('{|')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n')
RIGHT_CLOSED_RECORD_DELIMITER ('|}')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('firstName')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('personAge')
; (';')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
anydata ('anydata')
| ('|')
error ('error')
> ('>')
WHITE_SPACE (' ')
identifier ('otherDetails')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This record destructure binding pattern will destructure a `record` of the type `Person` and assign the values')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// to three variable references as follows:')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The value of the field `name` in the `Person` record will be assigned to the variable `firstName`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The value of the field `age` in the `Person` record will be assigned to the variable `personAge`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `...otherDetails` is a rest parameter. Since `Person` is an open record, the remaining field values that have')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// not been matched in the record binding pattern will be assigned as a `map<anydata|error>` to the variable')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `otherDetails`.')
WHITE_SPACE ('\n    ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
identifier ('firstName')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
identifier ('personAge')
, (',')
WHITE_SPACE (' ')
... ('...')
identifier ('otherDetails')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getPerson')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Name: "')
, (',')
WHITE_SPACE (' ')
identifier ('firstName')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Age: "')
, (',')
WHITE_SPACE (' ')
identifier ('personAge')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Other Details: "')
, (',')
WHITE_SPACE (' ')
identifier ('otherDetails')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If no variable name is given for a field, the value of the field will be assigned to a variable reference of the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// same name as the field.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// i.e., {name, age} is same as {name: name, age: age}.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Since a rest parameter is not given, all remaining fields are ignored.')
WHITE_SPACE ('\n    ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
, (',')
WHITE_SPACE (' ')
identifier ('age')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getPerson')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Name: "')
, (',')
WHITE_SPACE (' ')
identifier ('name')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Age: "')
, (',')
WHITE_SPACE (' ')
identifier ('age')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('countryName')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('capitalName')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Binding patterns are recursive in nature. `capital`, which is a field of type `Capital` in `Country` can also be')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// destructured as follows:')
WHITE_SPACE ('\n    ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
identifier ('countryName')
, (',')
WHITE_SPACE (' ')
identifier ('capital')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
identifier ('capitalName')
WHITE_SPACE (' ')
} ('}')
} ('}')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getCountry')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Country Name: "')
, (',')
WHITE_SPACE (' ')
identifier ('countryName')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Capital Name: "')
, (',')
WHITE_SPACE (' ')
identifier ('capitalName')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getPerson')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('person')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Peter"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('28')
, (',')
WHITE_SPACE (' ')
identifier ('country')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Sri Lanka"')
, (',')
WHITE_SPACE ('\n                      ')
QUOTED_STRING_LITERAL ('"occupation"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Software Engineer"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('person')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getCountry')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
identifier ('Country')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('Capital')
WHITE_SPACE (' ')
identifier ('capital')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Colombo"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Country')
WHITE_SPACE (' ')
identifier ('country')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Sri Lanka"')
, (',')
WHITE_SPACE (' ')
identifier ('capital')
: (':')
WHITE_SPACE (' ')
identifier ('capital')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('country')
; (';')
WHITE_SPACE ('\n')
} ('}')
