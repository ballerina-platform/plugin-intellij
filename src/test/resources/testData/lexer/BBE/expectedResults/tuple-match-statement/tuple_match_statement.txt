import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// In this example, four variables are created and they will be matched against')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the patterns specified in the `match` statement of the `basicMatch()` function.')
WHITE_SPACE ('\n    ')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
| ('|')
[ ('[')
float ('float')
, (',')
WHITE_SPACE (' ')
string ('string')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
| ('|')
float ('float')
WHITE_SPACE (' ')
identifier ('a1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('66.6')
; (';')
WHITE_SPACE ('\n    ')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
| ('|')
[ ('[')
float ('float')
, (',')
WHITE_SPACE (' ')
string ('string')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
| ('|')
float ('float')
WHITE_SPACE (' ')
identifier ('a2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"Hello"')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('12')
] (']')
; (';')
WHITE_SPACE ('\n    ')
[ ('[')
float ('float')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
| ('|')
[ ('[')
float ('float')
, (',')
WHITE_SPACE (' ')
string ('string')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
| ('|')
float ('float')
WHITE_SPACE (' ')
identifier ('a3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_FLOATING_POINT_NUMBER ('4.5')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
] (']')
; (';')
WHITE_SPACE ('\n    ')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
| ('|')
[ ('[')
float ('float')
, (',')
WHITE_SPACE (' ')
string ('string')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
| ('|')
float ('float')
WHITE_SPACE (' ')
identifier ('a4')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_FLOATING_POINT_NUMBER ('6.7')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Test"')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
] (']')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('basicMatch')
( ('(')
identifier ('a1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('basicMatch')
( ('(')
identifier ('a2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('basicMatch')
( ('(')
identifier ('a3')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('basicMatch')
( ('(')
identifier ('a4')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// In this example, five variables are created and they will be matched')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// against the match-guarded patterns specified in the `match` statement of the 'matchWithMatchGuard()' function.')
WHITE_SPACE ('\n    ')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
| ('|')
[ ('[')
boolean ('boolean')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
| ('|')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
| ('|')
int ('int')
| ('|')
float ('float')
WHITE_SPACE (' ')
identifier ('b1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"Hello"')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('45')
] (']')
; (';')
WHITE_SPACE ('\n    ')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
| ('|')
[ ('[')
float ('float')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
| ('|')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
| ('|')
int ('int')
| ('|')
float ('float')
WHITE_SPACE (' ')
identifier ('b2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_FLOATING_POINT_NUMBER ('4.5')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
] (']')
; (';')
WHITE_SPACE ('\n    ')
[ ('[')
float ('float')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
| ('|')
[ ('[')
boolean ('boolean')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
| ('|')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
| ('|')
int ('int')
| ('|')
float ('float')
WHITE_SPACE (' ')
identifier ('b3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
BOOLEAN_LITERAL ('false')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
] (']')
; (';')
WHITE_SPACE ('\n    ')
[ ('[')
string ('string')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
| ('|')
[ ('[')
float ('float')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
| ('|')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
| ('|')
int ('int')
| ('|')
float ('float')
WHITE_SPACE (' ')
identifier ('b4')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('455')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
] (']')
; (';')
WHITE_SPACE ('\n    ')
[ ('[')
float ('float')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
| ('|')
[ ('[')
boolean ('boolean')
, (',')
WHITE_SPACE (' ')
int ('int')
] (']')
| ('|')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
| ('|')
float ('float')
WHITE_SPACE (' ')
identifier ('b5')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('5.6')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('matchWithMatchGuard')
( ('(')
identifier ('b1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('matchWithMatchGuard')
( ('(')
identifier ('b2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('matchWithMatchGuard')
( ('(')
identifier ('b3')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('matchWithMatchGuard')
( ('(')
identifier ('b4')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('matchWithMatchGuard')
( ('(')
identifier ('b5')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This method uses tuple match patterns of different sizes. The `match` expression `a`')
WHITE_SPACE ('\n')
LINE_COMMENT ('// will be matched against the given pattern list at run time based on the')
WHITE_SPACE ('\n')
LINE_COMMENT ('// "is-like" relationship between the expression and a pattern.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('basicMatch')
( ('(')
any ('any')
WHITE_SPACE (' ')
identifier ('a')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern check is for a tuple of three members of any type.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
[ ('[')
identifier ('s')
, (',')
WHITE_SPACE (' ')
identifier ('i')
, (',')
WHITE_SPACE (' ')
identifier ('b')
] (']')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched with three vars : "')
, (',')
WHITE_SPACE ('  ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('a')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern check is for a tuple of two members of any type.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
[ ('[')
identifier ('s')
, (',')
WHITE_SPACE (' ')
identifier ('i')
] (']')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched with two vars : "')
, (',')
WHITE_SPACE ('  ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('a')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern check is for a single variable, which can be of type `any`. This has to be the last pattern.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched with single var : "')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('a')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This method uses structured tuple match patterns with different sizes along with match guards. The given')
WHITE_SPACE ('\n')
LINE_COMMENT ('// `match` expression will be checked for "is-like" relationship and also it will check the match guard for the pattern')
WHITE_SPACE ('\n')
LINE_COMMENT ('// to match at runtime.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('matchWithMatchGuard')
( ('(')
any ('any')
WHITE_SPACE (' ')
identifier ('b')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern check is for a tuple of two members of the types `string` and `int` respectively.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
[ ('[')
identifier ('s')
, (',')
WHITE_SPACE (' ')
identifier ('i')
] (']')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('s')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
&& ('&&')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"'s' is string and 'i' is int : "')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern check is for a tuple of two members where the first member is of the type `float`.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
[ ('[')
identifier ('s')
, (',')
WHITE_SPACE (' ')
identifier ('i')
] (']')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
float ('float')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Only 's' is float : "')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern check is for a tuple of two members where the second member is of the type `int`.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
[ ('[')
identifier ('s')
, (',')
WHITE_SPACE (' ')
identifier ('i')
] (']')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n           ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Only 'i' is int : "')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern check is for a tuple of two members without any match guard.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
[ ('[')
identifier ('s')
, (',')
WHITE_SPACE (' ')
identifier ('i')
] (']')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"No type guard : "')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern check is for a single variable of the type `float`.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
float ('float')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n           ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"'s' is float only : "')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
