import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerinax')
/ ('/')
identifier ('java')
. ('.')
identifier ('jdbc')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Client for MySQL database. This client can be used with any JDBC')
WHITE_SPACE ('\n')
LINE_COMMENT ('// supported database by providing the corresponding JDBC URL.')
WHITE_SPACE ('\n')
identifier ('jdbc')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('testDB')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"jdbc:mysql://localhost:3306/testdb"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('username')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"test"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"test"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('poolOptions')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('maximumPoolSize')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
WHITE_SPACE (' ')
} ('}')
, (',')
WHITE_SPACE ('\n    ')
identifier ('dbOptions')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('useSSL')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This is the `type` created to represent a data row.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Student')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('id')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create a table using the `update` remote function. If the DDL')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// statement execution is successful, the `update` remote function')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// returns 0.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"The update operation - Creating table and procedures:"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"CREATE TABLE student(id INT AUTO_INCREMENT, "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                         ')
QUOTED_STRING_LITERAL ('"age INT, name VARCHAR(255), PRIMARY KEY (id))"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Create student table"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create the stored procedure with IN parameters.')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"CREATE PROCEDURE INSERTDATA(IN pAge INT, "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                       ')
QUOTED_STRING_LITERAL ('"IN pName VARCHAR(255)) "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n	                   ')
QUOTED_STRING_LITERAL ('"BEGIN "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                       ')
QUOTED_STRING_LITERAL ('"INSERT INTO student(age, name) values (pAge, pName); "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                       ')
QUOTED_STRING_LITERAL ('"END"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Stored procedure with IN param creation"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create the stored procedure with INOUT and OUT parameters.')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"CREATE PROCEDURE GETCOUNT (INOUT pID INT, "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                          ')
QUOTED_STRING_LITERAL ('"OUT pCount INT) "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                          ')
QUOTED_STRING_LITERAL ('"BEGIN "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                          ')
QUOTED_STRING_LITERAL ('"SELECT id INTO pID FROM student WHERE age = pID; "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                          ')
QUOTED_STRING_LITERAL ('"SELECT COUNT(*) INTO pCount FROM student "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                            ')
QUOTED_STRING_LITERAL ('"WHERE age = 20; "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                          ')
QUOTED_STRING_LITERAL ('"END"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Stored procedure with INOUT/OUT param creation"')
) (')')
; (';')
WHITE_SPACE ('\n\n\n    ')
LINE_COMMENT ('// The remote function `call` is used to invoke a stored procedure.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Here the stored procedure with IN parameters is invoked.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nThe call operation - With IN params"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Invoke the stored procedure with IN type parameters.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('retCall')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('call')
( ('(')
QUOTED_STRING_LITERAL ('"{CALL INSERTDATA(?,?)}"')
, (',')
WHITE_SPACE (' ')
( ('(')
) (')')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('20')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"George"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('retCall')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
( ('(')
) (')')
| ('|')
table ('table')
< ('<')
record ('record')
WHITE_SPACE (' ')
{ ('{')
} ('}')
> ('>')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Call operation with IN params successful"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
error ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('retCall')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Stored procedure call failed: "')
, (',')
WHITE_SPACE ('\n                 ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('detail')
( ('(')
) (')')
[ ('[')
QUOTED_STRING_LITERAL ('"message"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Here stored procedure with OUT and INOUT parameters is invoked.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nThe call operation - With INOUT/OUT params"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Inovke the stored procedure.')
WHITE_SPACE ('\n    ')
identifier ('jdbc')
: (':')
identifier ('Parameter')
WHITE_SPACE (' ')
identifier ('param1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('sqlType')
: (':')
WHITE_SPACE (' ')
identifier ('jdbc')
: (':')
identifier ('TYPE_INTEGER')
, (',')
WHITE_SPACE (' ')
identifier ('value')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('20')
, (',')
WHITE_SPACE ('\n        ')
identifier ('direction')
: (':')
WHITE_SPACE (' ')
identifier ('jdbc')
: (':')
identifier ('DIRECTION_INOUT')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('jdbc')
: (':')
identifier ('Parameter')
WHITE_SPACE (' ')
identifier ('param2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('sqlType')
: (':')
WHITE_SPACE (' ')
identifier ('jdbc')
: (':')
identifier ('TYPE_INTEGER')
, (',')
WHITE_SPACE ('\n        ')
identifier ('direction')
: (':')
WHITE_SPACE (' ')
identifier ('jdbc')
: (':')
identifier ('DIRECTION_OUT')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('retCall')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('call')
( ('(')
QUOTED_STRING_LITERAL ('"{CALL GETCOUNT(?,?)}"')
, (',')
WHITE_SPACE (' ')
( ('(')
) (')')
, (',')
WHITE_SPACE (' ')
identifier ('param1')
, (',')
WHITE_SPACE (' ')
identifier ('param2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('retCall')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
( ('(')
) (')')
| ('|')
table ('table')
< ('<')
record ('record')
WHITE_SPACE (' ')
{ ('{')
} ('}')
> ('>')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Call operation with INOUT and OUT params successful"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"Student ID of the student with age = 20: "')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('param1')
. ('.')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"Student count with age = 20: "')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('param2')
. ('.')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
error ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('retCall')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Stored procedure call failed: "')
, (',')
WHITE_SPACE ('\n                 ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('detail')
( ('(')
) (')')
[ ('[')
QUOTED_STRING_LITERAL ('"message"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('checkData')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//Drop the table and procedures.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nThe update operation - Drop the tables and procedures"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"DROP TABLE student"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Drop table student"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"DROP PROCEDURE INSERTDATA"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Drop stored procedure INSERTDATA"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"DROP PROCEDURE GETCOUNT"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Drop stored procedure GETCOUNT"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Function to handle the return value of the `update` remote function.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('handleUpdate')
( ('(')
identifier ('jdbc')
: (':')
identifier ('UpdateResult')
| ('|')
identifier ('jdbc')
: (':')
identifier ('Error')
WHITE_SPACE (' ')
identifier ('returned')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('message')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('returned')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('jdbc')
: (':')
identifier ('UpdateResult')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('message')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" status: "')
, (',')
WHITE_SPACE (' ')
identifier ('returned')
. ('.')
identifier ('updatedRowCount')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
error ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('returned')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('message')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" failed: "')
, (',')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('detail')
( ('(')
) (')')
[ ('[')
QUOTED_STRING_LITERAL ('"message"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Select data from the table and print.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('checkData')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('dtReturned')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('select')
( ('(')
QUOTED_STRING_LITERAL ('"SELECT * FROM student"')
, (',')
WHITE_SPACE (' ')
identifier ('Student')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('dtReturned')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
table ('table')
< ('<')
identifier ('Student')
> ('>')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Iterating data.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Data in students table:"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('row')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('dtReturned')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Student:"')
, (',')
WHITE_SPACE (' ')
identifier ('row')
. ('.')
identifier ('id')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"|"')
, (',')
WHITE_SPACE (' ')
identifier ('row')
. ('.')
identifier ('name')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"|"')
, (',')
WHITE_SPACE (' ')
identifier ('row')
. ('.')
identifier ('age')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
error ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('dtReturned')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Select data from student table failed: "')
, (',')
WHITE_SPACE ('\n                 ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('detail')
( ('(')
) (')')
[ ('[')
QUOTED_STRING_LITERAL ('"message"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
