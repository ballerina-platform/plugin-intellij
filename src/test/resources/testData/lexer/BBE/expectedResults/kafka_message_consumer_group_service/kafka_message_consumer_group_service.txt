import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('kafka')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('lang')
. ('.')
WHITE_SPACE (' ')
identifier (''string')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('strings')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// `bootstrapServers` is the list of remote server endpoints of the Kafka brokers.')
WHITE_SPACE ('\n')
identifier ('kafka')
: (':')
identifier ('ConsumerConfig')
WHITE_SPACE (' ')
identifier ('consumerConfigs')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('bootstrapServers')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"localhost:9092"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('concurrentConsumers')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE ('\n    ')
identifier ('groupId')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"group-id"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('topics')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"test-kafka-topic"')
] (']')
, (',')
WHITE_SPACE ('\n    ')
identifier ('pollingIntervalInMillis')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1000')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
listener ('listener')
WHITE_SPACE (' ')
identifier ('kafka')
: (':')
identifier ('Consumer')
WHITE_SPACE (' ')
identifier ('consumer')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
( ('(')
identifier ('consumerConfigs')
) (')')
; (';')
WHITE_SPACE ('\n\n')
service ('service')
WHITE_SPACE (' ')
identifier ('kafkaService')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
identifier ('consumer')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onMessage')
( ('(')
identifier ('kafka')
: (':')
identifier ('Consumer')
WHITE_SPACE (' ')
identifier ('kafkaConsumer')
, (',')
WHITE_SPACE ('\n            ')
identifier ('kafka')
: (':')
identifier ('ConsumerRecord')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('records')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// The set of Kafka records dispatched to the service processed one by one.')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('kafkaRecord')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('records')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('processKafkaRecord')
( ('(')
identifier ('kafkaRecord')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('processKafkaRecord')
( ('(')
identifier ('kafka')
: (':')
identifier ('ConsumerRecord')
WHITE_SPACE (' ')
identifier ('kafkaRecord')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('serializedMsg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('kafkaRecord')
. ('.')
identifier ('value')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
| ('|')
WHITE_SPACE (' ')
error ('error')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('strings')
: (':')
identifier ('fromBytes')
( ('(')
identifier ('serializedMsg')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('msg')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Print the retrieved Kafka record.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Topic: "')
, (',')
WHITE_SPACE (' ')
identifier ('kafkaRecord')
. ('.')
identifier ('topic')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" Partition: "')
, (',')
WHITE_SPACE ('\n            ')
identifier ('kafkaRecord')
. ('.')
identifier ('partition')
. ('.')
identifier ('toString')
( ('(')
) (')')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" Received Message: "')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while converting message data"')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
