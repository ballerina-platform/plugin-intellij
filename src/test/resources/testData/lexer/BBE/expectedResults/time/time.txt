import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('time')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// To create the `time:Time` object, use either the `currentTime()`,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `createTime()`, or the `parse()` function.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This fetches the current time.')
WHITE_SPACE ('\n    ')
identifier ('time')
: (':')
identifier ('Time')
WHITE_SPACE (' ')
identifier ('time')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('currentTime')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('currentTimeMills')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
. ('.')
identifier ('time')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Current system time in milliseconds: "')
, (',')
WHITE_SPACE (' ')
identifier ('currentTimeMills')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Specifies a time with the required year, month, date,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// time, and timezone information.')
WHITE_SPACE ('\n    ')
identifier ('time')
: (':')
identifier ('Time')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('timeCreated')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('createTime')
( ('(')
DECIMAL_INTEGER_LITERAL ('2017')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('28')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('23')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('42')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('45')
, (',')
WHITE_SPACE ('\n        ')
DECIMAL_INTEGER_LITERAL ('554')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"America/Panama"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('timeCreated')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('Time')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Created Time: "')
, (',')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('toString')
( ('(')
identifier ('timeCreated')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This retrieves the time for a given string representation')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// based on the specified String format.')
WHITE_SPACE ('\n    ')
identifier ('time')
: (':')
identifier ('Time')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('t1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('parse')
( ('(')
QUOTED_STRING_LITERAL ('"2017-06-26T09:46:22.444-0500"')
, (',')
WHITE_SPACE ('\n        ')
QUOTED_STRING_LITERAL ('"yyyy-MM-dd'T'HH:mm:ss.SSSZ"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('t1')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('Time')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Parsed Time: "')
, (',')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('toString')
( ('(')
identifier ('t1')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// You can retrieve the string representation of the time via the `toString()`')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// function or the `format()` function.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This fetches the ISO 8601 formatted String of a given time.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('standardTimeString')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('toString')
( ('(')
identifier ('time')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Current system time in ISO format: "')
, (',')
WHITE_SPACE (' ')
identifier ('standardTimeString')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This fetches the formatted String of a given time.')
WHITE_SPACE ('\n    ')
string ('string')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('customTimeString')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('format')
( ('(')
identifier ('time')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"yyyy-MM-dd-E"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('customTimeString')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Current system time in custom format: "')
, (',')
WHITE_SPACE (' ')
identifier ('customTimeString')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// These functions retrieve information related to a time object.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This fetches the year of a given time.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('year')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('getYear')
( ('(')
identifier ('time')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Year: "')
, (',')
WHITE_SPACE (' ')
identifier ('year')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This fetches the month value of a given time.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('month')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('getMonth')
( ('(')
identifier ('time')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Month: "')
, (',')
WHITE_SPACE (' ')
identifier ('month')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This fetches the day value of a given time.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('day')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('getDay')
( ('(')
identifier ('time')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Day: "')
, (',')
WHITE_SPACE (' ')
identifier ('day')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This fetches the hour value of a given time.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('hour')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('getHour')
( ('(')
identifier ('time')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Hour: "')
, (',')
WHITE_SPACE (' ')
identifier ('hour')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This fetches the minute value of a given time.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('minute')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('getMinute')
( ('(')
identifier ('time')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Minute: "')
, (',')
WHITE_SPACE (' ')
identifier ('minute')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This fetches the seconds value of a given time.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('second')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('getSecond')
( ('(')
identifier ('time')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Second: "')
, (',')
WHITE_SPACE (' ')
identifier ('second')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This fetches the millisecond value of a given time.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('milliSecond')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('getMilliSecond')
( ('(')
identifier ('time')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Millisecond: "')
, (',')
WHITE_SPACE (' ')
identifier ('milliSecond')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This fetches the day of the week of a given time.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('weekday')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('getWeekday')
( ('(')
identifier ('time')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Weekday: "')
, (',')
WHITE_SPACE (' ')
identifier ('weekday')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This fetches the date component of the time using a single function.')
WHITE_SPACE ('\n    ')
[ ('[')
identifier ('year')
, (',')
WHITE_SPACE (' ')
identifier ('month')
, (',')
WHITE_SPACE (' ')
identifier ('day')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('getDate')
( ('(')
identifier ('time')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Date: "')
, (',')
WHITE_SPACE (' ')
identifier ('year')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('":"')
, (',')
WHITE_SPACE (' ')
identifier ('month')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('":"')
, (',')
WHITE_SPACE (' ')
identifier ('day')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This fetches the time component using a single function.')
WHITE_SPACE ('\n    ')
[ ('[')
identifier ('hour')
, (',')
WHITE_SPACE (' ')
identifier ('minute')
, (',')
WHITE_SPACE (' ')
identifier ('second')
, (',')
WHITE_SPACE (' ')
identifier ('milliSecond')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('getTime')
( ('(')
identifier ('time')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Time: "')
, (',')
WHITE_SPACE (' ')
identifier ('hour')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('":"')
, (',')
WHITE_SPACE (' ')
identifier ('minute')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('":"')
, (',')
WHITE_SPACE (' ')
identifier ('second')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('":"')
, (',')
WHITE_SPACE (' ')
identifier ('milliSecond')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This adds a given duration to a time. This example adds')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// one year, one month, and one second to the current time.')
WHITE_SPACE ('\n    ')
identifier ('time')
: (':')
identifier ('Time')
WHITE_SPACE (' ')
identifier ('tmAdd')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('addDuration')
( ('(')
identifier ('time')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"After adding a duration: "')
, (',')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('toString')
( ('(')
identifier ('tmAdd')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This subtracts a given duration from a time. This example')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// subtract sone year, one month, and one second from the current time.')
WHITE_SPACE ('\n    ')
identifier ('time')
: (':')
identifier ('Time')
WHITE_SPACE (' ')
identifier ('tmSub')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('subtractDuration')
( ('(')
identifier ('time')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"After subtracting a duration: "')
, (',')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('toString')
( ('(')
identifier ('tmSub')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This converts the time to a different timezone.')
WHITE_SPACE ('\n    ')
identifier ('time')
: (':')
identifier ('Time')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('t2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('createTime')
( ('(')
DECIMAL_INTEGER_LITERAL ('2017')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('28')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('23')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('42')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('45')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('554')
, (',')
WHITE_SPACE ('\n        ')
QUOTED_STRING_LITERAL ('"America/Panama"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('t2')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('Time')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Before converting the time zone: "')
, (',')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('toString')
( ('(')
identifier ('t2')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('time')
: (':')
identifier ('Time')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('t3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('toTimeZone')
( ('(')
identifier ('t2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Asia/Colombo"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('t3')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('Time')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"After converting the time zone: "')
, (',')
WHITE_SPACE (' ')
identifier ('time')
: (':')
identifier ('toString')
( ('(')
identifier ('t3')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
