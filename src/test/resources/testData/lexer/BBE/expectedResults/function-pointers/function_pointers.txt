import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('lang')
. ('.')
identifier (''int')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('ints')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The `test` function acts as a variable function pointer in the `main` function.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('test')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('x')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('s')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
float ('float')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
| ('|')
WHITE_SPACE (' ')
error ('error')
WHITE_SPACE (' ')
identifier ('y')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('ints')
: (':')
identifier ('fromString')
( ('(')
identifier ('s')
) (')')
; (';')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('f')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('0.0')
; (';')
WHITE_SPACE ('\n\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('y')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('f')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('1.0')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
identifier ('y')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// The type of `y` within the else block would be `error`.')
WHITE_SPACE ('\n        ')
panic ('panic')
WHITE_SPACE (' ')
identifier ('y')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('f')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// A function pointer as a parameter. Uses the `.call()` method to invoke the function using the function pointer.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('foo')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('x')
, (',')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
float ('float')
WHITE_SPACE (' ')
identifier ('bar')
) (')')
WHITE_SPACE ('\n             ')
returns ('returns')
WHITE_SPACE (' ')
float ('float')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
identifier ('bar')
( ('(')
DECIMAL_INTEGER_LITERAL ('10')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"2"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// A function pointer as a return type.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getFunctionPointer')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
function ('function')
WHITE_SPACE (' ')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
float ('float')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('test')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Value `test` will serve as a function pointer for the `foo` function.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Answer: "')
, (',')
WHITE_SPACE (' ')
identifier ('foo')
( ('(')
DECIMAL_INTEGER_LITERAL ('10')
, (',')
WHITE_SPACE (' ')
identifier ('test')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Answer: "')
, (',')
WHITE_SPACE (' ')
identifier ('foo')
( ('(')
DECIMAL_INTEGER_LITERAL ('10')
, (',')
WHITE_SPACE (' ')
identifier ('getFunctionPointer')
( ('(')
) (')')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// A function pointer as a variable.')
WHITE_SPACE ('\n    ')
function ('function')
WHITE_SPACE (' ')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
float ('float')
WHITE_SPACE (' ')
identifier ('f')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getFunctionPointer')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Answer: "')
, (',')
WHITE_SPACE (' ')
identifier ('foo')
( ('(')
DECIMAL_INTEGER_LITERAL ('10')
, (',')
WHITE_SPACE (' ')
identifier ('f')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
