import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Defines an anonymous function.')
WHITE_SPACE ('\n    ')
function ('function')
WHITE_SPACE (' ')
( ('(')
string ('string')
, (',')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('anonFunction')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n            ')
function ('function')
WHITE_SPACE (' ')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('x')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('y')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
return ('return')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('y')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Output: "')
, (',')
WHITE_SPACE (' ')
identifier ('anonFunction')
( ('(')
QUOTED_STRING_LITERAL ('"Hello "')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"World.!!!"')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Defines an anonymous function with `var`.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('anonFunction2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('x')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('y')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                            ')
return ('return')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('y')
; (';')
WHITE_SPACE ('\n                        ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Output: "')
, (',')
WHITE_SPACE (' ')
identifier ('anonFunction2')
( ('(')
QUOTED_STRING_LITERAL ('"Hello "')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"World.!!!"')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// If an anonymous function contains only the return statement in the body,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// you can use the `arrow function expression` instead of the anonymous function.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The types of the input parameters are inferred from the left-hand side.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The return of the arrow function expression is determined by the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// evaluation of the expression on the right-hand side of the `=>` symbol.')
WHITE_SPACE ('\n    ')
function ('function')
WHITE_SPACE (' ')
( ('(')
string ('string')
, (',')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('arrowExpr')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
identifier ('x')
, (',')
WHITE_SPACE (' ')
identifier ('y')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('y')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Output: "')
, (',')
WHITE_SPACE (' ')
identifier ('arrowExpr')
( ('(')
QUOTED_STRING_LITERAL ('"Hello "')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"World.!!!"')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
