import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('lang')
. ('.')
identifier (''string')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('strings')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('statement')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Lion in Town. Catch the Lion"')
; (';')
WHITE_SPACE ('\n\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('toUpperAscii')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"ToUpper: "')
, (',')
WHITE_SPACE (' ')
identifier ('s1')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('toLowerAscii')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"ToLower: "')
, (',')
WHITE_SPACE (' ')
identifier ('s2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create a new `string`, which is a substring of the specified string.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// You must provide the original `string`')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// and the starting and ending indexes of the substring.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('substring')
( ('(')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"SubString: "')
, (',')
WHITE_SPACE (' ')
identifier ('s3')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Retrieve the starting index of the first occurrence of the substring "on" within the `statement` string.')
WHITE_SPACE ('\n    ')
int ('int')
? ('?')
WHITE_SPACE (' ')
identifier ('index')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('indexOf')
( ('(')
QUOTED_STRING_LITERAL ('"on"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('index')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"IndexOf: "')
, (',')
WHITE_SPACE (' ')
identifier ('index')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Retrieve the length of the `string`.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('length')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('length')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Length: "')
, (',')
WHITE_SPACE (' ')
identifier ('length')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('hello')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Hello"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('ballerina')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Ballerina!"')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Concat multiple strings.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s4')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('hello')
. ('.')
identifier ('concat')
( ('(')
QUOTED_STRING_LITERAL ('" "')
, (',')
WHITE_SPACE (' ')
identifier ('ballerina')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Concat: "')
, (',')
WHITE_SPACE (' ')
identifier ('s4')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Join strings with a separator.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s5')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('","')
. ('.')
identifier (''join')
( ('(')
identifier ('hello')
, (',')
WHITE_SPACE (' ')
identifier ('ballerina')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Join: "')
, (',')
WHITE_SPACE (' ')
identifier ('s5')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Convert `hello` to a `byte` array.')
WHITE_SPACE ('\n    ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('bArray')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('hello')
. ('.')
identifier ('toBytes')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Convert a `byte` array to a `string`.')
WHITE_SPACE ('\n    ')
string ('string')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('s6')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('strings')
: (':')
identifier ('fromBytes')
( ('(')
identifier ('bArray')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('s6')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"From bytes: "')
, (',')
WHITE_SPACE (' ')
identifier ('s6')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Remove leading and trailing white spaces.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('toTrim')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"  Ballerina Programming Language  "')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s7')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('toTrim')
. ('.')
identifier ('trim')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Trim: "')
, (',')
WHITE_SPACE (' ')
identifier ('s7')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Check whether the given `string` ends with the suffix "Lion".')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('hasSuffix')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('endsWith')
( ('(')
QUOTED_STRING_LITERAL ('"Lion"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"HasSuffix: "')
, (',')
WHITE_SPACE (' ')
identifier ('hasSuffix')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Check whether the given `string` starts with the prefix "Lion".')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('hasPrefix')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('startsWith')
( ('(')
QUOTED_STRING_LITERAL ('"Lion"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"HasPrefix: "')
, (',')
WHITE_SPACE (' ')
identifier ('hasPrefix')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Format a `string` according to the given format arguments.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Sam"')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('marks')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('90')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('subjects')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"English"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Science"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('average')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('71.5')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s8')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s scored %d for %s and has an average of %.2f."')
, (',')
WHITE_SPACE ('\n     ')
identifier ('name')
, (',')
WHITE_SPACE (' ')
identifier ('marks')
, (',')
WHITE_SPACE (' ')
identifier ('subjects')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
, (',')
WHITE_SPACE (' ')
identifier ('average')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Sprintf: "')
, (',')
WHITE_SPACE (' ')
identifier ('s8')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Member access is allowed with strings to access individual characters')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// of a string. Member access panics if the integer index is out of range.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('country')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Sri Lanka"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('country')
[ ('[')
DECIMAL_INTEGER_LITERAL ('4')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Member Access: "')
, (',')
WHITE_SPACE (' ')
identifier ('c')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
