import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('observe')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Create a counter as a global variable in the service with optional field description.')
WHITE_SPACE ('\n')
identifier ('observe')
: (':')
identifier ('Counter')
WHITE_SPACE (' ')
identifier ('globalCounter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"total_orders"')
, (',')
WHITE_SPACE ('\n                                    ')
identifier ('desc')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Total quantity required"')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Make sure you start the service with '--b7a.observability.enabled=true', or metrics enabled.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/online-store-service"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('onlineStoreService')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
( ('(')
DECIMAL_INTEGER_LITERAL ('9090')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/make-order"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('makeOrder')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Incrementing the global counter defined with the default value 1.')
WHITE_SPACE ('\n        ')
identifier ('globalCounter')
. ('.')
identifier ('increment')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//Create a counter with simply a name.')
WHITE_SPACE ('\n        ')
identifier ('observe')
: (':')
identifier ('Counter')
WHITE_SPACE (' ')
identifier ('localCounter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"local_operations"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('localCounter')
. ('.')
identifier ('increment')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Increment the value of the counter by 20.')
WHITE_SPACE ('\n        ')
identifier ('localCounter')
. ('.')
identifier ('increment')
( ('(')
DECIMAL_INTEGER_LITERAL ('20')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//Create a counter with optional fields description, and tags.')
WHITE_SPACE ('\n        ')
identifier ('observe')
: (':')
identifier ('Counter')
WHITE_SPACE (' ')
identifier ('registeredCounter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"total_product_order_quantity"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('desc')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Total quantity required"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('tags')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
identifier ('prodName')
: (':')
QUOTED_STRING_LITERAL ('"HeadPhone"')
, (',')
WHITE_SPACE (' ')
identifier ('prodType')
: (':')
QUOTED_STRING_LITERAL ('"Electronics"')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//Register the counter instance, therefore it is stored in the global registry and can be reported to the')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//metrics server such as Prometheus. Additionally, this operation will register to the global registry for the')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//first invocation and will throw an error if there is already a registration of different metrics instance')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//or type. Subsequent invocations of register() will simply retrieve the stored metrics instance')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//for the provided name and tags fields, and use that instance for the subsequent operations on the')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//counter instance.')
WHITE_SPACE ('\n        ')
error ('error')
? ('?')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('registeredCounter')
. ('.')
identifier ('register')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in registering counter"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//Increase the amount of the registered counter instance by amount 10.')
WHITE_SPACE ('\n        ')
identifier ('registeredCounter')
. ('.')
identifier ('increment')
( ('(')
DECIMAL_INTEGER_LITERAL ('10')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//Get the value of the counter instances.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"------------------------------------------"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Global Counter = "')
, (',')
WHITE_SPACE (' ')
identifier ('globalCounter')
. ('.')
identifier ('getValue')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Local Counter = "')
, (',')
WHITE_SPACE (' ')
identifier ('localCounter')
. ('.')
identifier ('getValue')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Registered Counter = "')
, (',')
WHITE_SPACE (' ')
identifier ('registeredCounter')
. ('.')
identifier ('getValue')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"------------------------------------------"')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//Send reponse to the client.')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Use a util method to set a string payload.')
WHITE_SPACE ('\n        ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
QUOTED_STRING_LITERAL ('"Order Processed!"')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Send the response back to the caller.')
WHITE_SPACE ('\n        ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('res')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
