import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('runtime')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('task')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Defines a custom record type to use in the timer.')
WHITE_SPACE ('\n')
public ('public')
WHITE_SPACE (' ')
type ('type')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
LEFT_CLOSED_RECORD_DELIMITER ('{|')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('maxAge')
; (';')
WHITE_SPACE ('\n')
RIGHT_CLOSED_RECORD_DELIMITER ('|}')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The interval in which the timer should trigger.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('intervalInMillis')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1000')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Initializes the timer scheduler using the interval value.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The delay will be equal to the interval as an initial delay is not provided.')
WHITE_SPACE ('\n    ')
identifier ('task')
: (':')
identifier ('Scheduler')
WHITE_SPACE (' ')
identifier ('timer')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('intervalInMillis')
: (':')
WHITE_SPACE (' ')
identifier ('intervalInMillis')
, (',')
WHITE_SPACE ('\n        ')
identifier ('initialDelayInMillis')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
WHITE_SPACE ('\n    ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Define a person object')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('person')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Sam"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
identifier ('maxAge')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Attaching the service to the timer. This will not start the timer.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// However, it will attach the service to the timer and also passes the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// person object into the `onTrigger()` resource')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('attachResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('timer')
. ('.')
identifier ('attach')
( ('(')
identifier ('service1')
, (',')
WHITE_SPACE (' ')
identifier ('attachment')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('person')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('attachResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error attaching the service1."')
) (')')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('attachResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('timer')
. ('.')
identifier ('attach')
( ('(')
identifier ('service2')
, (',')
WHITE_SPACE (' ')
identifier ('attachment')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('person')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('attachResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error attaching the service2."')
) (')')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Starts the timer.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('startResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('timer')
. ('.')
start ('start')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('startResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Starting the task is failed."')
) (')')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// While loop will stop the function from exiting until the service ends.')
WHITE_SPACE ('\n    ')
while ('while')
WHITE_SPACE (' ')
( ('(')
identifier ('person')
. ('.')
identifier ('age')
WHITE_SPACE (' ')
< ('<')
WHITE_SPACE (' ')
identifier ('person')
. ('.')
identifier ('maxAge')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Waits until the age of the person reaches the max age.')
WHITE_SPACE ('\n        ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('2000')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('1000')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Cancels the timer. This will stop the timer and all the services')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// attached to it.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('stopResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('timer')
. ('.')
identifier ('stop')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('stopResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Stopping the task is failed."')
) (')')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"End."')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The service, which will be attached to the timer.')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('service1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
service ('service')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The onTrigger resource, which will trigger when the timer runs off.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The usage of the Person object being passed inside the function, which we')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// attached with the timer.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onTrigger')
( ('(')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('person')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('person')
. ('.')
identifier ('age')
WHITE_SPACE (' ')
< ('<')
WHITE_SPACE (' ')
identifier ('person')
. ('.')
identifier ('maxAge')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('person')
. ('.')
identifier ('age')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('person')
. ('.')
identifier ('age')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Hi "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('person')
. ('.')
identifier ('name')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" you are "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('person')
. ('.')
identifier ('age')
. ('.')
identifier ('toString')
( ('(')
) (')')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" years old now."')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
service ('service')
WHITE_SPACE (' ')
identifier ('service2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
service ('service')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onTrigger')
( ('(')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('person')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('person')
. ('.')
identifier ('age')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('person')
. ('.')
identifier ('name')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" started schooling"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
