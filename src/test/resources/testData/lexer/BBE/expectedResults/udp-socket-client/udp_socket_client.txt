LINE_COMMENT ('// This is the client implementation for the UDP socket.')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('socket')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create a new socket client.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Optionally, you can provide port that this socket need to bind or')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// both interface and port as follows.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// socket:UdpClient client = new(localAddress = { port: 48828 });')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// socket:UdpClient client = new(localAddress = { host: "localhost", port: 48828 });')
WHITE_SPACE ('\n    ')
identifier ('socket')
: (':')
identifier ('UdpClient')
WHITE_SPACE (' ')
identifier ('socketClient')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Hello from UDP client"')
; (';')
WHITE_SPACE ('\n    ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('c1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('msg')
. ('.')
identifier ('toBytes')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Send data to remote host.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Second parameter is the address of the remote host.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('sendResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n        ')
identifier ('socketClient')
-> ('->')
identifier ('sendTo')
( ('(')
identifier ('c1')
, (',')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('host')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"localhost"')
, (',')
WHITE_SPACE (' ')
identifier ('port')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('48826')
WHITE_SPACE (' ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('sendResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Number of bytes written: "')
, (',')
WHITE_SPACE (' ')
identifier ('sendResult')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
error ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('sendResult')
; (';')
WHITE_SPACE ('\n        ')
panic ('panic')
WHITE_SPACE (' ')
identifier ('e')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Wait until data receive from remote host.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This will block until receive at least a single byte.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Optionally, you can specify the length as below.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// socketClient->receiveFrom(length = 30)')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This will block until specified length of bytes receive from host.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('socketClient')
-> ('->')
identifier ('receiveFrom')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
[ ('[')
byte ('byte')
[ ('[')
] (']')
, (',')
WHITE_SPACE (' ')
int ('int')
, (',')
WHITE_SPACE (' ')
identifier ('socket')
: (':')
identifier ('Address')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
[ ('[')
identifier ('content')
, (',')
WHITE_SPACE (' ')
identifier ('length')
, (',')
WHITE_SPACE (' ')
identifier ('address')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('byteChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('createReadableChannel')
( ('(')
identifier ('content')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('byteChannel')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('ReadableByteChannel')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('ReadableCharacterChannel')
WHITE_SPACE (' ')
identifier ('characterChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                ')
new ('new')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('ReadableCharacterChannel')
( ('(')
identifier ('byteChannel')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"UTF-8"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('str')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('characterChannel')
. ('.')
identifier ('read')
( ('(')
DECIMAL_INTEGER_LITERAL ('60')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('str')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Received: "')
, (',')
WHITE_SPACE (' ')
< ('<')
@ ('@')
identifier ('untainted')
> ('>')
WHITE_SPACE (' ')
identifier ('str')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error: "')
, (',')
WHITE_SPACE (' ')
identifier ('str')
. ('.')
identifier ('detail')
( ('(')
) (')')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"An error occurred while receiving the data "')
, (',')
WHITE_SPACE ('\n            ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Close the client and release the bound port.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('closeResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('socketClient')
-> ('->')
identifier ('close')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('closeResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"An error occurred while closing the connection "')
, (',')
WHITE_SPACE ('\n            ')
identifier ('closeResult')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
