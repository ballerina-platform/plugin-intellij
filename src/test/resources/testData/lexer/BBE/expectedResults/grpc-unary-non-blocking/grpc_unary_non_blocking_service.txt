LINE_COMMENT ('// This is the server implementation for the unary blocking/unblocking scenario.')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('grpc')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Bind the `service` to the port.')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('HelloWorld')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('grpc')
: (':')
identifier ('Listener')
( ('(')
DECIMAL_INTEGER_LITERAL ('9090')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('hello')
( ('(')
identifier ('grpc')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Server received hello from "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('name')
) (')')
; (';')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('message')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Hello "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Send a response message to the caller.')
WHITE_SPACE ('\n        ')
identifier ('grpc')
: (':')
identifier ('Error')
? ('?')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('send')
( ('(')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('grpc')
: (':')
identifier ('Error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error from Connector: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('result')
. ('.')
identifier ('reason')
( ('(')
) (')')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" - "')
WHITE_SPACE ('\n                    ')
+ ('+')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('result')
. ('.')
identifier ('detail')
( ('(')
) (')')
[ ('[')
QUOTED_STRING_LITERAL ('"message"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Send the `completed` notification to the caller.')
WHITE_SPACE ('\n        ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('complete')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('grpc')
: (':')
identifier ('Error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error from Connector: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('result')
. ('.')
identifier ('reason')
( ('(')
) (')')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" - "')
WHITE_SPACE ('\n                    ')
+ ('+')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('result')
. ('.')
identifier ('detail')
( ('(')
) (')')
[ ('[')
QUOTED_STRING_LITERAL ('"message"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
