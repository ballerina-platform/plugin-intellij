import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('test')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This is the mock function, which will replace the real function.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Mock')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Since there is no module declaration, `.` is the current module.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// You can include any module (e.g., : `ballerina/io`).')
WHITE_SPACE ('\n    ')
identifier ('moduleName')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"."')
, (',')
WHITE_SPACE ('\n    ')
identifier ('functionName')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"intAdd"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The mock function's signature should match with the actual function's signature.')
WHITE_SPACE ('\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('mockIntAdd')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('a')
, (',')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('b')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"I'm the mock function!"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('a')
WHITE_SPACE (' ')
- ('-')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This is the test function.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
{ ('{')
} ('}')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertIntEquals')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('answer')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
identifier ('answer')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('intAdd')
( ('(')
DECIMAL_INTEGER_LITERAL ('5')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Function mocking test"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('answer')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"function mocking failed"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The real function, which is mocked above.')
WHITE_SPACE ('\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('intAdd')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('a')
, (',')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('b')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('a')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
