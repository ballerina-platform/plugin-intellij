import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('crypto')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('math')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('lang')
. ('.')
identifier (''string')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('strings')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
error ('error')
? ('?')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Input value for crypto operations.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('input')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Hello Ballerina!"')
; (';')
WHITE_SPACE ('\n    ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('inputArr')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('input')
. ('.')
identifier ('toBytes')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Hashing input value using MD5 hashing algorithm, and printing hash value using Hex encoding.')
WHITE_SPACE ('\n    ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('hashMd5')
( ('(')
identifier ('inputArr')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Hex encoded hash with MD5: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('output')
. ('.')
identifier ('toBase16')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Hashing input value using SHA1 hashing algorithm, and printing hash value using Base64 encoding.')
WHITE_SPACE ('\n    ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('hashSha1')
( ('(')
identifier ('inputArr')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Base64 encoded hash with SHA1: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('output')
. ('.')
identifier ('toBase64')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Hashing input value using SHA256 hashing algorithm, and printing hash value using Hex encoding.')
WHITE_SPACE ('\n    ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('hashSha256')
( ('(')
identifier ('inputArr')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Hex encoded hash with SHA256: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('output')
. ('.')
identifier ('toBase16')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Hashing input value using SHA384 hashing algorithm, and printing hash value using Base64 encoding.')
WHITE_SPACE ('\n    ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('hashSha384')
( ('(')
identifier ('inputArr')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Base64 encoded hash with SHA384: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('output')
. ('.')
identifier ('toBase64')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Hashing input value using SHA512 hashing algorithm, and printing hash value using Hex encoding.')
WHITE_SPACE ('\n    ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('hashSha512')
( ('(')
identifier ('inputArr')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Hex encoded hash with SHA512: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('output')
. ('.')
identifier ('toBase16')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n\n    ')
LINE_COMMENT ('// The key used for HMAC generation.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('key')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"somesecret"')
; (';')
WHITE_SPACE ('\n    ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('keyArr')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('key')
. ('.')
identifier ('toBytes')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// HMAC generation for input value using MD5 hashing algorithm, and printing HMAC value using Hex encoding.')
WHITE_SPACE ('\n    ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('hmacMd5')
( ('(')
identifier ('inputArr')
, (',')
WHITE_SPACE (' ')
identifier ('keyArr')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Hex encoded HMAC with MD5: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('output')
. ('.')
identifier ('toBase16')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// HMAC generation for input value using SHA1 hashing algorithm, and printing HMAC value using Base64 encoding.')
WHITE_SPACE ('\n    ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('hmacSha1')
( ('(')
identifier ('inputArr')
, (',')
WHITE_SPACE (' ')
identifier ('keyArr')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Base64 encoded HMAC with SHA1: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('output')
. ('.')
identifier ('toBase64')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// HMAC generation for input value using SHA256 hashing algorithm, and printing HMAC value using Hex encoding.')
WHITE_SPACE ('\n    ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('hmacSha256')
( ('(')
identifier ('inputArr')
, (',')
WHITE_SPACE (' ')
identifier ('keyArr')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Hex encoded HMAC with SHA256: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('output')
. ('.')
identifier ('toBase16')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// HMAC generation for input value using SHA384 hashing algorithm, and printing HMAC value using Base64 encoding.')
WHITE_SPACE ('\n    ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('hmacSha384')
( ('(')
identifier ('inputArr')
, (',')
WHITE_SPACE (' ')
identifier ('keyArr')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Base64 encoded HMAC with SHA384: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('output')
. ('.')
identifier ('toBase64')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// HMAC generation for input value using SHA512 hashing algorithm, and printing HMAC value using Hex encoding.')
WHITE_SPACE ('\n    ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('hmacSha512')
( ('(')
identifier ('inputArr')
, (',')
WHITE_SPACE (' ')
identifier ('keyArr')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Hex encoded HMAC with SHA512: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('output')
. ('.')
identifier ('toBase16')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n\n    ')
LINE_COMMENT ('// Hex encoded CRC32B checksum generation for input value.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"CRC32B for text: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('crc32b')
( ('(')
identifier ('inputArr')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Hex encoded CRC32B checksum generation for XML data.')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('xmlContent')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('f')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('H')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('o')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('B')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('i')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('f')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('>')
XML_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"CRC32 for xml content: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('crc32b')
( ('(')
identifier ('xmlContent')
. ('.')
identifier ('toString')
( ('(')
) (')')
. ('.')
identifier ('toBytes')
( ('(')
) (')')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n\n    ')
LINE_COMMENT ('// Obtaining reference to a RSA private key stored within a PKCS#12 or PFX format archive file.')
WHITE_SPACE ('\n    ')
identifier ('crypto')
: (':')
identifier ('KeyStore')
WHITE_SPACE (' ')
identifier ('keyStore')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"./sampleKeystore.p12"')
, (',')
WHITE_SPACE (' ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('privateKey')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('decodePrivateKey')
( ('(')
identifier ('keyStore')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('privateKey')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('PrivateKey')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Signing input value using RSA-MD5 signature algorithms, and printing the signature value using Hex encoding.')
WHITE_SPACE ('\n        ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('signRsaMd5')
( ('(')
identifier ('inputArr')
, (',')
WHITE_SPACE (' ')
identifier ('privateKey')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Hex encoded RSA-MD5 signature: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('output')
. ('.')
identifier ('toBase16')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Signing input value using RSA-MD5 signature algorithms, and printing the signature value using Base64 encoding.')
WHITE_SPACE ('\n        ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('signRsaSha1')
( ('(')
identifier ('inputArr')
, (',')
WHITE_SPACE (' ')
identifier ('privateKey')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Base64 encoded RSA-SHA1 signature: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('output')
. ('.')
identifier ('toBase64')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Signing input value using RSA-MD5 signature algorithms, and printing the signature value using Hex encoding.')
WHITE_SPACE ('\n        ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('signRsaSha256')
( ('(')
identifier ('inputArr')
, (',')
WHITE_SPACE (' ')
identifier ('privateKey')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Hex encoded RSA-SHA256 signature: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('output')
. ('.')
identifier ('toBase16')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Signing input value using RSA-MD5 signature algorithms, and printing the signature value using Base64 encoding.')
WHITE_SPACE ('\n        ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('signRsaSha384')
( ('(')
identifier ('inputArr')
, (',')
WHITE_SPACE (' ')
identifier ('privateKey')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Base64 encoded RSA-SHA384 signature: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('output')
. ('.')
identifier ('toBase64')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Signing input value using RSA-MD5 signature algorithms, and printing the signature value using Hex encoding.')
WHITE_SPACE ('\n        ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('signRsaSha512')
( ('(')
identifier ('inputArr')
, (',')
WHITE_SPACE (' ')
identifier ('privateKey')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Hex encoded RSA-SHA512 signature: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('output')
. ('.')
identifier ('toBase16')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Invalid private key"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n     ')
LINE_COMMENT ('// Randomly generate a 128 bit key for AES encryption.')
WHITE_SPACE ('\n     ')
byte ('byte')
[ ('[')
DECIMAL_INTEGER_LITERAL ('16')
] (']')
WHITE_SPACE (' ')
identifier ('rsaKeyArr')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
; (';')
WHITE_SPACE ('\n     ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
... ('...')
DECIMAL_INTEGER_LITERAL ('15')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('rsaKeyArr')
[ ('[')
identifier ('i')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
byte ('byte')
> ('>')
( ('(')
identifier ('math')
: (':')
identifier ('randomInRange')
( ('(')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('255')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n     ')
} ('}')
WHITE_SPACE ('\n\n     ')
LINE_COMMENT ('// Randomly generate a 128 bit IV for AES encryption.')
WHITE_SPACE ('\n     ')
byte ('byte')
[ ('[')
DECIMAL_INTEGER_LITERAL ('16')
] (']')
WHITE_SPACE (' ')
identifier ('ivArr')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
; (';')
WHITE_SPACE ('\n     ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
... ('...')
DECIMAL_INTEGER_LITERAL ('15')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('ivArr')
[ ('[')
identifier ('i')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
byte ('byte')
> ('>')
( ('(')
identifier ('math')
: (':')
identifier ('randomInRange')
( ('(')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('255')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n     ')
} ('}')
WHITE_SPACE ('\n\n     ')
LINE_COMMENT ('// Encrypt and decrypt input value using AES CBC PKCS5 padding.')
WHITE_SPACE ('\n     ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('encryptAesCbc')
( ('(')
identifier ('inputArr')
, (',')
WHITE_SPACE (' ')
identifier ('rsaKeyArr')
, (',')
WHITE_SPACE (' ')
identifier ('ivArr')
) (')')
; (';')
WHITE_SPACE ('\n     ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('decryptAesCbc')
( ('(')
identifier ('output')
, (',')
WHITE_SPACE (' ')
identifier ('rsaKeyArr')
, (',')
WHITE_SPACE (' ')
identifier ('ivArr')
) (')')
; (';')
WHITE_SPACE ('\n     ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"AES CBC PKCS5 decrypted value: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('strings')
: (':')
identifier ('fromBytes')
( ('(')
identifier ('output')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n     ')
LINE_COMMENT ('// Encrypt and decrypt input value using AES CBC no padding.')
WHITE_SPACE ('\n     ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('encryptAesCbc')
( ('(')
identifier ('inputArr')
, (',')
WHITE_SPACE (' ')
identifier ('rsaKeyArr')
, (',')
WHITE_SPACE (' ')
identifier ('ivArr')
, (',')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('NONE')
) (')')
; (';')
WHITE_SPACE ('\n     ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('decryptAesCbc')
( ('(')
identifier ('output')
, (',')
WHITE_SPACE (' ')
identifier ('rsaKeyArr')
, (',')
WHITE_SPACE (' ')
identifier ('ivArr')
, (',')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('NONE')
) (')')
; (';')
WHITE_SPACE ('\n     ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"AES CBC no padding decrypted value: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('strings')
: (':')
identifier ('fromBytes')
( ('(')
identifier ('output')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n     ')
LINE_COMMENT ('// Encrypt and decrypt input value using AES GCM PKCS5 padding.')
WHITE_SPACE ('\n     ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('encryptAesGcm')
( ('(')
identifier ('inputArr')
, (',')
WHITE_SPACE (' ')
identifier ('rsaKeyArr')
, (',')
WHITE_SPACE (' ')
identifier ('ivArr')
) (')')
; (';')
WHITE_SPACE ('\n     ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('decryptAesGcm')
( ('(')
identifier ('output')
, (',')
WHITE_SPACE (' ')
identifier ('rsaKeyArr')
, (',')
WHITE_SPACE (' ')
identifier ('ivArr')
) (')')
; (';')
WHITE_SPACE ('\n     ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"AES GCM PKCS5 decrypted value: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('strings')
: (':')
identifier ('fromBytes')
( ('(')
identifier ('output')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n     ')
LINE_COMMENT ('// Encrypt and decrypt input value using AES GCM no padding.')
WHITE_SPACE ('\n     ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('encryptAesGcm')
( ('(')
identifier ('inputArr')
, (',')
WHITE_SPACE (' ')
identifier ('rsaKeyArr')
, (',')
WHITE_SPACE (' ')
identifier ('ivArr')
, (',')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('NONE')
) (')')
; (';')
WHITE_SPACE ('\n     ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('decryptAesGcm')
( ('(')
identifier ('output')
, (',')
WHITE_SPACE (' ')
identifier ('rsaKeyArr')
, (',')
WHITE_SPACE (' ')
identifier ('ivArr')
, (',')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('NONE')
) (')')
; (';')
WHITE_SPACE ('\n     ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"AES GCM no padding decrypted value: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('strings')
: (':')
identifier ('fromBytes')
( ('(')
identifier ('output')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n     ')
LINE_COMMENT ('// Encrypt and decrypt input value using AES ECB PKCS5 padding.')
WHITE_SPACE ('\n     ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('encryptAesEcb')
( ('(')
identifier ('inputArr')
, (',')
WHITE_SPACE (' ')
identifier ('rsaKeyArr')
) (')')
; (';')
WHITE_SPACE ('\n     ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('decryptAesEcb')
( ('(')
identifier ('output')
, (',')
WHITE_SPACE (' ')
identifier ('rsaKeyArr')
) (')')
; (';')
WHITE_SPACE ('\n     ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"AES ECB PKCS5 decrypted value: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('strings')
: (':')
identifier ('fromBytes')
( ('(')
identifier ('output')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n     ')
LINE_COMMENT ('// Encrypt and decrypt input value using AES ECB no padding.')
WHITE_SPACE ('\n     ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('encryptAesEcb')
( ('(')
identifier ('inputArr')
, (',')
WHITE_SPACE (' ')
identifier ('rsaKeyArr')
, (',')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('NONE')
) (')')
; (';')
WHITE_SPACE ('\n     ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('decryptAesEcb')
( ('(')
identifier ('output')
, (',')
WHITE_SPACE (' ')
identifier ('rsaKeyArr')
, (',')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('NONE')
) (')')
; (';')
WHITE_SPACE ('\n     ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"AES ECB no padding decrypted value: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('strings')
: (':')
identifier ('fromBytes')
( ('(')
identifier ('output')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n     ')
LINE_COMMENT ('// Public key used for RSA encryption.')
WHITE_SPACE ('\n     ')
identifier ('crypto')
: (':')
identifier ('PublicKey')
WHITE_SPACE (' ')
identifier ('rsaPublicKey')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('decodePublicKey')
( ('(')
identifier ('keyStore')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
) (')')
; (';')
WHITE_SPACE ('\n\n     ')
LINE_COMMENT ('// Private key used for RSA decryption.')
WHITE_SPACE ('\n     ')
identifier ('crypto')
: (':')
identifier ('PrivateKey')
WHITE_SPACE (' ')
identifier ('rsaPrivateKey')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('decodePrivateKey')
( ('(')
identifier ('keyStore')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
) (')')
; (';')
WHITE_SPACE ('\n\n     ')
LINE_COMMENT ('// Encrypt and decrypt input value using RSA ECB PKCS1 padding.')
WHITE_SPACE ('\n     ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('encryptRsaEcb')
( ('(')
identifier ('inputArr')
, (',')
WHITE_SPACE (' ')
identifier ('rsaPublicKey')
) (')')
; (';')
WHITE_SPACE ('\n     ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('decryptRsaEcb')
( ('(')
identifier ('output')
, (',')
WHITE_SPACE (' ')
identifier ('rsaPrivateKey')
) (')')
; (';')
WHITE_SPACE ('\n     ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"RSA ECB PKCS1 decrypted value: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('strings')
: (':')
identifier ('fromBytes')
( ('(')
identifier ('output')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n     ')
LINE_COMMENT ('// Encrypt and decrypt input value using RSA ECB OAEPwithSHA512andMGF1 padding.')
WHITE_SPACE ('\n     ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('encryptRsaEcb')
( ('(')
identifier ('inputArr')
, (',')
WHITE_SPACE (' ')
identifier ('rsaPublicKey')
, (',')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('OAEPwithSHA512andMGF1')
) (')')
; (';')
WHITE_SPACE ('\n     ')
identifier ('output')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('decryptRsaEcb')
( ('(')
identifier ('output')
, (',')
WHITE_SPACE (' ')
identifier ('rsaPrivateKey')
, (',')
WHITE_SPACE (' ')
identifier ('crypto')
: (':')
identifier ('OAEPwithSHA512andMGF1')
) (')')
; (';')
WHITE_SPACE ('\n     ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"RSA ECB OAEPwithSHA512andMGF1 decrypted value: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('strings')
: (':')
identifier ('fromBytes')
( ('(')
identifier ('output')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
