import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Define a variable of type `json` that holds a mapping value.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('fname')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Mary"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('lname')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Jane"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('address')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('line')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"20 Palm Grove"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('city')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Colombo 03"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('country')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Sri Lanka"')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Field access is allowed on the `json`-typed variable. However, the return')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// type would be a union of `json` and `error`. An error will be returned')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// either if the value on which the access is done is not a mapping or if')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// it is a mapping, but it does not contain the particular key.')
WHITE_SPACE ('\n    ')
json ('json')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('r1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('j1')
. ('.')
identifier ('fname')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `r1` is of type `json` since `j1` is a mapping and contains the field `fname`.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('r1')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Similarly, chained field access is also allowed for `json`. If an `error`')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// is encountered at any point during the evaluation, evaluation stops at')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// that point and the result would be an error.')
WHITE_SPACE ('\n    ')
json ('json')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('r2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('j1')
. ('.')
identifier ('address')
. ('.')
identifier ('city')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `r2` is of type `json` since `j1` is a mapping with the field `address`, which in')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// turn is a mapping with the field `city`, which will be the resultant value.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('r2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Attempting to access a non-existent field would result in an error.')
WHITE_SPACE ('\n    ')
json ('json')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('r3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('j1')
. ('.')
identifier ('age')
. ('.')
identifier ('year')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `r3` is of type `error` since `j1` does not have a field with the key `age`.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('r3')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Similarly, optional field access is also allowed on lax types.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The main difference between field and optional field access for lax types')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// is that when a key is not found in a mapping, while the former returns')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// an `error`, the latter returns `null` (`()`) instead.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Similar to how errors are lifted with field access, `()` is lifted')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// for optional field access allowing chained access.')
WHITE_SPACE ('\n    ')
json ('json')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('r4')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('j1')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('age')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('year')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `r4` is `()` since `j1` does not have a field with the key `age`.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('r4')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Moreover, when optional field access occurs on `null` (`()`), the result would')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// also be `()`, whereas for field access it would have been an `error`.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
NULL_LITERAL ('null')
; (';')
WHITE_SPACE ('\n    ')
json ('json')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('r5')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('j2')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `r5` is `()` since `j2` is `()`.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('r5')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
