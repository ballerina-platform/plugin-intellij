import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Employee')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('id')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
final ('final')
WHITE_SPACE (' ')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('globalEmployee')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John"')
, (',')
WHITE_SPACE (' ')
identifier ('id')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2102')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The `==` and `!=` are used with the values of compatible `anydata|error` types and serves as deep value equality checks.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('i1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('i2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('isEqual')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('i1')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('i2')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('i1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" == "')
, (',')
WHITE_SPACE (' ')
identifier ('i2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" is "')
, (',')
WHITE_SPACE (' ')
identifier ('isEqual')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('i3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
; (';')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('isNotEqual')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('i1')
WHITE_SPACE (' ')
!= ('!=')
WHITE_SPACE (' ')
identifier ('i3')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('i1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" != "')
, (',')
WHITE_SPACE (' ')
identifier ('i3')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" is "')
, (',')
WHITE_SPACE (' ')
identifier ('isNotEqual')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
[ ('[')
string ('string')
| ('|')
int ('int')
, (',')
WHITE_SPACE (' ')
float ('float')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
WHITE_SPACE (' ')
identifier ('t1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('1.0')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
] (']')
; (';')
WHITE_SPACE ('\n    ')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
float ('float')
| ('|')
string ('string')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
WHITE_SPACE (' ')
identifier ('t2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('1.0')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('isEqual')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('t1')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('t2')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('t1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" == "')
, (',')
WHITE_SPACE (' ')
identifier ('t2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" is "')
, (',')
WHITE_SPACE (' ')
identifier ('isEqual')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
[ ('[')
int ('int')
, (',')
WHITE_SPACE (' ')
float ('float')
| ('|')
string ('string')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
] (']')
WHITE_SPACE (' ')
identifier ('t3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('11')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('1.0')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('isNotEqual')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('t1')
WHITE_SPACE (' ')
!= ('!=')
WHITE_SPACE (' ')
identifier ('t3')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('t1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" != "')
, (',')
WHITE_SPACE (' ')
identifier ('t3')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" is "')
, (',')
WHITE_SPACE (' ')
identifier ('isNotEqual')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('e1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Jane"')
, (',')
WHITE_SPACE (' ')
identifier ('id')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1100')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('e2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Jane"')
, (',')
WHITE_SPACE (' ')
identifier ('id')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1100')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('isNotEqual')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e1')
WHITE_SPACE (' ')
!= ('!=')
WHITE_SPACE (' ')
identifier ('e2')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('e1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" != "')
, (',')
WHITE_SPACE (' ')
identifier ('e2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" is "')
, (',')
WHITE_SPACE (' ')
identifier ('isNotEqual')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('e3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Anne"')
, (',')
WHITE_SPACE (' ')
identifier ('id')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1100')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('isEqual')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e1')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('e3')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('e1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" == "')
, (',')
WHITE_SPACE (' ')
identifier ('e3')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" is "')
, (',')
WHITE_SPACE (' ')
identifier ('isEqual')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `===` and `!==` are used with values of compatible types and serves as reference equality checks.')
WHITE_SPACE ('\n    ')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('e4')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getGlobalEmployee')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('e5')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getGlobalEmployee')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('isRefEqual')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e4')
WHITE_SPACE (' ')
=== ('===')
WHITE_SPACE (' ')
identifier ('e5')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"e4 === e5 is "')
, (',')
WHITE_SPACE (' ')
identifier ('isRefEqual')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('e4')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John"')
, (',')
WHITE_SPACE (' ')
identifier ('id')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2102')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('isNotRefEqual')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e4')
WHITE_SPACE (' ')
!== ('!==')
WHITE_SPACE (' ')
identifier ('e5')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"e4 !== e5 is "')
, (',')
WHITE_SPACE (' ')
identifier ('isNotRefEqual')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// `===` for non-reference types is the same as `==`.')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('f1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('1.1')
; (';')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('f2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('1.1')
; (';')
WHITE_SPACE ('\n    ')
identifier ('isRefEqual')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('f1')
WHITE_SPACE (' ')
=== ('===')
WHITE_SPACE (' ')
identifier ('f2')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"f1 === f2 is "')
, (',')
WHITE_SPACE (' ')
identifier ('isRefEqual')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('f2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('12.1')
; (';')
WHITE_SPACE ('\n    ')
identifier ('isNotRefEqual')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('f1')
WHITE_SPACE (' ')
!== ('!==')
WHITE_SPACE (' ')
identifier ('f2')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"f1 !== f2 is "')
, (',')
WHITE_SPACE (' ')
identifier ('isNotRefEqual')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getGlobalEmployee')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
identifier ('Employee')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('globalEmployee')
; (';')
WHITE_SPACE ('\n')
} ('}')
