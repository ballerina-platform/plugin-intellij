import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The XML element. There can be only one root element.')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('x1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('b')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('k')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('T')
XML_ALL_CHAR ('h')
XML_ALL_CHAR ('e')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('L')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('s')
XML_ALL_CHAR ('t')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('W')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('d')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('b')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('k')
XML_ALL_CHAR ('>')
XML_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x1')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The XML text.')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('x2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_ALL_CHAR ('H')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('o')
XML_ALL_CHAR (',')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('w')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('d')
XML_ALL_CHAR ('!')
XML_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The XML comment.')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('x3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('!')
XML_ALL_CHAR ('-')
XML_ALL_CHAR ('-')
XML_ALL_CHAR ('I')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('m')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('a')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('c')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('-')
XML_ALL_CHAR ('-')
XML_ALL_CHAR ('>')
XML_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x3')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The XML processing instructions.')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('x4')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('?')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('g')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('t')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('d')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('?')
XML_ALL_CHAR ('>')
XML_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x4')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Multiple XML items can be combined to form a sequence of XML. The resulting sequence is another XML on its own.')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('x5')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('x1')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('x2')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('x3')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('x4')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nResulting XML sequence:"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x5')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
