import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function takes one required parameter, one defaultable parameter, and')
WHITE_SPACE ('\n')
LINE_COMMENT ('// one rest parameter of the type `string`. A function can have only one rest')
WHITE_SPACE ('\n')
LINE_COMMENT ('// parameter. The rest parameter can take any number of values and is')
WHITE_SPACE ('\n')
LINE_COMMENT ('// equivalent to a list of the same type.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('printDetails')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
, (',')
WHITE_SPACE ('\n                      ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('18')
, (',')
WHITE_SPACE ('\n                      ')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('modules')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('detailString')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Name: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('name')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('", Age: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('age')
. ('.')
identifier ('toString')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('modules')
. ('.')
identifier ('length')
( ('(')
) (')')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('detailString')
) (')')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('index')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('moduleString')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Module(s): "')
; (';')
WHITE_SPACE ('\n\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('module')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('modules')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('index')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('moduleString')
WHITE_SPACE (' ')
+= ('+=')
WHITE_SPACE (' ')
identifier ('module')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('moduleString')
WHITE_SPACE (' ')
+= ('+=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('", "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('module')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('index')
WHITE_SPACE (' ')
+= ('+=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('detailString')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('", "')
, (',')
WHITE_SPACE (' ')
identifier ('moduleString')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Call the function by passing only the required parameter.')
WHITE_SPACE ('\n    ')
identifier ('printDetails')
( ('(')
QUOTED_STRING_LITERAL ('"Alice"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Call the function by passing the required parameter and')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the defaultable parameter. Named arguments can also be used')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// since values are not passed for the rest parameter.')
WHITE_SPACE ('\n    ')
identifier ('printDetails')
( ('(')
QUOTED_STRING_LITERAL ('"Bob"')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('20')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Call the function by passing the required parameter, the defaultable')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// parameter, and one value for the rest parameter.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Arguments cannot be passed as named arguments since values are specified')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// for the rest parameter.')
WHITE_SPACE ('\n    ')
identifier ('printDetails')
( ('(')
QUOTED_STRING_LITERAL ('"Corey"')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('19')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Math"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Call the function by passing the required parameter, defaultable parameter,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// and multiple values for the rest parameter.')
WHITE_SPACE ('\n    ')
identifier ('printDetails')
( ('(')
QUOTED_STRING_LITERAL ('"Diana"')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('20')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Math"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Physics"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Pass an array as the rest parameter instead of calling the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// function by passing each value separately.')
WHITE_SPACE ('\n    ')
string ('string')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('modules')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"Math"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Physics"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('printDetails')
( ('(')
QUOTED_STRING_LITERAL ('"Diana"')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('20')
, (',')
WHITE_SPACE (' ')
... ('...')
identifier ('modules')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
