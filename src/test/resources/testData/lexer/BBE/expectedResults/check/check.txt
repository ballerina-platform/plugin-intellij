import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('lang')
. ('.')
identifier (''int')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('ints')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The `parse()` function takes a `string` argument and attempts to convert it to an `int`.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('parse')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('num')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
| ('|')
error ('error')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('ints')
: (':')
identifier ('fromString')
( ('(')
identifier ('num')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('scale')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('num')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
| ('|')
error ('error')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The `check` unary operator can be used to lift errors.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// In this instance, `check` is used to lift the (potential) error')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// returned by the `parse()` function. If the actual value returned')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// by the function is an `error`, the function immediately returns')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the error. If `check` is used within a function, the return type')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// of the function must include `error` in its return signature.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('parse')
( ('(')
identifier ('num')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Passing a valid integer as a `string` will return an `int`.')
WHITE_SPACE ('\n    ')
int ('int')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('w')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('parse')
( ('(')
QUOTED_STRING_LITERAL ('"12"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('w')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Passing a random `string` will return an `error`.')
WHITE_SPACE ('\n    ')
int ('int')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('parse')
( ('(')
QUOTED_STRING_LITERAL ('"invalid"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
int ('int')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('y')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('scale')
( ('(')
QUOTED_STRING_LITERAL ('"12"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('y')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
int ('int')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('z')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('scale')
( ('(')
QUOTED_STRING_LITERAL ('"Invalid"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('z')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
