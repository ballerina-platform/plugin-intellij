import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The XML element with nested children.')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('bookXML')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('b')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('k')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('\n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('S')
XML_ALL_CHAR ('h')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('c')
XML_ALL_CHAR ('k')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('H')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('s')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('\n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('u')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('h')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('\n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('f')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('e')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('i')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('=')
XML_ALL_CHAR ('"')
XML_ALL_CHAR ('S')
XML_ALL_CHAR ('i')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('"')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('A')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('h')
XML_ALL_CHAR ('u')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('f')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('\n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('C')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('\n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('D')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('y')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('\n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('u')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('h')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('\n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('b')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('r')
XML_ALL_CHAR (':')
XML_ALL_CHAR ('y')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('r')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('x')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('s')
XML_ALL_CHAR (':')
XML_ALL_CHAR ('b')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('=')
XML_ALL_CHAR ('"')
XML_ALL_CHAR ('h')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('t')
XML_ALL_CHAR ('p')
XML_ALL_CHAR (':')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('b')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('l')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('i')
XML_ALL_CHAR ('n')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('.')
XML_ALL_CHAR ('c')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('m')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('"')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('2')
XML_ALL_CHAR ('0')
XML_ALL_CHAR ('1')
XML_ALL_CHAR ('9')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('b')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('r')
XML_ALL_CHAR (':')
XML_ALL_CHAR ('y')
XML_ALL_CHAR ('e')
XML_ALL_CHAR ('a')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('\n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('!')
XML_ALL_CHAR ('-')
XML_ALL_CHAR ('-')
XML_ALL_CHAR ('P')
XML_ALL_CHAR ('r')
XML_ALL_CHAR ('i')
XML_ALL_CHAR ('c')
XML_ALL_CHAR ('e')
XML_ALL_CHAR (':')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('$')
XML_ALL_CHAR ('1')
XML_ALL_CHAR ('0')
XML_ALL_CHAR ('-')
XML_ALL_CHAR ('-')
XML_ALL_CHAR ('>')
XML_ALL_CHAR ('\n')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR (' ')
XML_ALL_CHAR ('<')
XML_ALL_CHAR ('/')
XML_ALL_CHAR ('b')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('o')
XML_ALL_CHAR ('k')
XML_ALL_CHAR ('>')
XML_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n    \n    ')
LINE_COMMENT ('// You can access child XML items using the field-based or index-based access expressions.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('bookXML')
. ('.')
identifier ('author')
. ('.')
identifier ('fname')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('bookXML')
[ ('[')
QUOTED_STRING_LITERAL ('"author"')
] (']')
[ ('[')
QUOTED_STRING_LITERAL ('"fname"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Accessing a non-existing child will return `nil`.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('bookXML')
. ('.')
identifier ('ISBN')
. ('.')
identifier ('code')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('bookXML')
[ ('[')
QUOTED_STRING_LITERAL ('"ISBN"')
] (']')
[ ('[')
QUOTED_STRING_LITERAL ('"code"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The result of the above field-based or index-based access is another XML. ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Any XML function can be invoked on top of the resulting XML.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('bookXML')
. ('.')
identifier ('author')
. ('.')
identifier ('fname')
. ('.')
identifier ('getTextValue')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('bookXML')
[ ('[')
QUOTED_STRING_LITERAL ('"author"')
] (']')
[ ('[')
QUOTED_STRING_LITERAL ('"fname"')
] (']')
. ('.')
identifier ('getTextValue')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// You can also retrieve attributes of the resulting child XML.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('bookXML')
. ('.')
identifier ('author')
. ('.')
identifier ('fname')
@ ('@')
[ ('[')
QUOTED_STRING_LITERAL ('"title"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('bookXML')
[ ('[')
QUOTED_STRING_LITERAL ('"author"')
] (']')
[ ('[')
QUOTED_STRING_LITERAL ('"fname"')
] (']')
@ ('@')
[ ('[')
QUOTED_STRING_LITERAL ('"title"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// You can access the elements by their namespace-qualified (fully-qualified) name.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('bookXML')
[ ('[')
QUOTED_STRING_LITERAL ('"{http://ballerina.com/a}year"')
] (']')
. ('.')
identifier ('getTextValue')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
xmlns ('xmlns')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"http://ballerina.com/a"')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('foo')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('bookXML')
[ ('[')
identifier ('foo')
: (':')
identifier ('year')
] (']')
. ('.')
identifier ('getTextValue')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
