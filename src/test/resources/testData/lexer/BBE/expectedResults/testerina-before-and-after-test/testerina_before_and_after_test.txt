import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('test')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This before-function is executed before the test function.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('beforeFunc')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"I'm the before function!"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The Test function.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// Use the `before` and `after` attributes to define the function names')
WHITE_SPACE ('\n')
LINE_COMMENT ('// of the functions that need to be executed before and after the test function.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('before')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"beforeFunc"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('after')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"afterFunc"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testFunction')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"I'm in test function!"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertTrue')
( ('(')
BOOLEAN_LITERAL ('true')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Failed!"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This after-function is executed after the test function.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('afterFunc')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"I'm the after function!"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
