import ballerina.net.ws;

@Description {value:"This example gives you the basic idea of WebSocket endpoint."}
@ws:configuration {
    basePath: "/basic/ws",
    subProtocols: ["xml", "json"],
    idleTimeoutInSeconds: 120,
    host: "0.0.0.0",
    port: 9090,
    wssPort: 9095,
    keyStoreFile: "${ballerina.home}/bre/security/ballerinaKeystore.p12",
    keyStorePassword: "ballerina",
    certPassword: "ballerina"
}

service<ws> SimpleSecureServer {

    @Description {value:"This resource is responsible for handling user logic on handshake time. Note that the connection is not yet established while this code is running."}
    resource onHandshake(ws:HandshakeConnection conn) {

    }

    @Description {value:"This resource is triggered after a successful client connection."}
    resource onOpen(ws:Connection conn) {

    }

    @Description {value:"This resource is triggered when a new text frame is received from a client."}
    resource onTextMessage (ws:Connection conn, ws:TextFrame frame) {

    }

    @Description {value:"This resource is triggered when a new binary frame is received from a client."}
    resource onBinaryMessage(ws:Connection conn, ws:BinaryFrame frame) {

    }

    @Description {value:"This resource is triggered when a ping message is received from the client."}
    resource onPing(ws:Connection conn, ws:PingFrame frame) {

    }

    @Description {value:"This resource is triggered when a pong message is received"}
    resource onPong(ws:Connection conn, ws:PongFrame frame) {

    }

    @Description {value:"This resource is triggered when a particular client reaches it's idle timeout defined in the ws:configuration annotation."}
    resource onIdleTimeout(ws:Connection conn) {

    }

    @Description {value:"This resource is triggered when a client connection is closed from the client side."}
    resource onClose(ws:Connection conn, ws:CloseFrame closeFrame) {

    }
}
